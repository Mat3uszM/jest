diff --git a/packages/expect/build/asymmetricMatchers.d.ts b/packages/expect/build/asymmetricMatchers.d.ts
new file mode 100644
index 000000000..19ac72cca
--- /dev/null
+++ b/packages/expect/build/asymmetricMatchers.d.ts
@@ -0,0 +1,65 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ */
+export declare class AsymmetricMatcher {
+    $$typeof: Symbol;
+    inverse?: boolean;
+    constructor();
+}
+declare class Any extends AsymmetricMatcher {
+    sample: any;
+    constructor(sample: unknown);
+    asymmetricMatch(other: unknown): boolean;
+    toString(): string;
+    getExpectedType(): string;
+    toAsymmetricMatcher(): string;
+}
+declare class Anything extends AsymmetricMatcher {
+    asymmetricMatch(other: unknown): boolean;
+    toString(): string;
+    toAsymmetricMatcher(): string;
+}
+declare class ArrayContaining extends AsymmetricMatcher {
+    sample: Array<unknown>;
+    constructor(sample: Array<unknown>, inverse?: boolean);
+    asymmetricMatch(other: Array<unknown>): boolean;
+    toString(): string;
+    getExpectedType(): string;
+}
+declare class ObjectContaining extends AsymmetricMatcher {
+    sample: Object;
+    constructor(sample: Object, inverse?: boolean);
+    asymmetricMatch(other: any): boolean;
+    toString(): string;
+    getExpectedType(): string;
+}
+declare class StringContaining extends AsymmetricMatcher {
+    sample: string;
+    constructor(sample: string, inverse?: boolean);
+    asymmetricMatch(other: string): boolean;
+    toString(): string;
+    getExpectedType(): string;
+}
+declare class StringMatching extends AsymmetricMatcher {
+    sample: RegExp;
+    constructor(sample: string | RegExp, inverse?: boolean);
+    asymmetricMatch(other: string): boolean;
+    toString(): string;
+    getExpectedType(): string;
+}
+export declare const any: (expectedObject: any) => Any;
+export declare const anything: () => Anything;
+export declare const arrayContaining: (sample: unknown[]) => ArrayContaining;
+export declare const arrayNotContaining: (sample: unknown[]) => ArrayContaining;
+export declare const objectContaining: (sample: Object) => ObjectContaining;
+export declare const objectNotContaining: (sample: Object) => ObjectContaining;
+export declare const stringContaining: (expected: string) => StringContaining;
+export declare const stringNotContaining: (expected: string) => StringContaining;
+export declare const stringMatching: (expected: string | RegExp) => StringMatching;
+export declare const stringNotMatching: (expected: string | RegExp) => StringMatching;
+export {};
+//# sourceMappingURL=asymmetricMatchers.d.ts.map
\ No newline at end of file
diff --git a/packages/expect/build/asymmetricMatchers.d.ts.map b/packages/expect/build/asymmetricMatchers.d.ts.map
new file mode 100644
index 000000000..f10f26401
--- /dev/null
+++ b/packages/expect/build/asymmetricMatchers.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"asymmetricMatchers.d.ts","sourceRoot":"","sources":["../src/asymmetricMatchers.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAMH,qBAAa,iBAAiB;IAC5B,QAAQ,EAAE,MAAM,CAAC;IACjB,OAAO,CAAC,EAAE,OAAO,CAAC;;CAKnB;AAED,cAAM,GAAI,SAAQ,iBAAiB;IACjC,MAAM,EAAE,GAAG,CAAC;gBAEA,MAAM,EAAE,OAAO;IAW3B,eAAe,CAAC,KAAK,EAAE,OAAO;IAwB9B,QAAQ;IAIR,eAAe;IAwBf,mBAAmB;CAGpB;AAED,cAAM,QAAS,SAAQ,iBAAiB;IACtC,eAAe,CAAC,KAAK,EAAE,OAAO;IAI9B,QAAQ;IAMR,mBAAmB;CAGpB;AAED,cAAM,eAAgB,SAAQ,iBAAiB;IAC7C,MAAM,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC;gBAEX,MAAM,EAAE,KAAK,CAAC,OAAO,CAAC,EAAE,OAAO,GAAE,OAAe;IAM5D,eAAe,CAAC,KAAK,EAAE,KAAK,CAAC,OAAO,CAAC;IAmBrC,QAAQ;IAIR,eAAe;CAGhB;AAED,cAAM,gBAAiB,SAAQ,iBAAiB;IAC9C,MAAM,EAAE,MAAM,CAAC;gBAEH,MAAM,EAAE,MAAM,EAAE,OAAO,GAAE,OAAe;IAMpD,eAAe,CAAC,KAAK,EAAE,GAAG;IAoC1B,QAAQ;IAIR,eAAe;CAGhB;AAED,cAAM,gBAAiB,SAAQ,iBAAiB;IAC9C,MAAM,EAAE,MAAM,CAAC;gBAEH,MAAM,EAAE,MAAM,EAAE,OAAO,GAAE,OAAe;IASpD,eAAe,CAAC,KAAK,EAAE,MAAM;IAM7B,QAAQ;IAIR,eAAe;CAGhB;AAED,cAAM,cAAe,SAAQ,iBAAiB;IAC5C,MAAM,EAAE,MAAM,CAAC;gBAEH,MAAM,EAAE,MAAM,GAAG,MAAM,EAAE,OAAO,GAAE,OAAe;IAU7D,eAAe,CAAC,KAAK,EAAE,MAAM;IAM7B,QAAQ;IAIR,eAAe;CAGhB;AAED,eAAO,MAAM,GAAG,8BAAmD,CAAC;AACpE,eAAO,MAAM,QAAQ,gBAAuB,CAAC;AAC7C,eAAO,MAAM,eAAe,wCACC,CAAC;AAC9B,eAAO,MAAM,kBAAkB,wCACI,CAAC;AACpC,eAAO,MAAM,gBAAgB,sCACC,CAAC;AAC/B,eAAO,MAAM,mBAAmB,sCACI,CAAC;AACrC,eAAO,MAAM,gBAAgB,wCACG,CAAC;AACjC,eAAO,MAAM,mBAAmB,wCACM,CAAC;AACvC,eAAO,MAAM,cAAc,+CACG,CAAC;AAC/B,eAAO,MAAM,iBAAiB,+CACM,CAAC"}
\ No newline at end of file
diff --git a/packages/expect/build/extractExpectedAssertionsErrors.d.ts b/packages/expect/build/extractExpectedAssertionsErrors.d.ts
new file mode 100644
index 000000000..7740ce00d
--- /dev/null
+++ b/packages/expect/build/extractExpectedAssertionsErrors.d.ts
@@ -0,0 +1,18 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ */
+declare const extractExpectedAssertionsErrors: () => ({
+    actual: any;
+    error: any;
+    expected: number;
+} | {
+    actual: string;
+    error: any;
+    expected: string;
+})[];
+export default extractExpectedAssertionsErrors;
+//# sourceMappingURL=extractExpectedAssertionsErrors.d.ts.map
\ No newline at end of file
diff --git a/packages/expect/build/extractExpectedAssertionsErrors.d.ts.map b/packages/expect/build/extractExpectedAssertionsErrors.d.ts.map
new file mode 100644
index 000000000..b288661d2
--- /dev/null
+++ b/packages/expect/build/extractExpectedAssertionsErrors.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"extractExpectedAssertionsErrors.d.ts","sourceRoot":"","sources":["../src/extractExpectedAssertionsErrors.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAqBH,QAAA,MAAM,+BAA+B;;;;;;;;IAsDpC,CAAC;AAEF,eAAe,+BAA+B,CAAC"}
\ No newline at end of file
diff --git a/packages/expect/build/extractExpectedAssertionsErrors.js b/packages/expect/build/extractExpectedAssertionsErrors.js
index 4f07fb2c5..e709404ce 100644
--- a/packages/expect/build/extractExpectedAssertionsErrors.js
+++ b/packages/expect/build/extractExpectedAssertionsErrors.js
@@ -15,7 +15,6 @@ var _jestMatchersObject = require('./jestMatchersObject');
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  *
- *
  */
 const resetAssertionsLocalState = () => {
   (0, _jestMatchersObject.setState)({
diff --git a/packages/expect/build/fakeChalk.d.ts b/packages/expect/build/fakeChalk.d.ts
new file mode 100644
index 000000000..4397600dd
--- /dev/null
+++ b/packages/expect/build/fakeChalk.d.ts
@@ -0,0 +1,8 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+export {};
+//# sourceMappingURL=fakeChalk.d.ts.map
\ No newline at end of file
diff --git a/packages/expect/build/fakeChalk.d.ts.map b/packages/expect/build/fakeChalk.d.ts.map
new file mode 100644
index 000000000..07a11d734
--- /dev/null
+++ b/packages/expect/build/fakeChalk.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"fakeChalk.d.ts","sourceRoot":"","sources":["../src/fakeChalk.ts"],"names":[],"mappings":"AAAA;;;;;GAKG"}
\ No newline at end of file
diff --git a/packages/expect/build/fakeChalk.js b/packages/expect/build/fakeChalk.js
index 421c0c4f5..4e896b374 100644
--- a/packages/expect/build/fakeChalk.js
+++ b/packages/expect/build/fakeChalk.js
@@ -11,7 +11,6 @@ function _interopRequireDefault(obj) {
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
- *
  */
 const returnInput = str => str;

diff --git a/packages/expect/build/index.d.ts b/packages/expect/build/index.d.ts
new file mode 100644
index 000000000..7e5897539
--- /dev/null
+++ b/packages/expect/build/index.d.ts
@@ -0,0 +1,9 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ */
+export {};
+//# sourceMappingURL=index.d.ts.map
\ No newline at end of file
diff --git a/packages/expect/build/index.d.ts.map b/packages/expect/build/index.d.ts.map
new file mode 100644
index 000000000..0bb819898
--- /dev/null
+++ b/packages/expect/build/index.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"index.d.ts","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG"}
\ No newline at end of file
diff --git a/packages/expect/build/index.js b/packages/expect/build/index.js
index dcf836c4d..96465d85b 100644
--- a/packages/expect/build/index.js
+++ b/packages/expect/build/index.js
@@ -424,4 +424,4 @@ expect.getState = _jestMatchersObject.getState;
 expect.setState = _jestMatchersObject.setState;
 expect.extractExpectedAssertionsErrors =
   _extractExpectedAssertionsErrors.default;
-module.exports = expect;
+exports = expect;
diff --git a/packages/expect/build/jasmineUtils.d.ts b/packages/expect/build/jasmineUtils.d.ts
new file mode 100644
index 000000000..48abefe6a
--- /dev/null
+++ b/packages/expect/build/jasmineUtils.d.ts
@@ -0,0 +1,9 @@
+import { Tester } from "./types";
+export declare function equals(a: unknown, b: unknown, customTesters?: Array<Tester>, strictCheck?: boolean): boolean;
+export declare function isA(typeName: string, value: unknown): boolean;
+export declare function fnNameFor(func: Function): string;
+export declare function isUndefined(obj: any): boolean;
+export declare function hasProperty(obj: object | null, property: string): boolean;
+export declare function isImmutableUnorderedKeyed(maybeKeyed: any): boolean;
+export declare function isImmutableUnorderedSet(maybeSet: any): boolean;
+//# sourceMappingURL=jasmineUtils.d.ts.map
\ No newline at end of file
diff --git a/packages/expect/build/jasmineUtils.d.ts.map b/packages/expect/build/jasmineUtils.d.ts.map
new file mode 100644
index 000000000..5a5cff5e3
--- /dev/null
+++ b/packages/expect/build/jasmineUtils.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"jasmineUtils.d.ts","sourceRoot":"","sources":["../src/jasmineUtils.ts"],"names":[],"mappings":"AA0BA,OAAO,EAAE,MAAM,EAAE,MAAM,SAAS,CAAC;AAGjC,wBAAgB,MAAM,CACpB,CAAC,EAAE,OAAO,EACV,CAAC,EAAE,OAAO,EACV,aAAa,CAAC,EAAE,KAAK,CAAC,MAAM,CAAC,EAC7B,WAAW,CAAC,EAAE,OAAO,GACpB,OAAO,CAGT;AAkND,wBAAgB,GAAG,CAAC,QAAQ,EAAE,MAAM,EAAE,KAAK,EAAE,OAAO,WAEnD;AAWD,wBAAgB,SAAS,CAAC,IAAI,EAAE,QAAQ,UAOvC;AAED,wBAAgB,WAAW,CAAC,GAAG,EAAE,GAAG,WAEnC;AAcD,wBAAgB,WAAW,CAAC,GAAG,EAAE,MAAM,GAAG,IAAI,EAAE,QAAQ,EAAE,MAAM,GAAG,OAAO,CAUzE;AAOD,wBAAgB,yBAAyB,CAAC,UAAU,EAAE,GAAG,WAMxD;AAED,wBAAgB,uBAAuB,CAAC,QAAQ,EAAE,GAAG,WAMpD"}
\ No newline at end of file
diff --git a/packages/expect/build/jasmineUtils.js b/packages/expect/build/jasmineUtils.js
index 62f3e62b1..46739a7db 100644
--- a/packages/expect/build/jasmineUtils.js
+++ b/packages/expect/build/jasmineUtils.js
@@ -33,7 +33,6 @@ LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

-
 */

 /* eslint-disable */
diff --git a/packages/expect/build/jestMatchersObject.d.ts b/packages/expect/build/jestMatchersObject.d.ts
new file mode 100644
index 000000000..01fa2b02e
--- /dev/null
+++ b/packages/expect/build/jestMatchersObject.d.ts
@@ -0,0 +1,14 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ */
+import { Expect, MatchersObject } from './types';
+export declare const INTERNAL_MATCHER_FLAG: unique symbol;
+export declare const getState: () => any;
+export declare const setState: (state: object) => void;
+export declare const getMatchers: () => any;
+export declare const setMatchers: (matchers: MatchersObject, isInternal: boolean, expect: Expect) => void;
+//# sourceMappingURL=jestMatchersObject.d.ts.map
\ No newline at end of file
diff --git a/packages/expect/build/jestMatchersObject.d.ts.map b/packages/expect/build/jestMatchersObject.d.ts.map
new file mode 100644
index 000000000..cc5c41d45
--- /dev/null
+++ b/packages/expect/build/jestMatchersObject.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"jestMatchersObject.d.ts","sourceRoot":"","sources":["../src/jestMatchersObject.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAGH,OAAO,EAAC,MAAM,EAAE,cAAc,EAAoB,MAAM,SAAS,CAAC;AAQlE,eAAO,MAAM,qBAAqB,eAAwC,CAAC;AAgB3E,eAAO,MAAM,QAAQ,WAAoD,CAAC;AAE1E,eAAO,MAAM,QAAQ,yBAEpB,CAAC;AAEF,eAAO,MAAM,WAAW,WAAuD,CAAC;AAEhF,eAAO,MAAM,WAAW,yEAyDvB,CAAC"}
\ No newline at end of file
diff --git a/packages/expect/build/jestMatchersObject.js b/packages/expect/build/jestMatchersObject.js
index a4fc8b8be..350ebdb89 100644
--- a/packages/expect/build/jestMatchersObject.js
+++ b/packages/expect/build/jestMatchersObject.js
@@ -61,8 +61,9 @@ const setMatchers = (matchers, isInternal, expect) => {
         }

         asymmetricMatch(other) {
-          const _ref = matcher(other, ...this.sample),
-            pass = _ref.pass;
+          // @ts-ignore
+          const _matcher = matcher(other, ...this.sample),
+            pass = _matcher.pass;

           return this.inverse ? !pass : pass;
         }
diff --git a/packages/expect/build/matchers.d.ts b/packages/expect/build/matchers.d.ts
new file mode 100644
index 000000000..c021fdeb4
--- /dev/null
+++ b/packages/expect/build/matchers.d.ts
@@ -0,0 +1,11 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ */
+import { MatchersObject } from './types';
+declare const matchers: MatchersObject;
+export default matchers;
+//# sourceMappingURL=matchers.d.ts.map
\ No newline at end of file
diff --git a/packages/expect/build/matchers.d.ts.map b/packages/expect/build/matchers.d.ts.map
new file mode 100644
index 000000000..305a8f5ca
--- /dev/null
+++ b/packages/expect/build/matchers.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"matchers.d.ts","sourceRoot":"","sources":["../src/matchers.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAoBH,OAAO,EAAC,cAAc,EAAe,MAAM,SAAS,CAAC;AAmBrD,QAAA,MAAM,QAAQ,EAAE,cAqvBf,CAAC;AAEF,eAAe,QAAQ,CAAC"}
\ No newline at end of file
diff --git a/packages/expect/build/matchers.js b/packages/expect/build/matchers.js
index 301f3768a..f3781eb39 100644
--- a/packages/expect/build/matchers.js
+++ b/packages/expect/build/matchers.js
@@ -25,7 +25,6 @@ function _interopRequireDefault(obj) {
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  *
- *
  */
 const matchers = {
   toBe(received, expected) {
@@ -78,7 +77,7 @@ const matchers = {
   },

   toBeCloseTo(received, expected, precision = 2) {
-    const secondArgument = arguments.length === 3 ? 'precision' : null;
+    const secondArgument = arguments.length === 3 ? 'precision' : undefined;
     const isNot = this.isNot;
     const options = {
       isNot,
diff --git a/packages/expect/build/spyMatchers.d.ts b/packages/expect/build/spyMatchers.d.ts
new file mode 100644
index 000000000..05a87598d
--- /dev/null
+++ b/packages/expect/build/spyMatchers.d.ts
@@ -0,0 +1,11 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ */
+import { MatchersObject } from './types';
+declare const spyMatchers: MatchersObject;
+export default spyMatchers;
+//# sourceMappingURL=spyMatchers.d.ts.map
\ No newline at end of file
diff --git a/packages/expect/build/spyMatchers.d.ts.map b/packages/expect/build/spyMatchers.d.ts.map
new file mode 100644
index 000000000..8aeb37905
--- /dev/null
+++ b/packages/expect/build/spyMatchers.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"spyMatchers.d.ts","sourceRoot":"","sources":["../src/spyMatchers.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAkBH,OAAO,EAAC,cAAc,EAAC,MAAM,SAAS,CAAC;AAmavC,QAAA,MAAM,WAAW,EAAE,cAyBlB,CAAC;AAoJF,eAAe,WAAW,CAAC"}
\ No newline at end of file
diff --git a/packages/expect/build/spyMatchers.js b/packages/expect/build/spyMatchers.js
index a79d55aac..ccc0619ba 100644
--- a/packages/expect/build/spyMatchers.js
+++ b/packages/expect/build/spyMatchers.js
@@ -60,7 +60,6 @@ function _arrayWithHoles(arr) {
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  *
- *
  */
 const CALL_PRINT_LIMIT = 3;
 const RETURN_PRINT_LIMIT = 5;
@@ -402,7 +401,7 @@ const createNthCalledWithMatcher = matcherName => (
 ) => {
   ensureMock(received, matcherName);
   const receivedIsSpy = isSpy(received);
-  const type = receivedIsSpy ? 'spy' : 'mock function';
+  const type = receivedIsSpy ? 'spy' : 'mock function'; // @ts-ignore

   if (typeof nth !== 'number' || parseInt(nth, 10) !== nth || nth < 1) {
     const message = () =>
@@ -459,7 +458,7 @@ const createNthReturnedWithMatcher = matcherName => (
   nth,
   expected
 ) => {
-  ensureMock(received, matcherName);
+  ensureMock(received, matcherName); //@ts-ignore

   if (typeof nth !== 'number' || parseInt(nth, 10) !== nth || nth < 1) {
     const message = () =>
diff --git a/packages/expect/build/toThrowMatchers.d.ts b/packages/expect/build/toThrowMatchers.d.ts
new file mode 100644
index 000000000..ed9c0ec06
--- /dev/null
+++ b/packages/expect/build/toThrowMatchers.d.ts
@@ -0,0 +1,15 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ */
+import { MatchersObject, MatcherState } from './types';
+export declare const createMatcher: (matcherName: string, fromPromise?: boolean | undefined) => (this: MatcherState, received: Function, expected: any) => {
+    message: () => string;
+    pass: boolean;
+};
+declare const matchers: MatchersObject;
+export default matchers;
+//# sourceMappingURL=toThrowMatchers.d.ts.map
\ No newline at end of file
diff --git a/packages/expect/build/toThrowMatchers.d.ts.map b/packages/expect/build/toThrowMatchers.d.ts.map
new file mode 100644
index 000000000..20f737639
--- /dev/null
+++ b/packages/expect/build/toThrowMatchers.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"toThrowMatchers.d.ts","sourceRoot":"","sources":["../src/toThrowMatchers.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAaH,OAAO,EAAC,cAAc,EAAE,YAAY,EAAC,MAAM,SAAS,CAAC;AAwCrD,eAAO,MAAM,aAAa;;;CA0DvB,CAAC;AAEJ,QAAA,MAAM,QAAQ,EAAE,cAGf,CAAC;AAyOF,eAAe,QAAQ,CAAC"}
\ No newline at end of file
diff --git a/packages/expect/build/toThrowMatchers.js b/packages/expect/build/toThrowMatchers.js
index c9db3095b..9f00c5cbb 100644
--- a/packages/expect/build/toThrowMatchers.js
+++ b/packages/expect/build/toThrowMatchers.js
@@ -17,7 +17,6 @@ var _utils = require('./utils');
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  *
- *
  */
 const DID_NOT_THROW = 'Received function did not throw';

@@ -382,6 +381,7 @@ const formatStack = thrown =>
   thrown === null || !thrown.isError
     ? ''
     : (0, _jestMessageUtil.formatStackTrace)(
+        // @ts-ignore
         (0, _jestMessageUtil.separateMessageFromStack)(thrown.value.stack)
           .stack,
         {
diff --git a/packages/expect/build/types.d.ts b/packages/expect/build/types.d.ts
new file mode 100644
index 000000000..a581c2c2f
--- /dev/null
+++ b/packages/expect/build/types.d.ts
@@ -0,0 +1,92 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ */
+import { Config } from '@jest/types';
+export declare type SyncExpectationResult = {
+    pass: boolean;
+    message: () => string;
+};
+export declare type AsyncExpectationResult = Promise<SyncExpectationResult>;
+export declare type ExpectationResult = SyncExpectationResult | AsyncExpectationResult;
+export declare type RawMatcherFn = (expected: any, actual: any, options: any) => ExpectationResult;
+export declare type ThrowingMatcherFn = (actual: any) => void;
+export declare type PromiseMatcherFn = (actual: any) => Promise<void>;
+export declare type Tester = (a: any, b: any) => boolean | undefined;
+export declare type MatcherState = {
+    assertionCalls: number;
+    currentTestName?: string;
+    dontThrow?: () => void;
+    error?: Error;
+    equals: (a: unknown, b: unknown, customTesters?: Array<Tester>, strictCheck?: boolean) => boolean;
+    expand?: boolean;
+    expectedAssertionsNumber?: number;
+    isExpectingAssertions?: boolean;
+    isNot: boolean;
+    promise: string;
+    suppressedErrors: Array<Error>;
+    testPath?: Config.Path;
+    utils: {
+        printExpected: (value: unknown) => string;
+        printReceived: (value: unknown) => string;
+        iterableEquality: Tester;
+        subsetEquality: Tester;
+    };
+};
+export declare type AsymmetricMatcher = Object;
+export declare type MatchersObject = {
+    [id: string]: RawMatcherFn;
+};
+export declare type Expect = {
+    (expected: any): ExpectationObject;
+    addSnapshotSerializer(arg0: any): void;
+    assertions(arg0: number): void;
+    extend(arg0: any): void;
+    extractExpectedAssertionsErrors: () => Array<{
+        actual: string | number;
+        error: Error;
+        expected: string;
+    }>;
+    getState(): MatcherState;
+    hasAssertions(): void;
+    setState(arg0: any): void;
+    any(expectedObject: any): AsymmetricMatcher;
+    anything(): AsymmetricMatcher;
+    arrayContaining(sample: Array<any>): AsymmetricMatcher;
+    objectContaining(sample: Object): AsymmetricMatcher;
+    stringContaining(expected: string): AsymmetricMatcher;
+    stringMatching(expected: string | RegExp): AsymmetricMatcher;
+    [id: string]: AsymmetricMatcher;
+    not: {
+        [id: string]: AsymmetricMatcher;
+    };
+};
+declare type resolvesFn = {
+    [id: string]: PromiseMatcherFn;
+} & {
+    not: {
+        [id: string]: PromiseMatcherFn;
+    };
+};
+declare type rejectsFn = {
+    [id: string]: PromiseMatcherFn;
+} & {
+    not: {
+        [id: string]: PromiseMatcherFn;
+    };
+};
+declare type notFn = {
+    [id: string]: ThrowingMatcherFn;
+};
+export declare type ExpectationObject = {
+    [id: string]: ThrowingMatcherFn;
+} & {
+    resolves: resolvesFn;
+    rejects: rejectsFn;
+    not: notFn;
+};
+export {};
+//# sourceMappingURL=types.d.ts.map
\ No newline at end of file
diff --git a/packages/expect/build/types.d.ts.map b/packages/expect/build/types.d.ts.map
new file mode 100644
index 000000000..c0ca8e102
--- /dev/null
+++ b/packages/expect/build/types.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"types.d.ts","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/packages/expect/build/types.js b/packages/expect/build/types.js
new file mode 100644
index 000000000..ad9a93a7c
--- /dev/null
+++ b/packages/expect/build/types.js
@@ -0,0 +1 @@
+'use strict';
diff --git a/packages/expect/build/utils.d.ts b/packages/expect/build/utils.d.ts
new file mode 100644
index 000000000..8eaef0cdb
--- /dev/null
+++ b/packages/expect/build/utils.d.ts
@@ -0,0 +1,26 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ */
+declare type GetPath = {
+    hasEndProp?: boolean;
+    lastTraversedObject: unknown;
+    traversedPath: Array<string>;
+    value?: unknown;
+};
+export declare const hasOwnProperty: (object: object, key: string) => boolean;
+export declare const getPath: (object: object, propertyPath: string | string[]) => GetPath;
+export declare const getObjectSubset: (object: any, subset: any) => any;
+export declare const iterableEquality: (a: any, b: any) => boolean | undefined;
+export declare const subsetEquality: (object: any, subset: any) => boolean | undefined;
+export declare const typeEquality: (a: any, b: any) => false | undefined;
+export declare const sparseArrayEquality: (a: unknown, b: unknown) => boolean | undefined;
+export declare const partition: <T>(items: T[], predicate: (arg: T) => boolean) => [T[], T[]];
+export declare const isError: (value: unknown) => boolean;
+export declare function emptyObject(obj: any): boolean;
+export declare const isOneline: (expected: any, received: any) => boolean;
+export {};
+//# sourceMappingURL=utils.d.ts.map
\ No newline at end of file
diff --git a/packages/expect/build/utils.d.ts.map b/packages/expect/build/utils.d.ts.map
new file mode 100644
index 000000000..1db0fed84
--- /dev/null
+++ b/packages/expect/build/utils.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"utils.d.ts","sourceRoot":"","sources":["../src/utils.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AASH,aAAK,OAAO,GAAG;IACb,UAAU,CAAC,EAAE,OAAO,CAAC;IACrB,mBAAmB,EAAE,OAAO,CAAC;IAC7B,aAAa,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC;IAC7B,KAAK,CAAC,EAAE,OAAO,CAAC;CACjB,CAAC;AAyBF,eAAO,MAAM,cAAc,0CAEY,CAAC;AAExC,eAAO,MAAM,OAAO,8DA+CnB,CAAC;AAIF,eAAO,MAAM,eAAe,mCA2B3B,CAAC;AAMF,eAAO,MAAM,gBAAgB,yCAoF5B,CAAC;AASF,eAAO,MAAM,cAAc,mDAc1B,CAAC;AAEF,eAAO,MAAM,YAAY,uCAMxB,CAAC;AAEF,eAAO,MAAM,mBAAmB,iDAS/B,CAAC;AAEF,eAAO,MAAM,SAAS,+DASrB,CAAC;AAGF,eAAO,MAAM,OAAO,6BAWnB,CAAC;AAEF,wBAAgB,WAAW,CAAC,GAAG,EAAE,GAAG,WAEnC;AAID,eAAO,MAAM,SAAS,2CAGkD,CAAC"}
\ No newline at end of file
