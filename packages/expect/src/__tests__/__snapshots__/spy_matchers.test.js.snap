// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`lastCalledWith works only on spies or jest.fn 1`] = `
"expect(jest.fn())[.not].lastCalledWith()

jest.fn() value must be a mock function or spy.
Received:
  function: [Function fn]"
`;

exports[`lastCalledWith works when not called 1`] = `
"expect(jest.fn()).lastCalledWith(expected)

Expected mock function to have been last called with:
  [\\"foo\\", \\"bar\\"]
But it was not called."
`;

exports[`lastCalledWith works with Immutable.js objects 1`] = `
"expect(jest.fn()).not.lastCalledWith(expected)

Expected mock function to not have been last called with:
  [Immutable.Map {\\"a\\": {\\"b\\": \\"c\\"}}, Immutable.Map {\\"a\\": {\\"b\\": \\"c\\"}}]"
`;

exports[`lastCalledWith works with Map 1`] = `
"expect(jest.fn()).not.lastCalledWith(expected)

Expected mock function to not have been last called with:
  [Map {1 => 2, 2 => 1}]"
`;

exports[`lastCalledWith works with Map 2`] = `
"expect(jest.fn()).lastCalledWith(expected)

Expected mock function to have been last called with:
  Map {\\"a\\" => \\"b\\", \\"b\\" => \\"a\\"} as argument 1, but it was called with Map {1 => 2, 2 => 1}."
`;

exports[`lastCalledWith works with Set 1`] = `
"expect(jest.fn()).not.lastCalledWith(expected)

Expected mock function to not have been last called with:
  [Set {1, 2}]"
`;

exports[`lastCalledWith works with Set 2`] = `
"expect(jest.fn()).lastCalledWith(expected)

Expected mock function to have been last called with:
  Set {3, 4} as argument 1, but it was called with Set {1, 2}."
`;

exports[`lastCalledWith works with arguments that don't match 1`] = `
"expect(jest.fn()).lastCalledWith(expected)

Expected mock function to have been last called with:
  \\"bar\\" as argument 2, but it was called with \\"bar1\\"."
`;

exports[`lastCalledWith works with arguments that match 1`] = `
"expect(jest.fn()).not.lastCalledWith(expected)

Expected mock function to not have been last called with:
  [\\"foo\\", \\"bar\\"]"
`;

exports[`lastCalledWith works with many arguments 1`] = `
"expect(jest.fn()).not.lastCalledWith(expected)

Expected mock function to not have been last called with:
  [\\"foo\\", \\"bar\\"]"
`;

exports[`lastCalledWith works with many arguments that don't match 1`] = `
"expect(jest.fn()).lastCalledWith(expected)

Expected mock function to have been last called with:
  \\"bar\\" as argument 2, but it was called with \\"bar3\\"."
`;

exports[`toBeCalled works only on spies or jest.fn 1`] = `
"expect(jest.fn())[.not].toBeCalled()

jest.fn() value must be a mock function or spy.
Received:
  function: [Function fn]"
`;

exports[`toBeCalled works with jest.fn 1`] = `
"expect(jest.fn()).toBeCalled()

Expected mock function to have been called."
`;

exports[`toBeCalled works with jest.fn 2`] = `
"expect(jest.fn()).not.toBeCalled()

Expected mock function not to be called but it was called with:
  []"
`;

exports[`toBeCalled works with jest.fn 3`] = `
"expect(received)[.not].toBeCalled()

Matcher does not accept any arguments.
Got:
  number: 555"
`;

exports[`toBeCalledWith works only on spies or jest.fn 1`] = `
"expect(jest.fn())[.not].toBeCalledWith()

jest.fn() value must be a mock function or spy.
Received:
  function: [Function fn]"
`;

exports[`toHaveBeenCalled works only on spies or jest.fn 1`] = `
"expect(jest.fn())[.not].toHaveBeenCalled()

jest.fn() value must be a mock function or spy.
Received:
  function: [Function fn]"
`;

exports[`toHaveBeenCalled works with jest.fn 1`] = `
"expect(jest.fn()).toHaveBeenCalled()

Expected mock function to have been called."
`;

exports[`toHaveBeenCalled works with jest.fn 2`] = `
"expect(jest.fn()).not.toHaveBeenCalled()

Expected mock function not to be called but it was called with:
  []"
`;

exports[`toHaveBeenCalled works with jest.fn 3`] = `
"expect(received)[.not].toHaveBeenCalled()

Matcher does not accept any arguments.
Got:
  number: 555"
`;

exports[`toHaveBeenCalledTimes accepts only numbers 1`] = `
"expect(received)[.not].toHaveBeenCalledTimes(expected)

Expected value must be a number.
Got:
  object: {}"
`;

exports[`toHaveBeenCalledTimes accepts only numbers 2`] = `
"expect(received)[.not].toHaveBeenCalledTimes(expected)

Expected value must be a number.
Got:
  array: []"
`;

exports[`toHaveBeenCalledTimes accepts only numbers 3`] = `
"expect(received)[.not].toHaveBeenCalledTimes(expected)

Expected value must be a number.
Got:
  boolean: true"
`;

exports[`toHaveBeenCalledTimes accepts only numbers 4`] = `
"expect(received)[.not].toHaveBeenCalledTimes(expected)

Expected value must be a number.
Got:
  string: \\"a\\""
`;

exports[`toHaveBeenCalledTimes accepts only numbers 5`] = `
"expect(received)[.not].toHaveBeenCalledTimes(expected)

Expected value must be a number.
Got:
  map: Map {}"
`;

exports[`toHaveBeenCalledTimes accepts only numbers 6`] = `
"expect(received)[.not].toHaveBeenCalledTimes(expected)

Expected value must be a number.
Got:
  function: [Function anonymous]"
`;

exports[`toHaveBeenCalledTimes fails if function called less than expected times 1`] = `
"expect(jest.fn()).toHaveBeenCalledTimes(2)

Expected mock function to have been called two times, but it was called one time."
`;

exports[`toHaveBeenCalledTimes fails if function called more than expected times 1`] = `
"expect(jest.fn()).toHaveBeenCalledTimes(2)

Expected mock function to have been called two times, but it was called three times."
`;

exports[`toHaveBeenCalledTimes passes if function called equal to expected times 1`] = `
"expect(jest.fn()).not.toHaveBeenCalledTimes(2)

Expected mock function not to be called two times, but it was called exactly two times."
`;

exports[`toHaveBeenCalledTimes verifies that actual is a Spy 1`] = `
"expect(jest.fn())[.not].toHaveBeenCalledTimes()

jest.fn() value must be a mock function or spy.
Received:
  function: [Function fn]"
`;

exports[`toHaveBeenCalledWith works only on spies or jest.fn 1`] = `
"expect(jest.fn())[.not].toHaveBeenCalledWith()

jest.fn() value must be a mock function or spy.
Received:
  function: [Function fn]"
`;

exports[`toHaveBeenCalledWith works when not called 1`] = `
"expect(jest.fn()).toHaveBeenCalledWith(expected)

Expected mock function to have been called with:
  [\\"foo\\", \\"bar\\"]
But it was not called."
`;

exports[`toHaveBeenCalledWith works with Immutable.js objects 1`] = `
"expect(jest.fn()).not.toHaveBeenCalledWith(expected)

Expected mock function not to have been called with:
  [Immutable.Map {\\"a\\": {\\"b\\": \\"c\\"}}, Immutable.Map {\\"a\\": {\\"b\\": \\"c\\"}}]"
`;

exports[`toHaveBeenCalledWith works with Map 1`] = `
"expect(jest.fn()).not.toHaveBeenCalledWith(expected)

Expected mock function not to have been called with:
  [Map {1 => 2, 2 => 1}]"
`;

exports[`toHaveBeenCalledWith works with Map 2`] = `
"expect(jest.fn()).toHaveBeenCalledWith(expected)

Expected mock function to have been called with:
  Map {\\"a\\" => \\"b\\", \\"b\\" => \\"a\\"} as argument 1, but it was called with Map {1 => 2, 2 => 1}."
`;

exports[`toHaveBeenCalledWith works with Set 1`] = `
"expect(jest.fn()).not.toHaveBeenCalledWith(expected)

Expected mock function not to have been called with:
  [Set {1, 2}]"
`;

exports[`toHaveBeenCalledWith works with Set 2`] = `
"expect(jest.fn()).toHaveBeenCalledWith(expected)

Expected mock function to have been called with:
  Set {3, 4} as argument 1, but it was called with Set {1, 2}."
`;

exports[`toHaveBeenCalledWith works with arguments that don't match 1`] = `
"expect(jest.fn()).toHaveBeenCalledWith(expected)

Expected mock function to have been called with:
  \\"bar\\" as argument 2, but it was called with \\"bar1\\"."
`;

exports[`toHaveBeenCalledWith works with arguments that match 1`] = `
"expect(jest.fn()).not.toHaveBeenCalledWith(expected)

Expected mock function not to have been called with:
  [\\"foo\\", \\"bar\\"]"
`;

exports[`toHaveBeenCalledWith works with many arguments 1`] = `
"expect(jest.fn()).not.toHaveBeenCalledWith(expected)

Expected mock function not to have been called with:
  [\\"foo\\", \\"bar\\"]"
`;

exports[`toHaveBeenCalledWith works with many arguments that don't match 1`] = `
"expect(jest.fn()).toHaveBeenCalledWith(expected)

Expected mock function to have been called with:
  \\"bar\\" as argument 2, but it was called with \\"bar3\\".

  \\"bar\\" as argument 2, but it was called with \\"bar2\\".

  \\"bar\\" as argument 2, but it was called with \\"bar1\\"."
`;

exports[`toHaveBeenLastCalledWith works only on spies or jest.fn 1`] = `
"expect(jest.fn())[.not].toHaveBeenLastCalledWith()

jest.fn() value must be a mock function or spy.
Received:
  function: [Function fn]"
`;

exports[`toHaveBeenLastCalledWith works when not called 1`] = `
"expect(jest.fn()).toHaveBeenLastCalledWith(expected)

Expected mock function to have been last called with:
  [\\"foo\\", \\"bar\\"]
But it was not called."
`;

exports[`toHaveBeenLastCalledWith works with Immutable.js objects 1`] = `
"expect(jest.fn()).not.toHaveBeenLastCalledWith(expected)

Expected mock function to not have been last called with:
  [Immutable.Map {\\"a\\": {\\"b\\": \\"c\\"}}, Immutable.Map {\\"a\\": {\\"b\\": \\"c\\"}}]"
`;

exports[`toHaveBeenLastCalledWith works with Map 1`] = `
"expect(jest.fn()).not.toHaveBeenLastCalledWith(expected)

Expected mock function to not have been last called with:
  [Map {1 => 2, 2 => 1}]"
`;

exports[`toHaveBeenLastCalledWith works with Map 2`] = `
"expect(jest.fn()).toHaveBeenLastCalledWith(expected)

Expected mock function to have been last called with:
  Map {\\"a\\" => \\"b\\", \\"b\\" => \\"a\\"} as argument 1, but it was called with Map {1 => 2, 2 => 1}."
`;

exports[`toHaveBeenLastCalledWith works with Set 1`] = `
"expect(jest.fn()).not.toHaveBeenLastCalledWith(expected)

Expected mock function to not have been last called with:
  [Set {1, 2}]"
`;

exports[`toHaveBeenLastCalledWith works with Set 2`] = `
"expect(jest.fn()).toHaveBeenLastCalledWith(expected)

Expected mock function to have been last called with:
  Set {3, 4} as argument 1, but it was called with Set {1, 2}."
`;

exports[`toHaveBeenLastCalledWith works with arguments that don't match 1`] = `
"expect(jest.fn()).toHaveBeenLastCalledWith(expected)

Expected mock function to have been last called with:
  \\"bar\\" as argument 2, but it was called with \\"bar1\\"."
`;

exports[`toHaveBeenLastCalledWith works with arguments that match 1`] = `
"expect(jest.fn()).not.toHaveBeenLastCalledWith(expected)

Expected mock function to not have been last called with:
  [\\"foo\\", \\"bar\\"]"
`;

exports[`toHaveBeenLastCalledWith works with many arguments 1`] = `
"expect(jest.fn()).not.toHaveBeenLastCalledWith(expected)

Expected mock function to not have been last called with:
  [\\"foo\\", \\"bar\\"]"
`;

exports[`toHaveBeenLastCalledWith works with many arguments that don't match 1`] = `
"expect(jest.fn()).toHaveBeenLastCalledWith(expected)

Expected mock function to have been last called with:
  \\"bar\\" as argument 2, but it was called with \\"bar3\\"."
`;
