// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`.rejects fails for promise that resolves 1`] = `
"expect(received).rejects.toBe()

Expected received Promise to reject, instead it resolved to value
  4"
`;

exports[`.rejects fails non-promise value "a" 1`] = `
"expect(received).rejects.toBeDefined()

received value must be a Promise.
Received:
  string: \\"a\\""
`;

exports[`.rejects fails non-promise value [1] 1`] = `
"expect(received).rejects.toBeDefined()

received value must be a Promise.
Received:
  array: [1]"
`;

exports[`.rejects fails non-promise value [Function anonymous] 1`] = `
"expect(received).rejects.toBeDefined()

received value must be a Promise.
Received:
  function: [Function anonymous]"
`;

exports[`.rejects fails non-promise value {"a": 1} 1`] = `
"expect(received).rejects.toBeDefined()

received value must be a Promise.
Received:
  object: {\\"a\\": 1}"
`;

exports[`.rejects fails non-promise value 4 1`] = `
"expect(received).rejects.toBeDefined()

received value must be a Promise.
Received:
  number: 4"
`;

exports[`.rejects fails non-promise value null 1`] = `
"expect(received).rejects.toBeDefined()

received value must be a Promise.
Received: null"
`;

exports[`.rejects fails non-promise value true 1`] = `
"expect(received).rejects.toBeDefined()

received value must be a Promise.
Received:
  boolean: true"
`;

exports[`.rejects fails non-promise value undefined 1`] = `
"expect(received).rejects.toBeDefined()

received value must be a Promise.
Received: undefined"
`;

exports[`.resolves fails for promise that rejects 1`] = `
"expect(received).resolves.toBe()

Expected received Promise to resolve, instead it rejected to value
  4"
`;

exports[`.resolves fails non-promise value "a" 1`] = `
"expect(received).resolves.toBeDefined()

received value must be a Promise.
Received:
  string: \\"a\\""
`;

exports[`.resolves fails non-promise value "a" synchronously 1`] = `
"expect(received).resolves.toBeDefined()

received value must be a Promise.
Received:
  string: \\"a\\""
`;

exports[`.resolves fails non-promise value [1] 1`] = `
"expect(received).resolves.toBeDefined()

received value must be a Promise.
Received:
  array: [1]"
`;

exports[`.resolves fails non-promise value [1] synchronously 1`] = `
"expect(received).resolves.toBeDefined()

received value must be a Promise.
Received:
  array: [1]"
`;

exports[`.resolves fails non-promise value [Function anonymous] 1`] = `
"expect(received).resolves.toBeDefined()

received value must be a Promise.
Received:
  function: [Function anonymous]"
`;

exports[`.resolves fails non-promise value [Function anonymous] synchronously 1`] = `
"expect(received).resolves.toBeDefined()

received value must be a Promise.
Received:
  function: [Function anonymous]"
`;

exports[`.resolves fails non-promise value {"a": 1} 1`] = `
"expect(received).resolves.toBeDefined()

received value must be a Promise.
Received:
  object: {\\"a\\": 1}"
`;

exports[`.resolves fails non-promise value {"a": 1} synchronously 1`] = `
"expect(received).resolves.toBeDefined()

received value must be a Promise.
Received:
  object: {\\"a\\": 1}"
`;

exports[`.resolves fails non-promise value 4 1`] = `
"expect(received).resolves.toBeDefined()

received value must be a Promise.
Received:
  number: 4"
`;

exports[`.resolves fails non-promise value 4 synchronously 1`] = `
"expect(received).resolves.toBeDefined()

received value must be a Promise.
Received:
  number: 4"
`;

exports[`.resolves fails non-promise value null 1`] = `
"expect(received).resolves.toBeDefined()

received value must be a Promise.
Received: null"
`;

exports[`.resolves fails non-promise value null synchronously 1`] = `
"expect(received).resolves.toBeDefined()

received value must be a Promise.
Received: null"
`;

exports[`.resolves fails non-promise value true 1`] = `
"expect(received).resolves.toBeDefined()

received value must be a Promise.
Received:
  boolean: true"
`;

exports[`.resolves fails non-promise value true synchronously 1`] = `
"expect(received).resolves.toBeDefined()

received value must be a Promise.
Received:
  boolean: true"
`;

exports[`.resolves fails non-promise value undefined 1`] = `
"expect(received).resolves.toBeDefined()

received value must be a Promise.
Received: undefined"
`;

exports[`.resolves fails non-promise value undefined synchronously 1`] = `
"expect(received).resolves.toBeDefined()

received value must be a Promise.
Received: undefined"
`;

exports[`.toBe() does not crash on circular references 1`] = `
"expect(received).toBe(expected) // Object.is equality

Expected value to be:
  {}
Received:
  {\\"circular\\": [Circular]}

Difference:

- Expected
+ Received

- Object {}
+ Object {
+   \\"circular\\": [Circular],
+ }"
`;

exports[`.toBe() fails for '"a"' with '.not' 1`] = `
"expect(received).not.toBe(expected) // Object.is equality

Expected value to not be:
  \\"a\\"
Received:
  \\"a\\""
`;

exports[`.toBe() fails for '[]' with '.not' 1`] = `
"expect(received).not.toBe(expected) // Object.is equality

Expected value to not be:
  []
Received:
  []"
`;

exports[`.toBe() fails for '{}' with '.not' 1`] = `
"expect(received).not.toBe(expected) // Object.is equality

Expected value to not be:
  {}
Received:
  {}"
`;

exports[`.toBe() fails for '1' with '.not' 1`] = `
"expect(received).not.toBe(expected) // Object.is equality

Expected value to not be:
  1
Received:
  1"
`;

exports[`.toBe() fails for 'false' with '.not' 1`] = `
"expect(received).not.toBe(expected) // Object.is equality

Expected value to not be:
  false
Received:
  false"
`;

exports[`.toBe() fails for 'null' with '.not' 1`] = `
"expect(received).not.toBe(expected) // Object.is equality

Expected value to not be:
  null
Received:
  null"
`;

exports[`.toBe() fails for 'undefined' with '.not' 1`] = `
"expect(received).not.toBe(expected) // Object.is equality

Expected value to not be:
  undefined
Received:
  undefined"
`;

exports[`.toBe() fails for: "abc" and "cde" 1`] = `
"expect(received).toBe(expected) // Object.is equality

Expected value to be:
  \\"cde\\"
Received:
  \\"abc\\""
`;

exports[`.toBe() fails for: "with 
trailing space" and "without trailing space" 1`] = `
"expect(received).toBe(expected) // Object.is equality

Expected value to be:
  \\"without trailing space\\"
Received:
  \\"with 
trailing space\\""
`;

exports[`.toBe() fails for: [] and [] 1`] = `
"expect(received).toBe(expected) // Object.is equality

Expected value to be:
  []
Received:
  []

Difference:

Compared values have no visual difference. Looks like you wanted to test for object/array equality with strict \`toBe\` matcher. You probably need to use \`toEqual\` instead."
`;

exports[`.toBe() fails for: {"a": 1} and {"a": 1} 1`] = `
"expect(received).toBe(expected) // Object.is equality

Expected value to be:
  {\\"a\\": 1}
Received:
  {\\"a\\": 1}

Difference:

Compared values have no visual difference. Looks like you wanted to test for object/array equality with strict \`toBe\` matcher. You probably need to use \`toEqual\` instead."
`;

exports[`.toBe() fails for: {"a": 1} and {"a": 5} 1`] = `
"expect(received).toBe(expected) // Object.is equality

Expected value to be:
  {\\"a\\": 5}
Received:
  {\\"a\\": 1}

Difference:

- Expected
+ Received

  Object {
-   \\"a\\": 5,
+   \\"a\\": 1,
  }"
`;

exports[`.toBe() fails for: {} and {} 1`] = `
"expect(received).toBe(expected) // Object.is equality

Expected value to be:
  {}
Received:
  {}

Difference:

Compared values have no visual difference. Looks like you wanted to test for object/array equality with strict \`toBe\` matcher. You probably need to use \`toEqual\` instead."
`;

exports[`.toBe() fails for: -0 and 0 1`] = `
"expect(received).toBe(expected) // Object.is equality

Expected value to be:
  0
Received:
  -0

Difference:

Compared values have no visual difference."
`;

exports[`.toBe() fails for: 1 and 2 1`] = `
"expect(received).toBe(expected) // Object.is equality

Expected value to be:
  2
Received:
  1"
`;

exports[`.toBe() fails for: null and undefined 1`] = `
"expect(received).toBe(expected) // Object.is equality

Expected value to be:
  undefined
Received:
  null

Difference:

  Comparing two different types of values. Expected undefined but received null."
`;

exports[`.toBe() fails for: true and false 1`] = `
"expect(received).toBe(expected) // Object.is equality

Expected value to be:
  false
Received:
  true"
`;

exports[`.toBeCloseTo() {pass: true} expect(0)toBeCloseTo( 0) 1`] = `
"expect(received).not.toBeCloseTo(expected)

Expected value not to be close to (with 2-digit precision):
  0
Received:
  0"
`;

exports[`.toBeCloseTo() {pass: true} expect(0)toBeCloseTo( 0.001) 1`] = `
"expect(received).not.toBeCloseTo(expected)

Expected value not to be close to (with 2-digit precision):
  0.001
Received:
  0"
`;

exports[`.toBeCloseTo() {pass: true} expect(1.23)toBeCloseTo( 1.225) 1`] = `
"expect(received).not.toBeCloseTo(expected)

Expected value not to be close to (with 2-digit precision):
  1.225
Received:
  1.23"
`;

exports[`.toBeCloseTo() {pass: true} expect(1.23)toBeCloseTo( 1.226) 1`] = `
"expect(received).not.toBeCloseTo(expected)

Expected value not to be close to (with 2-digit precision):
  1.226
Received:
  1.23"
`;

exports[`.toBeCloseTo() {pass: true} expect(1.23)toBeCloseTo( 1.229) 1`] = `
"expect(received).not.toBeCloseTo(expected)

Expected value not to be close to (with 2-digit precision):
  1.229
Received:
  1.23"
`;

exports[`.toBeCloseTo() {pass: true} expect(1.23)toBeCloseTo( 1.234) 1`] = `
"expect(received).not.toBeCloseTo(expected)

Expected value not to be close to (with 2-digit precision):
  1.234
Received:
  1.23"
`;

exports[`.toBeCloseTo() accepts an optional precision argument: [0, 0.000004, 5] 1`] = `
"expect(received).not.toBeCloseTo(expected, precision)

Expected value not to be close to (with 5-digit precision):
  0.000004
Received:
  0"
`;

exports[`.toBeCloseTo() accepts an optional precision argument: [0, 0.0001, 3] 1`] = `
"expect(received).not.toBeCloseTo(expected, precision)

Expected value not to be close to (with 3-digit precision):
  0.0001
Received:
  0"
`;

exports[`.toBeCloseTo() accepts an optional precision argument: [0, 0.1, 0] 1`] = `
"expect(received).not.toBeCloseTo(expected, precision)

Expected value not to be close to (with 0-digit precision):
  0.1
Received:
  0"
`;

exports[`.toBeCloseTo() throws: [0, 0.01] 1`] = `
"expect(received).toBeCloseTo(expected)

Expected value to be close to (with 2-digit precision):
  0.01
Received:
  0"
`;

exports[`.toBeCloseTo() throws: [1, 1.23] 1`] = `
"expect(received).toBeCloseTo(expected)

Expected value to be close to (with 2-digit precision):
  1.23
Received:
  1"
`;

exports[`.toBeCloseTo() throws: [1.23, 1.2249999] 1`] = `
"expect(received).toBeCloseTo(expected)

Expected value to be close to (with 2-digit precision):
  1.2249999
Received:
  1.23"
`;

exports[`.toBeDefined(), .toBeUndefined() '"a"' is defined 1`] = `
"expect(received).not.toBeDefined()

Expected value not to be defined, instead received
  \\"a\\""
`;

exports[`.toBeDefined(), .toBeUndefined() '"a"' is defined 2`] = `
"expect(received).toBeUndefined()

Expected value to be undefined, instead received
  \\"a\\""
`;

exports[`.toBeDefined(), .toBeUndefined() '[]' is defined 1`] = `
"expect(received).not.toBeDefined()

Expected value not to be defined, instead received
  []"
`;

exports[`.toBeDefined(), .toBeUndefined() '[]' is defined 2`] = `
"expect(received).toBeUndefined()

Expected value to be undefined, instead received
  []"
`;

exports[`.toBeDefined(), .toBeUndefined() '[Function anonymous]' is defined 1`] = `
"expect(received).not.toBeDefined()

Expected value not to be defined, instead received
  [Function anonymous]"
`;

exports[`.toBeDefined(), .toBeUndefined() '[Function anonymous]' is defined 2`] = `
"expect(received).toBeUndefined()

Expected value to be undefined, instead received
  [Function anonymous]"
`;

exports[`.toBeDefined(), .toBeUndefined() '{}' is defined 1`] = `
"expect(received).not.toBeDefined()

Expected value not to be defined, instead received
  {}"
`;

exports[`.toBeDefined(), .toBeUndefined() '{}' is defined 2`] = `
"expect(received).toBeUndefined()

Expected value to be undefined, instead received
  {}"
`;

exports[`.toBeDefined(), .toBeUndefined() '0.5' is defined 1`] = `
"expect(received).not.toBeDefined()

Expected value not to be defined, instead received
  0.5"
`;

exports[`.toBeDefined(), .toBeUndefined() '0.5' is defined 2`] = `
"expect(received).toBeUndefined()

Expected value to be undefined, instead received
  0.5"
`;

exports[`.toBeDefined(), .toBeUndefined() '1' is defined 1`] = `
"expect(received).not.toBeDefined()

Expected value not to be defined, instead received
  1"
`;

exports[`.toBeDefined(), .toBeUndefined() '1' is defined 2`] = `
"expect(received).toBeUndefined()

Expected value to be undefined, instead received
  1"
`;

exports[`.toBeDefined(), .toBeUndefined() 'Infinity' is defined 1`] = `
"expect(received).not.toBeDefined()

Expected value not to be defined, instead received
  Infinity"
`;

exports[`.toBeDefined(), .toBeUndefined() 'Infinity' is defined 2`] = `
"expect(received).toBeUndefined()

Expected value to be undefined, instead received
  Infinity"
`;

exports[`.toBeDefined(), .toBeUndefined() 'Map {}' is defined 1`] = `
"expect(received).not.toBeDefined()

Expected value not to be defined, instead received
  Map {}"
`;

exports[`.toBeDefined(), .toBeUndefined() 'Map {}' is defined 2`] = `
"expect(received).toBeUndefined()

Expected value to be undefined, instead received
  Map {}"
`;

exports[`.toBeDefined(), .toBeUndefined() 'true' is defined 1`] = `
"expect(received).not.toBeDefined()

Expected value not to be defined, instead received
  true"
`;

exports[`.toBeDefined(), .toBeUndefined() 'true' is defined 2`] = `
"expect(received).toBeUndefined()

Expected value to be undefined, instead received
  true"
`;

exports[`.toBeDefined(), .toBeUndefined() undefined is undefined 1`] = `
"expect(received).toBeDefined()

Expected value to be defined, instead received
  undefined"
`;

exports[`.toBeDefined(), .toBeUndefined() undefined is undefined 2`] = `
"expect(received).not.toBeUndefined()

Expected value not to be undefined, instead received
  undefined"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() equal numbers: [-Infinity, -Infinity] 1`] = `
"expect(received).not.toBeGreaterThanOrEqual(expected)

Expected value not to be greater than or equal:
  -Infinity
Received:
  -Infinity"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() equal numbers: [-Infinity, -Infinity] 2`] = `
"expect(received).not.toBeLessThanOrEqual(expected)

Expected value not to be less than or equal:
  -Infinity
Received:
  -Infinity"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() equal numbers: [1, 1] 1`] = `
"expect(received).not.toBeGreaterThanOrEqual(expected)

Expected value not to be greater than or equal:
  1
Received:
  1"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() equal numbers: [1, 1] 2`] = `
"expect(received).not.toBeLessThanOrEqual(expected)

Expected value not to be less than or equal:
  1
Received:
  1"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() equal numbers: [1.7976931348623157e+308, 1.7976931348623157e+308] 1`] = `
"expect(received).not.toBeGreaterThanOrEqual(expected)

Expected value not to be greater than or equal:
  1.7976931348623157e+308
Received:
  1.7976931348623157e+308"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() equal numbers: [1.7976931348623157e+308, 1.7976931348623157e+308] 2`] = `
"expect(received).not.toBeLessThanOrEqual(expected)

Expected value not to be less than or equal:
  1.7976931348623157e+308
Received:
  1.7976931348623157e+308"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() equal numbers: [5e-324, 5e-324] 1`] = `
"expect(received).not.toBeGreaterThanOrEqual(expected)

Expected value not to be greater than or equal:
  5e-324
Received:
  5e-324"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() equal numbers: [5e-324, 5e-324] 2`] = `
"expect(received).not.toBeLessThanOrEqual(expected)

Expected value not to be less than or equal:
  5e-324
Received:
  5e-324"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() equal numbers: [Infinity, Infinity] 1`] = `
"expect(received).not.toBeGreaterThanOrEqual(expected)

Expected value not to be greater than or equal:
  Infinity
Received:
  Infinity"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() equal numbers: [Infinity, Infinity] 2`] = `
"expect(received).not.toBeLessThanOrEqual(expected)

Expected value not to be less than or equal:
  Infinity
Received:
  Infinity"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [-Infinity, Infinity] 1`] = `
"expect(received).toBeGreaterThan(expected)

Expected value to be greater than:
  Infinity
Received:
  -Infinity"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [-Infinity, Infinity] 2`] = `
"expect(received).not.toBeLessThan(expected)

Expected value not to be less than:
  Infinity
Received:
  -Infinity"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [-Infinity, Infinity] 3`] = `
"expect(received).not.toBeGreaterThan(expected)

Expected value not to be greater than:
  -Infinity
Received:
  Infinity"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [-Infinity, Infinity] 4`] = `
"expect(received).toBeLessThan(expected)

Expected value to be less than:
  -Infinity
Received:
  Infinity"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [-Infinity, Infinity] 5`] = `
"expect(received).toBeGreaterThanOrEqual(expected)

Expected value to be greater than or equal:
  Infinity
Received:
  -Infinity"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [-Infinity, Infinity] 6`] = `
"expect(received).not.toBeLessThanOrEqual(expected)

Expected value not to be less than or equal:
  Infinity
Received:
  -Infinity"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [-Infinity, Infinity] 7`] = `
"expect(received).not.toBeGreaterThanOrEqual(expected)

Expected value not to be greater than or equal:
  -Infinity
Received:
  Infinity"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [-Infinity, Infinity] 8`] = `
"expect(received).toBeLessThanOrEqual(expected)

Expected value to be less than or equal:
  -Infinity
Received:
  Infinity"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [0.1, 0.2] 1`] = `
"expect(received).toBeGreaterThan(expected)

Expected value to be greater than:
  0.2
Received:
  0.1"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [0.1, 0.2] 2`] = `
"expect(received).not.toBeLessThan(expected)

Expected value not to be less than:
  0.2
Received:
  0.1"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [0.1, 0.2] 3`] = `
"expect(received).not.toBeGreaterThan(expected)

Expected value not to be greater than:
  0.1
Received:
  0.2"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [0.1, 0.2] 4`] = `
"expect(received).toBeLessThan(expected)

Expected value to be less than:
  0.1
Received:
  0.2"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [0.1, 0.2] 5`] = `
"expect(received).toBeGreaterThanOrEqual(expected)

Expected value to be greater than or equal:
  0.2
Received:
  0.1"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [0.1, 0.2] 6`] = `
"expect(received).not.toBeLessThanOrEqual(expected)

Expected value not to be less than or equal:
  0.2
Received:
  0.1"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [0.1, 0.2] 7`] = `
"expect(received).not.toBeGreaterThanOrEqual(expected)

Expected value not to be greater than or equal:
  0.1
Received:
  0.2"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [0.1, 0.2] 8`] = `
"expect(received).toBeLessThanOrEqual(expected)

Expected value to be less than or equal:
  0.1
Received:
  0.2"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [1, 2] 1`] = `
"expect(received).toBeGreaterThan(expected)

Expected value to be greater than:
  2
Received:
  1"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [1, 2] 2`] = `
"expect(received).not.toBeLessThan(expected)

Expected value not to be less than:
  2
Received:
  1"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [1, 2] 3`] = `
"expect(received).not.toBeGreaterThan(expected)

Expected value not to be greater than:
  1
Received:
  2"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [1, 2] 4`] = `
"expect(received).toBeLessThan(expected)

Expected value to be less than:
  1
Received:
  2"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [1, 2] 5`] = `
"expect(received).toBeGreaterThanOrEqual(expected)

Expected value to be greater than or equal:
  2
Received:
  1"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [1, 2] 6`] = `
"expect(received).not.toBeLessThanOrEqual(expected)

Expected value not to be less than or equal:
  2
Received:
  1"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [1, 2] 7`] = `
"expect(received).not.toBeGreaterThanOrEqual(expected)

Expected value not to be greater than or equal:
  1
Received:
  2"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [1, 2] 8`] = `
"expect(received).toBeLessThanOrEqual(expected)

Expected value to be less than or equal:
  1
Received:
  2"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [3, 7] 1`] = `
"expect(received).toBeGreaterThan(expected)

Expected value to be greater than:
  7
Received:
  3"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [3, 7] 2`] = `
"expect(received).not.toBeLessThan(expected)

Expected value not to be less than:
  7
Received:
  3"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [3, 7] 3`] = `
"expect(received).not.toBeGreaterThan(expected)

Expected value not to be greater than:
  3
Received:
  7"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [3, 7] 4`] = `
"expect(received).toBeLessThan(expected)

Expected value to be less than:
  3
Received:
  7"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [3, 7] 5`] = `
"expect(received).toBeGreaterThanOrEqual(expected)

Expected value to be greater than or equal:
  7
Received:
  3"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [3, 7] 6`] = `
"expect(received).not.toBeLessThanOrEqual(expected)

Expected value not to be less than or equal:
  7
Received:
  3"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [3, 7] 7`] = `
"expect(received).not.toBeGreaterThanOrEqual(expected)

Expected value not to be greater than or equal:
  3
Received:
  7"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [3, 7] 8`] = `
"expect(received).toBeLessThanOrEqual(expected)

Expected value to be less than or equal:
  3
Received:
  7"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [5e-324, 1.7976931348623157e+308] 1`] = `
"expect(received).toBeGreaterThan(expected)

Expected value to be greater than:
  1.7976931348623157e+308
Received:
  5e-324"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [5e-324, 1.7976931348623157e+308] 2`] = `
"expect(received).not.toBeLessThan(expected)

Expected value not to be less than:
  1.7976931348623157e+308
Received:
  5e-324"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [5e-324, 1.7976931348623157e+308] 3`] = `
"expect(received).not.toBeGreaterThan(expected)

Expected value not to be greater than:
  5e-324
Received:
  1.7976931348623157e+308"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [5e-324, 1.7976931348623157e+308] 4`] = `
"expect(received).toBeLessThan(expected)

Expected value to be less than:
  5e-324
Received:
  1.7976931348623157e+308"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [5e-324, 1.7976931348623157e+308] 5`] = `
"expect(received).toBeGreaterThanOrEqual(expected)

Expected value to be greater than or equal:
  1.7976931348623157e+308
Received:
  5e-324"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [5e-324, 1.7976931348623157e+308] 6`] = `
"expect(received).not.toBeLessThanOrEqual(expected)

Expected value not to be less than or equal:
  1.7976931348623157e+308
Received:
  5e-324"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [5e-324, 1.7976931348623157e+308] 7`] = `
"expect(received).not.toBeGreaterThanOrEqual(expected)

Expected value not to be greater than or equal:
  5e-324
Received:
  1.7976931348623157e+308"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [5e-324, 1.7976931348623157e+308] 8`] = `
"expect(received).toBeLessThanOrEqual(expected)

Expected value to be less than or equal:
  5e-324
Received:
  1.7976931348623157e+308"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [9, 18] 1`] = `
"expect(received).toBeGreaterThan(expected)

Expected value to be greater than:
  18
Received:
  9"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [9, 18] 2`] = `
"expect(received).not.toBeLessThan(expected)

Expected value not to be less than:
  18
Received:
  9"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [9, 18] 3`] = `
"expect(received).not.toBeGreaterThan(expected)

Expected value not to be greater than:
  9
Received:
  18"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [9, 18] 4`] = `
"expect(received).toBeLessThan(expected)

Expected value to be less than:
  9
Received:
  18"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [9, 18] 5`] = `
"expect(received).toBeGreaterThanOrEqual(expected)

Expected value to be greater than or equal:
  18
Received:
  9"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [9, 18] 6`] = `
"expect(received).not.toBeLessThanOrEqual(expected)

Expected value not to be less than or equal:
  18
Received:
  9"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [9, 18] 7`] = `
"expect(received).not.toBeGreaterThanOrEqual(expected)

Expected value not to be greater than or equal:
  9
Received:
  18"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [9, 18] 8`] = `
"expect(received).toBeLessThanOrEqual(expected)

Expected value to be less than or equal:
  9
Received:
  18"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [17, 34] 1`] = `
"expect(received).toBeGreaterThan(expected)

Expected value to be greater than:
  34
Received:
  17"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [17, 34] 2`] = `
"expect(received).not.toBeLessThan(expected)

Expected value not to be less than:
  34
Received:
  17"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [17, 34] 3`] = `
"expect(received).not.toBeGreaterThan(expected)

Expected value not to be greater than:
  17
Received:
  34"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [17, 34] 4`] = `
"expect(received).toBeLessThan(expected)

Expected value to be less than:
  17
Received:
  34"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [17, 34] 5`] = `
"expect(received).toBeGreaterThanOrEqual(expected)

Expected value to be greater than or equal:
  34
Received:
  17"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [17, 34] 6`] = `
"expect(received).not.toBeLessThanOrEqual(expected)

Expected value not to be less than or equal:
  34
Received:
  17"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [17, 34] 7`] = `
"expect(received).not.toBeGreaterThanOrEqual(expected)

Expected value not to be greater than or equal:
  17
Received:
  34"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [17, 34] 8`] = `
"expect(received).toBeLessThanOrEqual(expected)

Expected value to be less than or equal:
  17
Received:
  34"
`;

exports[`.toBeInstanceOf() failing "a" and [Function String] 1`] = `
"expect(value).toBeInstanceOf(constructor)

Expected value to be an instance of:
  \\"String\\"
Received:
  \\"a\\"
Constructor:
  \\"String\\""
`;

exports[`.toBeInstanceOf() failing {} and [Function A] 1`] = `
"expect(value).toBeInstanceOf(constructor)

Expected value to be an instance of:
  \\"A\\"
Received:
  {}
Constructor:
  undefined"
`;

exports[`.toBeInstanceOf() failing {} and [Function B] 1`] = `
"expect(value).toBeInstanceOf(constructor)

Expected value to be an instance of:
  \\"B\\"
Received:
  {}
Constructor:
  \\"A\\""
`;

exports[`.toBeInstanceOf() failing 1 and [Function Number] 1`] = `
"expect(value).toBeInstanceOf(constructor)

Expected value to be an instance of:
  \\"Number\\"
Received:
  1
Constructor:
  \\"Number\\""
`;

exports[`.toBeInstanceOf() failing true and [Function Boolean] 1`] = `
"expect(value).toBeInstanceOf(constructor)

Expected value to be an instance of:
  \\"Boolean\\"
Received:
  true
Constructor:
  \\"Boolean\\""
`;

exports[`.toBeInstanceOf() passing [] and [Function Array] 1`] = `
"expect(value).not.toBeInstanceOf(constructor)

Expected value not to be an instance of:
  \\"Array\\"
Received:
  []
"
`;

exports[`.toBeInstanceOf() passing {} and [Function A] 1`] = `
"expect(value).not.toBeInstanceOf(constructor)

Expected value not to be an instance of:
  \\"A\\"
Received:
  {}
"
`;

exports[`.toBeInstanceOf() passing Map {} and [Function Map] 1`] = `
"expect(value).not.toBeInstanceOf(constructor)

Expected value not to be an instance of:
  \\"Map\\"
Received:
  Map {}
"
`;

exports[`.toBeInstanceOf() throws if constructor is not a function 1`] = `
"expect(value)[.not].toBeInstanceOf(constructor)

Expected constructor to be a function. Instead got:
  \\"number\\""
`;

exports[`.toBeNaN() {pass: true} expect(NaN).toBeNaN() 1`] = `
"expect(received).not.toBeNaN()

Expected value not to be NaN, instead received
  NaN"
`;

exports[`.toBeNaN() {pass: true} expect(NaN).toBeNaN() 2`] = `
"expect(received).not.toBeNaN()

Expected value not to be NaN, instead received
  NaN"
`;

exports[`.toBeNaN() {pass: true} expect(NaN).toBeNaN() 3`] = `
"expect(received).not.toBeNaN()

Expected value not to be NaN, instead received
  NaN"
`;

exports[`.toBeNaN() {pass: true} expect(NaN).toBeNaN() 4`] = `
"expect(received).not.toBeNaN()

Expected value not to be NaN, instead received
  NaN"
`;

exports[`.toBeNaN() throws 1`] = `
"expect(received).toBeNaN()

Expected value to be NaN, instead received
  1"
`;

exports[`.toBeNaN() throws 2`] = `
"expect(received).toBeNaN()

Expected value to be NaN, instead received
  \\"\\""
`;

exports[`.toBeNaN() throws 3`] = `
"expect(received).toBeNaN()

Expected value to be NaN, instead received
  null"
`;

exports[`.toBeNaN() throws 4`] = `
"expect(received).toBeNaN()

Expected value to be NaN, instead received
  undefined"
`;

exports[`.toBeNaN() throws 5`] = `
"expect(received).toBeNaN()

Expected value to be NaN, instead received
  {}"
`;

exports[`.toBeNaN() throws 6`] = `
"expect(received).toBeNaN()

Expected value to be NaN, instead received
  []"
`;

exports[`.toBeNaN() throws 7`] = `
"expect(received).toBeNaN()

Expected value to be NaN, instead received
  0.2"
`;

exports[`.toBeNaN() throws 8`] = `
"expect(received).toBeNaN()

Expected value to be NaN, instead received
  0"
`;

exports[`.toBeNaN() throws 9`] = `
"expect(received).toBeNaN()

Expected value to be NaN, instead received
  Infinity"
`;

exports[`.toBeNaN() throws 10`] = `
"expect(received).toBeNaN()

Expected value to be NaN, instead received
  -Infinity"
`;

exports[`.toBeNull() fails for '"a"' with .not 1`] = `
"expect(received).toBeNull()

Expected value to be null, instead received
  \\"a\\""
`;

exports[`.toBeNull() fails for '[]' with .not 1`] = `
"expect(received).toBeNull()

Expected value to be null, instead received
  []"
`;

exports[`.toBeNull() fails for '[Function anonymous]' with .not 1`] = `
"expect(received).toBeNull()

Expected value to be null, instead received
  [Function anonymous]"
`;

exports[`.toBeNull() fails for '{}' with .not 1`] = `
"expect(received).toBeNull()

Expected value to be null, instead received
  {}"
`;

exports[`.toBeNull() fails for '0.5' with .not 1`] = `
"expect(received).toBeNull()

Expected value to be null, instead received
  0.5"
`;

exports[`.toBeNull() fails for '1' with .not 1`] = `
"expect(received).toBeNull()

Expected value to be null, instead received
  1"
`;

exports[`.toBeNull() fails for 'Infinity' with .not 1`] = `
"expect(received).toBeNull()

Expected value to be null, instead received
  Infinity"
`;

exports[`.toBeNull() fails for 'Map {}' with .not 1`] = `
"expect(received).toBeNull()

Expected value to be null, instead received
  Map {}"
`;

exports[`.toBeNull() fails for 'true' with .not 1`] = `
"expect(received).toBeNull()

Expected value to be null, instead received
  true"
`;

exports[`.toBeNull() pass for null 1`] = `
"expect(received).not.toBeNull()

Expected value not to be null, instead received
  null"
`;

exports[`.toBeTruthy(), .toBeFalsy() '""' is falsy 1`] = `
"expect(received).toBeTruthy()

Expected value to be truthy, instead received
  \\"\\""
`;

exports[`.toBeTruthy(), .toBeFalsy() '""' is falsy 2`] = `
"expect(received).not.toBeFalsy()

Expected value not to be falsy, instead received
  \\"\\""
`;

exports[`.toBeTruthy(), .toBeFalsy() '"a"' is truthy 1`] = `
"expect(received).not.toBeTruthy()

Expected value not to be truthy, instead received
  \\"a\\""
`;

exports[`.toBeTruthy(), .toBeFalsy() '"a"' is truthy 2`] = `
"expect(received).toBeFalsy()

Expected value to be falsy, instead received
  \\"a\\""
`;

exports[`.toBeTruthy(), .toBeFalsy() '[]' is truthy 1`] = `
"expect(received).not.toBeTruthy()

Expected value not to be truthy, instead received
  []"
`;

exports[`.toBeTruthy(), .toBeFalsy() '[]' is truthy 2`] = `
"expect(received).toBeFalsy()

Expected value to be falsy, instead received
  []"
`;

exports[`.toBeTruthy(), .toBeFalsy() '[Function anonymous]' is truthy 1`] = `
"expect(received).not.toBeTruthy()

Expected value not to be truthy, instead received
  [Function anonymous]"
`;

exports[`.toBeTruthy(), .toBeFalsy() '[Function anonymous]' is truthy 2`] = `
"expect(received).toBeFalsy()

Expected value to be falsy, instead received
  [Function anonymous]"
`;

exports[`.toBeTruthy(), .toBeFalsy() '{}' is truthy 1`] = `
"expect(received).not.toBeTruthy()

Expected value not to be truthy, instead received
  {}"
`;

exports[`.toBeTruthy(), .toBeFalsy() '{}' is truthy 2`] = `
"expect(received).toBeFalsy()

Expected value to be falsy, instead received
  {}"
`;

exports[`.toBeTruthy(), .toBeFalsy() '0' is falsy 1`] = `
"expect(received).toBeTruthy()

Expected value to be truthy, instead received
  0"
`;

exports[`.toBeTruthy(), .toBeFalsy() '0' is falsy 2`] = `
"expect(received).not.toBeFalsy()

Expected value not to be falsy, instead received
  0"
`;

exports[`.toBeTruthy(), .toBeFalsy() '0.5' is truthy 1`] = `
"expect(received).not.toBeTruthy()

Expected value not to be truthy, instead received
  0.5"
`;

exports[`.toBeTruthy(), .toBeFalsy() '0.5' is truthy 2`] = `
"expect(received).toBeFalsy()

Expected value to be falsy, instead received
  0.5"
`;

exports[`.toBeTruthy(), .toBeFalsy() '1' is truthy 1`] = `
"expect(received).not.toBeTruthy()

Expected value not to be truthy, instead received
  1"
`;

exports[`.toBeTruthy(), .toBeFalsy() '1' is truthy 2`] = `
"expect(received).toBeFalsy()

Expected value to be falsy, instead received
  1"
`;

exports[`.toBeTruthy(), .toBeFalsy() 'Infinity' is truthy 1`] = `
"expect(received).not.toBeTruthy()

Expected value not to be truthy, instead received
  Infinity"
`;

exports[`.toBeTruthy(), .toBeFalsy() 'Infinity' is truthy 2`] = `
"expect(received).toBeFalsy()

Expected value to be falsy, instead received
  Infinity"
`;

exports[`.toBeTruthy(), .toBeFalsy() 'Map {}' is truthy 1`] = `
"expect(received).not.toBeTruthy()

Expected value not to be truthy, instead received
  Map {}"
`;

exports[`.toBeTruthy(), .toBeFalsy() 'Map {}' is truthy 2`] = `
"expect(received).toBeFalsy()

Expected value to be falsy, instead received
  Map {}"
`;

exports[`.toBeTruthy(), .toBeFalsy() 'NaN' is falsy 1`] = `
"expect(received).toBeTruthy()

Expected value to be truthy, instead received
  NaN"
`;

exports[`.toBeTruthy(), .toBeFalsy() 'NaN' is falsy 2`] = `
"expect(received).not.toBeFalsy()

Expected value not to be falsy, instead received
  NaN"
`;

exports[`.toBeTruthy(), .toBeFalsy() 'false' is falsy 1`] = `
"expect(received).toBeTruthy()

Expected value to be truthy, instead received
  false"
`;

exports[`.toBeTruthy(), .toBeFalsy() 'false' is falsy 2`] = `
"expect(received).not.toBeFalsy()

Expected value not to be falsy, instead received
  false"
`;

exports[`.toBeTruthy(), .toBeFalsy() 'null' is falsy 1`] = `
"expect(received).toBeTruthy()

Expected value to be truthy, instead received
  null"
`;

exports[`.toBeTruthy(), .toBeFalsy() 'null' is falsy 2`] = `
"expect(received).not.toBeFalsy()

Expected value not to be falsy, instead received
  null"
`;

exports[`.toBeTruthy(), .toBeFalsy() 'true' is truthy 1`] = `
"expect(received).not.toBeTruthy()

Expected value not to be truthy, instead received
  true"
`;

exports[`.toBeTruthy(), .toBeFalsy() 'true' is truthy 2`] = `
"expect(received).toBeFalsy()

Expected value to be falsy, instead received
  true"
`;

exports[`.toBeTruthy(), .toBeFalsy() 'undefined' is falsy 1`] = `
"expect(received).toBeTruthy()

Expected value to be truthy, instead received
  undefined"
`;

exports[`.toBeTruthy(), .toBeFalsy() 'undefined' is falsy 2`] = `
"expect(received).not.toBeFalsy()

Expected value not to be falsy, instead received
  undefined"
`;

exports[`.toBeTruthy(), .toBeFalsy() does not accept arguments 1`] = `
"expect(received)[.not].toBeTruthy()

Matcher does not accept any arguments.
Got: null"
`;

exports[`.toBeTruthy(), .toBeFalsy() does not accept arguments 2`] = `
"expect(received)[.not].toBeFalsy()

Matcher does not accept any arguments.
Got: null"
`;

exports[`.toContain(), .toContainEqual() '"11112111"' contains '"2"' 1`] = `
"expect(string).not.toContain(value)

Expected string:
  \\"11112111\\"
Not to contain value:
  \\"2\\"
"
`;

exports[`.toContain(), .toContainEqual() '"abcdef"' contains '"abc"' 1`] = `
"expect(string).not.toContain(value)

Expected string:
  \\"abcdef\\"
Not to contain value:
  \\"abc\\"
"
`;

exports[`.toContain(), .toContainEqual() '["a", "b", "c", "d"]' contains '"a"' 1`] = `
"expect(array).not.toContain(value)

Expected array:
  [\\"a\\", \\"b\\", \\"c\\", \\"d\\"]
Not to contain value:
  \\"a\\"
"
`;

exports[`.toContain(), .toContainEqual() '["a", "b", "c", "d"]' contains a value equal to '"a"' 1`] = `
"expect(array).not.toContainEqual(value)

Expected array:
  [\\"a\\", \\"b\\", \\"c\\", \\"d\\"]
Not to contain a value equal to:
  \\"a\\"
"
`;

exports[`.toContain(), .toContainEqual() '[{"a": "b"}, {"a": "c"}]' contains a value equal to '{"a": "b"}' 1`] = `
"expect(array).not.toContainEqual(value)

Expected array:
  [{\\"a\\": \\"b\\"}, {\\"a\\": \\"c\\"}]
Not to contain a value equal to:
  {\\"a\\": \\"b\\"}
"
`;

exports[`.toContain(), .toContainEqual() '[{"a": "b"}, {"a": "c"}]' does not contain a value equal to'{"a": "d"}' 1`] = `
"expect(array).toContainEqual(value)

Expected array:
  [{\\"a\\": \\"b\\"}, {\\"a\\": \\"c\\"}]
To contain a value equal to:
  {\\"a\\": \\"d\\"}"
`;

exports[`.toContain(), .toContainEqual() '[{}, []]' does not contain '[]' 1`] = `
"expect(array).toContain(value)

Expected array:
  [{}, []]
To contain value:
  []"
`;

exports[`.toContain(), .toContainEqual() '[{}, []]' does not contain '{}' 1`] = `
"expect(array).toContain(value)

Expected array:
  [{}, []]
To contain value:
  {}"
`;

exports[`.toContain(), .toContainEqual() '[0, 1]' contains '1' 1`] = `
"expect(object).not.toContain(value)

Expected object:
  [0, 1]
Not to contain value:
  1
"
`;

exports[`.toContain(), .toContainEqual() '[0, 1]' contains a value equal to '1' 1`] = `
"expect(object).not.toContainEqual(value)

Expected object:
  [0, 1]
Not to contain a value equal to:
  1
"
`;

exports[`.toContain(), .toContainEqual() '[1, 2, 3, 4]' contains '1' 1`] = `
"expect(array).not.toContain(value)

Expected array:
  [1, 2, 3, 4]
Not to contain value:
  1
"
`;

exports[`.toContain(), .toContainEqual() '[1, 2, 3, 4]' contains a value equal to '1' 1`] = `
"expect(array).not.toContainEqual(value)

Expected array:
  [1, 2, 3, 4]
Not to contain a value equal to:
  1
"
`;

exports[`.toContain(), .toContainEqual() '[1, 2, 3]' does not contain '4' 1`] = `
"expect(array).toContain(value)

Expected array:
  [1, 2, 3]
To contain value:
  4"
`;

exports[`.toContain(), .toContainEqual() '[Symbol(a)]' contains 'Symbol(a)' 1`] = `
"expect(array).not.toContain(value)

Expected array:
  [Symbol(a)]
Not to contain value:
  Symbol(a)
"
`;

exports[`.toContain(), .toContainEqual() '[Symbol(a)]' contains a value equal to 'Symbol(a)' 1`] = `
"expect(array).not.toContainEqual(value)

Expected array:
  [Symbol(a)]
Not to contain a value equal to:
  Symbol(a)
"
`;

exports[`.toContain(), .toContainEqual() '[null, undefined]' does not contain '1' 1`] = `
"expect(array).toContain(value)

Expected array:
  [null, undefined]
To contain value:
  1"
`;

exports[`.toContain(), .toContainEqual() '[undefined, null]' contains 'null' 1`] = `
"expect(array).not.toContain(value)

Expected array:
  [undefined, null]
Not to contain value:
  null
"
`;

exports[`.toContain(), .toContainEqual() '[undefined, null]' contains 'undefined' 1`] = `
"expect(array).not.toContain(value)

Expected array:
  [undefined, null]
Not to contain value:
  undefined
"
`;

exports[`.toContain(), .toContainEqual() '[undefined, null]' contains a value equal to 'null' 1`] = `
"expect(array).not.toContainEqual(value)

Expected array:
  [undefined, null]
Not to contain a value equal to:
  null
"
`;

exports[`.toContain(), .toContainEqual() '[undefined, null]' contains a value equal to 'undefined' 1`] = `
"expect(array).not.toContainEqual(value)

Expected array:
  [undefined, null]
Not to contain a value equal to:
  undefined
"
`;

exports[`.toContain(), .toContainEqual() 'Set {"abc", "def"}' contains '"abc"' 1`] = `
"expect(set).not.toContain(value)

Expected set:
  Set {\\"abc\\", \\"def\\"}
Not to contain value:
  \\"abc\\"
"
`;

exports[`.toContain(), .toContainEqual() 'Set {1, 2, 3, 4}' contains a value equal to '1' 1`] = `
"expect(set).not.toContainEqual(value)

Expected set:
  Set {1, 2, 3, 4}
Not to contain a value equal to:
  1
"
`;

exports[`.toContain(), .toContainEqual() error cases 1`] = `
"expect(collection)[.not].toContainEqual(value)

Expected collection to be an array-like structure.
Received: null"
`;

exports[`.toContain(), .toContainEqual() error cases for toContainEqual 1`] = `
"expect(collection)[.not].toContainEqual(value)

Expected collection to be an array-like structure.
Received: null"
`;

exports[`.toEqual() {pass: false} expect("Alice").not.toEqual({"asymmetricMatch": [Function asymmetricMatch]}) 1`] = `
"expect(received).not.toEqual(expected)

Expected value to not equal:
  {\\"asymmetricMatch\\": [Function asymmetricMatch]}
Received:
  \\"Alice\\""
`;

exports[`.toEqual() {pass: false} expect("Eve").toEqual({"asymmetricMatch": [Function asymmetricMatch]}) 1`] = `
"expect(received).toEqual(expected)

Expected value to equal:
  {\\"asymmetricMatch\\": [Function asymmetricMatch]}
Received:
  \\"Eve\\""
`;

exports[`.toEqual() {pass: false} expect("abc").not.toEqual("abc") 1`] = `
"expect(received).not.toEqual(expected)

Expected value to not equal:
  \\"abc\\"
Received:
  \\"abc\\""
`;

exports[`.toEqual() {pass: false} expect("abcd").not.toEqual(StringContaining "bc") 1`] = `
"expect(received).not.toEqual(expected)

Expected value to not equal:
  StringContaining \\"bc\\"
Received:
  \\"abcd\\""
`;

exports[`.toEqual() {pass: false} expect("abcd").not.toEqual(StringMatching /bc/) 1`] = `
"expect(received).not.toEqual(expected)

Expected value to not equal:
  StringMatching /bc/
Received:
  \\"abcd\\""
`;

exports[`.toEqual() {pass: false} expect("abd").toEqual(StringContaining "bc") 1`] = `
"expect(received).toEqual(expected)

Expected value to equal:
  StringContaining \\"bc\\"
Received:
  \\"abd\\""
`;

exports[`.toEqual() {pass: false} expect("abd").toEqual(StringMatching /bc/i) 1`] = `
"expect(received).toEqual(expected)

Expected value to equal:
  StringMatching /bc/i
Received:
  \\"abd\\""
`;

exports[`.toEqual() {pass: false} expect("banana").toEqual("apple") 1`] = `
"expect(received).toEqual(expected)

Expected value to equal:
  \\"apple\\"
Received:
  \\"banana\\""
`;

exports[`.toEqual() {pass: false} expect([1, 2, 3]).not.toEqual(ArrayContaining [2, 3]) 1`] = `
"expect(received).not.toEqual(expected)

Expected value to not equal:
  ArrayContaining [2, 3]
Received:
  [1, 2, 3]"
`;

exports[`.toEqual() {pass: false} expect([1, 2]).not.toEqual([1, 2]) 1`] = `
"expect(received).not.toEqual(expected)

Expected value to not equal:
  [1, 2]
Received:
  [1, 2]"
`;

exports[`.toEqual() {pass: false} expect([1, 2]).toEqual([2, 1]) 1`] = `
"expect(received).toEqual(expected)

Expected value to equal:
  [2, 1]
Received:
  [1, 2]

Difference:

- Expected
+ Received

  Array [
+   1,
    2,
-   1,
  ]"
`;

exports[`.toEqual() {pass: false} expect([1, 3]).toEqual(ArrayContaining [1, 2]) 1`] = `
"expect(received).toEqual(expected)

Expected value to equal:
  ArrayContaining [1, 2]
Received:
  [1, 3]

Difference:

- Expected
+ Received

- ArrayContaining [
+ Array [
    1,
-   2,
+   3,
  ]"
`;

exports[`.toEqual() {pass: false} expect([1]).not.toEqual([1]) 1`] = `
"expect(received).not.toEqual(expected)

Expected value to not equal:
  [1]
Received:
  [1]"
`;

exports[`.toEqual() {pass: false} expect([1]).toEqual([2]) 1`] = `
"expect(received).toEqual(expected)

Expected value to equal:
  [2]
Received:
  [1]

Difference:

- Expected
+ Received

  Array [
-   2,
+   1,
  ]"
`;

exports[`.toEqual() {pass: false} expect([Function anonymous]).not.toEqual(Any<Function>) 1`] = `
"expect(received).not.toEqual(expected)

Expected value to not equal:
  Any<Function>
Received:
  [Function anonymous]"
`;

exports[`.toEqual() {pass: false} expect({"a": 1, "b": [Function b], "c": true}).not.toEqual({"a": 1, "b": Any<Function>, "c": Anything}) 1`] = `
"expect(received).not.toEqual(expected)

Expected value to not equal:
  {\\"a\\": 1, \\"b\\": Any<Function>, \\"c\\": Anything}
Received:
  {\\"a\\": 1, \\"b\\": [Function b], \\"c\\": true}"
`;

exports[`.toEqual() {pass: false} expect({"a": 1, "b": 2}).not.toEqual(ObjectContaining {"a": 1}) 1`] = `
"expect(received).not.toEqual(expected)

Expected value to not equal:
  ObjectContaining {\\"a\\": 1}
Received:
  {\\"a\\": 1, \\"b\\": 2}"
`;

exports[`.toEqual() {pass: false} expect({"a": 1, "b": 2}).toEqual(ObjectContaining {"a": 2}) 1`] = `
"expect(received).toEqual(expected)

Expected value to equal:
  ObjectContaining {\\"a\\": 2}
Received:
  {\\"a\\": 1, \\"b\\": 2}

Difference:

- Expected
+ Received

- ObjectContaining {
-   \\"a\\": 2,
+ Object {
+   \\"a\\": 1,
+   \\"b\\": 2,
  }"
`;

exports[`.toEqual() {pass: false} expect({"a": 5}).toEqual({"b": 6}) 1`] = `
"expect(received).toEqual(expected)

Expected value to equal:
  {\\"b\\": 6}
Received:
  {\\"a\\": 5}

Difference:

- Expected
+ Received

  Object {
-   \\"b\\": 6,
+   \\"a\\": 5,
  }"
`;

exports[`.toEqual() {pass: false} expect({"a": 99}).not.toEqual({"a": 99}) 1`] = `
"expect(received).not.toEqual(expected)

Expected value to not equal:
  {\\"a\\": 99}
Received:
  {\\"a\\": 99}"
`;

exports[`.toEqual() {pass: false} expect({}).not.toEqual({}) 1`] = `
"expect(received).not.toEqual(expected)

Expected value to not equal:
  {}
Received:
  {}"
`;

exports[`.toEqual() {pass: false} expect(0).toEqual(-0) 1`] = `
"expect(received).toEqual(expected)

Expected value to equal:
  -0
Received:
  0

Difference:

Compared values have no visual difference."
`;

exports[`.toEqual() {pass: false} expect(1).not.toEqual(1) 1`] = `
"expect(received).not.toEqual(expected)

Expected value to not equal:
  1
Received:
  1"
`;

exports[`.toEqual() {pass: false} expect(1).toEqual(2) 1`] = `
"expect(received).toEqual(expected)

Expected value to equal:
  2
Received:
  1"
`;

exports[`.toEqual() {pass: false} expect(1).toEqual(ArrayContaining [1, 2]) 1`] = `
"expect(received).toEqual(expected)

Expected value to equal:
  ArrayContaining [1, 2]
Received:
  1

Difference:

  Comparing two different types of values. Expected array but received number."
`;

exports[`.toEqual() {pass: false} expect(Immutable.List [1, 2]).not.toEqual(Immutable.List [1, 2]) 1`] = `
"expect(received).not.toEqual(expected)

Expected value to not equal:
  Immutable.List [1, 2]
Received:
  Immutable.List [1, 2]"
`;

exports[`.toEqual() {pass: false} expect(Immutable.List [1, 2]).toEqual(Immutable.List [2, 1]) 1`] = `
"expect(received).toEqual(expected)

Expected value to equal:
  Immutable.List [2, 1]
Received:
  Immutable.List [1, 2]

Difference:

- Expected
+ Received

  Immutable.List [
+   1,
    2,
-   1,
  ]"
`;

exports[`.toEqual() {pass: false} expect(Immutable.List [1]).not.toEqual(Immutable.List [1]) 1`] = `
"expect(received).not.toEqual(expected)

Expected value to not equal:
  Immutable.List [1]
Received:
  Immutable.List [1]"
`;

exports[`.toEqual() {pass: false} expect(Immutable.List [1]).toEqual(Immutable.List [2]) 1`] = `
"expect(received).toEqual(expected)

Expected value to equal:
  Immutable.List [2]
Received:
  Immutable.List [1]

Difference:

- Expected
+ Received

  Immutable.List [
-   2,
+   1,
  ]"
`;

exports[`.toEqual() {pass: false} expect(Immutable.Map {"1": Immutable.Map {"2": {"a": 99}}}).not.toEqual(Immutable.Map {"1": Immutable.Map {"2": {"a": 99}}}) 1`] = `
"expect(received).not.toEqual(expected)

Expected value to not equal:
  Immutable.Map {\\"1\\": Immutable.Map {\\"2\\": {\\"a\\": 99}}}
Received:
  Immutable.Map {\\"1\\": Immutable.Map {\\"2\\": {\\"a\\": 99}}}"
`;

exports[`.toEqual() {pass: false} expect(Immutable.Map {"1": Immutable.Map {"2": {"a": 99}}}).toEqual(Immutable.Map {"1": Immutable.Map {"2": {"a": 11}}}) 1`] = `
"expect(received).toEqual(expected)

Expected value to equal:
  Immutable.Map {\\"1\\": Immutable.Map {\\"2\\": {\\"a\\": 11}}}
Received:
  Immutable.Map {\\"1\\": Immutable.Map {\\"2\\": {\\"a\\": 99}}}

Difference:

- Expected
+ Received

  Immutable.Map {
    \\"1\\": Immutable.Map {
      \\"2\\": Object {
-       \\"a\\": 11,
+       \\"a\\": 99,
      },
    },
  }"
`;

exports[`.toEqual() {pass: false} expect(Immutable.Map {"a": 0}).toEqual(Immutable.Map {"b": 0}) 1`] = `
"expect(received).toEqual(expected)

Expected value to equal:
  Immutable.Map {\\"b\\": 0}
Received:
  Immutable.Map {\\"a\\": 0}

Difference:

- Expected
+ Received

  Immutable.Map {
-   \\"b\\": 0,
+   \\"a\\": 0,
  }"
`;

exports[`.toEqual() {pass: false} expect(Immutable.Map {"v": 1}).toEqual(Immutable.Map {"v": 2}) 1`] = `
"expect(received).toEqual(expected)

Expected value to equal:
  Immutable.Map {\\"v\\": 2}
Received:
  Immutable.Map {\\"v\\": 1}

Difference:

- Expected
+ Received

  Immutable.Map {
-   \\"v\\": 2,
+   \\"v\\": 1,
  }"
`;

exports[`.toEqual() {pass: false} expect(Immutable.Map {}).not.toEqual(Immutable.Map {}) 1`] = `
"expect(received).not.toEqual(expected)

Expected value to not equal:
  Immutable.Map {}
Received:
  Immutable.Map {}"
`;

exports[`.toEqual() {pass: false} expect(Immutable.Map {1: "one", 2: "two"}).not.toEqual(Immutable.Map {1: "one", 2: "two"}) 1`] = `
"expect(received).not.toEqual(expected)

Expected value to not equal:
  Immutable.Map {1: \\"one\\", 2: \\"two\\"}
Received:
  Immutable.Map {1: \\"one\\", 2: \\"two\\"}"
`;

exports[`.toEqual() {pass: false} expect(Immutable.Map {1: "one", 2: "two"}).not.toEqual(Immutable.Map {2: "two", 1: "one"}) 1`] = `
"expect(received).not.toEqual(expected)

Expected value to not equal:
  Immutable.Map {2: \\"two\\", 1: \\"one\\"}
Received:
  Immutable.Map {1: \\"one\\", 2: \\"two\\"}"
`;

exports[`.toEqual() {pass: false} expect(Immutable.OrderedMap {1: "one", 2: "two"}).not.toEqual(Immutable.OrderedMap {1: "one", 2: "two"}) 1`] = `
"expect(received).not.toEqual(expected)

Expected value to not equal:
  Immutable.OrderedMap {1: \\"one\\", 2: \\"two\\"}
Received:
  Immutable.OrderedMap {1: \\"one\\", 2: \\"two\\"}"
`;

exports[`.toEqual() {pass: false} expect(Immutable.OrderedMap {1: "one", 2: "two"}).toEqual(Immutable.OrderedMap {2: "two", 1: "one"}) 1`] = `
"expect(received).toEqual(expected)

Expected value to equal:
  Immutable.OrderedMap {2: \\"two\\", 1: \\"one\\"}
Received:
  Immutable.OrderedMap {1: \\"one\\", 2: \\"two\\"}

Difference:

- Expected
+ Received

  Immutable.OrderedMap {
+   1: \\"one\\",
    2: \\"two\\",
-   1: \\"one\\",
  }"
`;

exports[`.toEqual() {pass: false} expect(Immutable.OrderedSet []).not.toEqual(Immutable.OrderedSet []) 1`] = `
"expect(received).not.toEqual(expected)

Expected value to not equal:
  Immutable.OrderedSet []
Received:
  Immutable.OrderedSet []"
`;

exports[`.toEqual() {pass: false} expect(Immutable.OrderedSet [1, 2]).not.toEqual(Immutable.OrderedSet [1, 2]) 1`] = `
"expect(received).not.toEqual(expected)

Expected value to not equal:
  Immutable.OrderedSet [1, 2]
Received:
  Immutable.OrderedSet [1, 2]"
`;

exports[`.toEqual() {pass: false} expect(Immutable.OrderedSet [1, 2]).toEqual(Immutable.OrderedSet [2, 1]) 1`] = `
"expect(received).toEqual(expected)

Expected value to equal:
  Immutable.OrderedSet [2, 1]
Received:
  Immutable.OrderedSet [1, 2]

Difference:

- Expected
+ Received

  Immutable.OrderedSet [
+   1,
    2,
-   1,
  ]"
`;

exports[`.toEqual() {pass: false} expect(Immutable.Set []).not.toEqual(Immutable.Set []) 1`] = `
"expect(received).not.toEqual(expected)

Expected value to not equal:
  Immutable.Set []
Received:
  Immutable.Set []"
`;

exports[`.toEqual() {pass: false} expect(Immutable.Set [1, 2]).not.toEqual(Immutable.Set [1, 2]) 1`] = `
"expect(received).not.toEqual(expected)

Expected value to not equal:
  Immutable.Set [1, 2]
Received:
  Immutable.Set [1, 2]"
`;

exports[`.toEqual() {pass: false} expect(Immutable.Set [1, 2]).not.toEqual(Immutable.Set [2, 1]) 1`] = `
"expect(received).not.toEqual(expected)

Expected value to not equal:
  Immutable.Set [2, 1]
Received:
  Immutable.Set [1, 2]"
`;

exports[`.toEqual() {pass: false} expect(Immutable.Set [1, 2]).toEqual(Immutable.Set []) 1`] = `
"expect(received).toEqual(expected)

Expected value to equal:
  Immutable.Set []
Received:
  Immutable.Set [1, 2]

Difference:

- Expected
+ Received

- Immutable.Set []
+ Immutable.Set [
+   1,
+   2,
+ ]"
`;

exports[`.toEqual() {pass: false} expect(Immutable.Set [1, 2]).toEqual(Immutable.Set [1, 2, 3]) 1`] = `
"expect(received).toEqual(expected)

Expected value to equal:
  Immutable.Set [1, 2, 3]
Received:
  Immutable.Set [1, 2]

Difference:

- Expected
+ Received

  Immutable.Set [
    1,
    2,
-   3,
  ]"
`;

exports[`.toEqual() {pass: false} expect(Map {"a" => 0}).toEqual(Map {"b" => 0}) 1`] = `
"expect(received).toEqual(expected)

Expected value to equal:
  Map {\\"b\\" => 0}
Received:
  Map {\\"a\\" => 0}

Difference:

- Expected
+ Received

  Map {
-   \\"b\\" => 0,
+   \\"a\\" => 0,
  }"
`;

exports[`.toEqual() {pass: false} expect(Map {"v" => 1}).toEqual(Map {"v" => 2}) 1`] = `
"expect(received).toEqual(expected)

Expected value to equal:
  Map {\\"v\\" => 2}
Received:
  Map {\\"v\\" => 1}

Difference:

- Expected
+ Received

  Map {
-   \\"v\\" => 2,
+   \\"v\\" => 1,
  }"
`;

exports[`.toEqual() {pass: false} expect(Map {}).not.toEqual(Map {}) 1`] = `
"expect(received).not.toEqual(expected)

Expected value to not equal:
  Map {}
Received:
  Map {}"
`;

exports[`.toEqual() {pass: false} expect(Map {}).toEqual(Set {}) 1`] = `
"expect(received).toEqual(expected)

Expected value to equal:
  Set {}
Received:
  Map {}

Difference:

  Comparing two different types of values. Expected set but received map."
`;

exports[`.toEqual() {pass: false} expect(Map {1 => "one", 2 => "two"}).not.toEqual(Map {1 => "one", 2 => "two"}) 1`] = `
"expect(received).not.toEqual(expected)

Expected value to not equal:
  Map {1 => \\"one\\", 2 => \\"two\\"}
Received:
  Map {1 => \\"one\\", 2 => \\"two\\"}"
`;

exports[`.toEqual() {pass: false} expect(Map {1 => "one", 2 => "two"}).not.toEqual(Map {2 => "two", 1 => "one"}) 1`] = `
"expect(received).not.toEqual(expected)

Expected value to not equal:
  Map {2 => \\"two\\", 1 => \\"one\\"}
Received:
  Map {1 => \\"one\\", 2 => \\"two\\"}"
`;

exports[`.toEqual() {pass: false} expect(Map {1 => "one", 2 => "two"}).toEqual(Map {1 => "one"}) 1`] = `
"expect(received).toEqual(expected)

Expected value to equal:
  Map {1 => \\"one\\"}
Received:
  Map {1 => \\"one\\", 2 => \\"two\\"}

Difference:

- Expected
+ Received

  Map {
    1 => \\"one\\",
+   2 => \\"two\\",
  }"
`;

exports[`.toEqual() {pass: false} expect(Set {}).not.toEqual(Set {}) 1`] = `
"expect(received).not.toEqual(expected)

Expected value to not equal:
  Set {}
Received:
  Set {}"
`;

exports[`.toEqual() {pass: false} expect(Set {1, 2}).not.toEqual(Set {1, 2}) 1`] = `
"expect(received).not.toEqual(expected)

Expected value to not equal:
  Set {1, 2}
Received:
  Set {1, 2}"
`;

exports[`.toEqual() {pass: false} expect(Set {1, 2}).not.toEqual(Set {2, 1}) 1`] = `
"expect(received).not.toEqual(expected)

Expected value to not equal:
  Set {2, 1}
Received:
  Set {1, 2}"
`;

exports[`.toEqual() {pass: false} expect(Set {1, 2}).toEqual(Set {}) 1`] = `
"expect(received).toEqual(expected)

Expected value to equal:
  Set {}
Received:
  Set {1, 2}

Difference:

- Expected
+ Received

- Set {}
+ Set {
+   1,
+   2,
+ }"
`;

exports[`.toEqual() {pass: false} expect(Set {1, 2}).toEqual(Set {1, 2, 3}) 1`] = `
"expect(received).toEqual(expected)

Expected value to equal:
  Set {1, 2, 3}
Received:
  Set {1, 2}

Difference:

- Expected
+ Received

  Set {
    1,
    2,
-   3,
  }"
`;

exports[`.toEqual() {pass: false} expect(false).toEqual(ObjectContaining {"a": 2}) 1`] = `
"expect(received).toEqual(expected)

Expected value to equal:
  ObjectContaining {\\"a\\": 2}
Received:
  false

Difference:

  Comparing two different types of values. Expected object but received boolean."
`;

exports[`.toEqual() {pass: false} expect(null).toEqual(undefined) 1`] = `
"expect(received).toEqual(expected)

Expected value to equal:
  undefined
Received:
  null

Difference:

  Comparing two different types of values. Expected undefined but received null."
`;

exports[`.toEqual() {pass: false} expect(true).not.toEqual(Anything) 1`] = `
"expect(received).not.toEqual(expected)

Expected value to not equal:
  Anything
Received:
  true"
`;

exports[`.toEqual() {pass: false} expect(true).not.toEqual(true) 1`] = `
"expect(received).not.toEqual(expected)

Expected value to not equal:
  true
Received:
  true"
`;

exports[`.toEqual() {pass: false} expect(true).toEqual(false) 1`] = `
"expect(received).toEqual(expected)

Expected value to equal:
  false
Received:
  true"
`;

exports[`.toEqual() {pass: false} expect(undefined).toEqual(Any<Function>) 1`] = `
"expect(received).toEqual(expected)

Expected value to equal:
  Any<Function>
Received:
  undefined

Difference:

  Comparing two different types of values. Expected function but received undefined."
`;

exports[`.toEqual() {pass: false} expect(undefined).toEqual(Anything) 1`] = `
"expect(received).toEqual(expected)

Expected value to equal:
  Anything
Received:
  undefined"
`;

exports[`.toHaveLength {pass: false} expect("").toHaveLength(1) 1`] = `
"expect(received).toHaveLength(length)

Expected value to have length:
  1
Received:
  \\"\\"
received.length:
  0"
`;

exports[`.toHaveLength {pass: false} expect("abc").toHaveLength(66) 1`] = `
"expect(received).toHaveLength(length)

Expected value to have length:
  66
Received:
  \\"abc\\"
received.length:
  3"
`;

exports[`.toHaveLength {pass: false} expect(["a", "b"]).toHaveLength(99) 1`] = `
"expect(received).toHaveLength(length)

Expected value to have length:
  99
Received:
  [\\"a\\", \\"b\\"]
received.length:
  2"
`;

exports[`.toHaveLength {pass: false} expect([]).toHaveLength(1) 1`] = `
"expect(received).toHaveLength(length)

Expected value to have length:
  1
Received:
  []
received.length:
  0"
`;

exports[`.toHaveLength {pass: false} expect([1, 2]).toHaveLength(3) 1`] = `
"expect(received).toHaveLength(length)

Expected value to have length:
  3
Received:
  [1, 2]
received.length:
  2"
`;

exports[`.toHaveLength {pass: true} expect("").toHaveLength(0) 1`] = `
"expect(received).not.toHaveLength(length)

Expected value to not have length:
  0
Received:
  \\"\\"
received.length:
  0"
`;

exports[`.toHaveLength {pass: true} expect("abc").toHaveLength(3) 1`] = `
"expect(received).not.toHaveLength(length)

Expected value to not have length:
  3
Received:
  \\"abc\\"
received.length:
  3"
`;

exports[`.toHaveLength {pass: true} expect(["a", "b"]).toHaveLength(2) 1`] = `
"expect(received).not.toHaveLength(length)

Expected value to not have length:
  2
Received:
  [\\"a\\", \\"b\\"]
received.length:
  2"
`;

exports[`.toHaveLength {pass: true} expect([]).toHaveLength(0) 1`] = `
"expect(received).not.toHaveLength(length)

Expected value to not have length:
  0
Received:
  []
received.length:
  0"
`;

exports[`.toHaveLength {pass: true} expect([1, 2]).toHaveLength(2) 1`] = `
"expect(received).not.toHaveLength(length)

Expected value to not have length:
  2
Received:
  [1, 2]
received.length:
  2"
`;

exports[`.toHaveLength error cases 1`] = `
"expect(received)[.not].toHaveLength(length)

Expected value to have a 'length' property that is a number. Received:
  {\\"a\\": 9}
received.length:
  undefined"
`;

exports[`.toHaveLength error cases 2`] = `
"expect(received)[.not].toHaveLength(length)

Expected value to have a 'length' property that is a number. Received:
  0
"
`;

exports[`.toHaveLength error cases 3`] = `
"expect(received)[.not].toHaveLength(length)

Expected value to have a 'length' property that is a number. Received:
  undefined
"
`;

exports[`.toHaveProperty() {error} expect({"a": {"b": {}}}).toHaveProperty('1') 1`] = `
"expect(object)[.not].toHaveProperty(path)

Expected path to be a string or an array. Received:
  number: 1"
`;

exports[`.toHaveProperty() {error} expect({"a": {"b": {}}}).toHaveProperty('null') 1`] = `
"expect(object)[.not].toHaveProperty(path)

Expected path to be a string or an array. Received:
  null: null"
`;

exports[`.toHaveProperty() {error} expect({"a": {"b": {}}}).toHaveProperty('undefined') 1`] = `
"expect(object)[.not].toHaveProperty(path)

Expected path to be a string or an array. Received:
  undefined: undefined"
`;

exports[`.toHaveProperty() {error} expect(null).toHaveProperty('a.b') 1`] = `
"expect(object)[.not].toHaveProperty(path)

Expected object to be an object. Received:
  null: null"
`;

exports[`.toHaveProperty() {error} expect(undefined).toHaveProperty('a') 1`] = `
"expect(object)[.not].toHaveProperty(path)

Expected object to be an object. Received:
  undefined: undefined"
`;

exports[`.toHaveProperty() {pass: false} expect("abc").toHaveProperty('a.b.c') 1`] = `
"expect(object).toHaveProperty(path)

Expected the object:
  \\"abc\\"
To have a nested property:
  \\"a.b.c\\"
"
`;

exports[`.toHaveProperty() {pass: false} expect("abc").toHaveProperty('a.b.c', {"a": 5}) 1`] = `
"expect(object).toHaveProperty(path, value)

Expected the object:
  \\"abc\\"
To have a nested property:
  \\"a.b.c\\"
With a value of:
  {\\"a\\": 5}
"
`;

exports[`.toHaveProperty() {pass: false} expect({"a": {"b": {"c": {"d": 1}}}}).toHaveProperty('a,b,c,d', 2) 1`] = `
"expect(object).toHaveProperty(path, value)

Expected the object:
  {\\"a\\": {\\"b\\": {\\"c\\": {\\"d\\": 1}}}}
To have a nested property:
  [\\"a\\", \\"b\\", \\"c\\", \\"d\\"]
With a value of:
  2
Received:
  1"
`;

exports[`.toHaveProperty() {pass: false} expect({"a": {"b": {"c": {"d": 1}}}}).toHaveProperty('a.b.c.d', 2) 1`] = `
"expect(object).toHaveProperty(path, value)

Expected the object:
  {\\"a\\": {\\"b\\": {\\"c\\": {\\"d\\": 1}}}}
To have a nested property:
  \\"a.b.c.d\\"
With a value of:
  2
Received:
  1"
`;

exports[`.toHaveProperty() {pass: false} expect({"a": {"b": {"c": {"d": 1}}}}).toHaveProperty('a.b.ttt.d', 1) 1`] = `
"expect(object).toHaveProperty(path, value)

Expected the object:
  {\\"a\\": {\\"b\\": {\\"c\\": {\\"d\\": 1}}}}
To have a nested property:
  \\"a.b.ttt.d\\"
With a value of:
  1
Received:
  object.a.b: {\\"c\\": {\\"d\\": 1}}"
`;

exports[`.toHaveProperty() {pass: false} expect({"a": {"b": {"c": {}}}}).toHaveProperty('a.b.c.d') 1`] = `
"expect(object).toHaveProperty(path)

Expected the object:
  {\\"a\\": {\\"b\\": {\\"c\\": {}}}}
To have a nested property:
  \\"a.b.c.d\\"
Received:
  object.a.b.c: {}"
`;

exports[`.toHaveProperty() {pass: false} expect({"a": {"b": {"c": {}}}}).toHaveProperty('a.b.c.d', 1) 1`] = `
"expect(object).toHaveProperty(path, value)

Expected the object:
  {\\"a\\": {\\"b\\": {\\"c\\": {}}}}
To have a nested property:
  \\"a.b.c.d\\"
With a value of:
  1
Received:
  object.a.b.c: {}"
`;

exports[`.toHaveProperty() {pass: false} expect({"a": {"b": {"c": 5}}}).toHaveProperty('a.b', {"c": 4}) 1`] = `
"expect(object).toHaveProperty(path, value)

Expected the object:
  {\\"a\\": {\\"b\\": {\\"c\\": 5}}}
To have a nested property:
  \\"a.b\\"
With a value of:
  {\\"c\\": 4}
Received:
  {\\"c\\": 5}

Difference:

- Expected
+ Received

  Object {
-   \\"c\\": 4,
+   \\"c\\": 5,
  }"
`;

exports[`.toHaveProperty() {pass: false} expect({"a": {"b": 3}}).toHaveProperty('a.b', undefined) 1`] = `
"expect(object).toHaveProperty(path, value)

Expected the object:
  {\\"a\\": {\\"b\\": 3}}
To have a nested property:
  \\"a.b\\"
With a value of:
  undefined
Received:
  3

Difference:

  Comparing two different types of values. Expected undefined but received number."
`;

exports[`.toHaveProperty() {pass: false} expect({"a": 1}).toHaveProperty('a.b.c.d') 1`] = `
"expect(object).toHaveProperty(path)

Expected the object:
  {\\"a\\": 1}
To have a nested property:
  \\"a.b.c.d\\"
Received:
  object.a: 1"
`;

exports[`.toHaveProperty() {pass: false} expect({"a": 1}).toHaveProperty('a.b.c.d', 5) 1`] = `
"expect(object).toHaveProperty(path, value)

Expected the object:
  {\\"a\\": 1}
To have a nested property:
  \\"a.b.c.d\\"
With a value of:
  5
Received:
  object.a: 1"
`;

exports[`.toHaveProperty() {pass: false} expect({"a.b.c.d": 1}).toHaveProperty('a.b.c.d', 2) 1`] = `
"expect(object).toHaveProperty(path, value)

Expected the object:
  {\\"a.b.c.d\\": 1}
To have a nested property:
  \\"a.b.c.d\\"
With a value of:
  2
"
`;

exports[`.toHaveProperty() {pass: false} expect({"a.b.c.d": 1}).toHaveProperty('a.b.c.d', 2) 2`] = `
"expect(object).toHaveProperty(path, value)

Expected the object:
  {\\"a.b.c.d\\": 1}
To have a nested property:
  [\\"a.b.c.d\\"]
With a value of:
  2
Received:
  1"
`;

exports[`.toHaveProperty() {pass: false} expect({}).toHaveProperty('a') 1`] = `
"expect(object).toHaveProperty(path)

Expected the object:
  {}
To have a nested property:
  \\"a\\"
"
`;

exports[`.toHaveProperty() {pass: false} expect({}).toHaveProperty('a', "a") 1`] = `
"expect(object).toHaveProperty(path, value)

Expected the object:
  {}
To have a nested property:
  \\"a\\"
With a value of:
  \\"a\\"
Received:
  undefined

Difference:

  Comparing two different types of values. Expected string but received undefined."
`;

exports[`.toHaveProperty() {pass: false} expect({}).toHaveProperty('a', "test") 1`] = `
"expect(object).toHaveProperty(path, value)

Expected the object:
  {}
To have a nested property:
  \\"a\\"
With a value of:
  \\"test\\"
"
`;

exports[`.toHaveProperty() {pass: false} expect({}).toHaveProperty('b', undefined) 1`] = `
"expect(object).toHaveProperty(path, value)

Expected the object:
  {}
To have a nested property:
  \\"b\\"
With a value of:
  undefined
Received:
  \\"b\\"

Difference:

  Comparing two different types of values. Expected undefined but received string."
`;

exports[`.toHaveProperty() {pass: false} expect(1).toHaveProperty('a.b.c') 1`] = `
"expect(object).toHaveProperty(path)

Expected the object:
  1
To have a nested property:
  \\"a.b.c\\"
"
`;

exports[`.toHaveProperty() {pass: false} expect(1).toHaveProperty('a.b.c', "test") 1`] = `
"expect(object).toHaveProperty(path, value)

Expected the object:
  1
To have a nested property:
  \\"a.b.c\\"
With a value of:
  \\"test\\"
"
`;

exports[`.toHaveProperty() {pass: true} expect({"a": {"b": [1, 2, 3]}}).toHaveProperty('a,b,1') 1`] = `
"expect(object).not.toHaveProperty(path)

Expected the object:
  {\\"a\\": {\\"b\\": [1, 2, 3]}}
Not to have a nested property:
  [\\"a\\", \\"b\\", 1]
"
`;

exports[`.toHaveProperty() {pass: true} expect({"a": {"b": [1, 2, 3]}}).toHaveProperty('a,b,1', 2) 1`] = `
"expect(object).not.toHaveProperty(path, value)

Expected the object:
  {\\"a\\": {\\"b\\": [1, 2, 3]}}
Not to have a nested property:
  [\\"a\\", \\"b\\", 1]
With a value of:
  2
"
`;

exports[`.toHaveProperty() {pass: true} expect({"a": {"b": {"c": {"d": 1}}}}).toHaveProperty('a,b,c,d') 1`] = `
"expect(object).not.toHaveProperty(path)

Expected the object:
  {\\"a\\": {\\"b\\": {\\"c\\": {\\"d\\": 1}}}}
Not to have a nested property:
  [\\"a\\", \\"b\\", \\"c\\", \\"d\\"]
"
`;

exports[`.toHaveProperty() {pass: true} expect({"a": {"b": {"c": {"d": 1}}}}).toHaveProperty('a,b,c,d', 1) 1`] = `
"expect(object).not.toHaveProperty(path, value)

Expected the object:
  {\\"a\\": {\\"b\\": {\\"c\\": {\\"d\\": 1}}}}
Not to have a nested property:
  [\\"a\\", \\"b\\", \\"c\\", \\"d\\"]
With a value of:
  1
"
`;

exports[`.toHaveProperty() {pass: true} expect({"a": {"b": {"c": {"d": 1}}}}).toHaveProperty('a.b.c.d') 1`] = `
"expect(object).not.toHaveProperty(path)

Expected the object:
  {\\"a\\": {\\"b\\": {\\"c\\": {\\"d\\": 1}}}}
Not to have a nested property:
  \\"a.b.c.d\\"
"
`;

exports[`.toHaveProperty() {pass: true} expect({"a": {"b": {"c": {"d": 1}}}}).toHaveProperty('a.b.c.d', 1) 1`] = `
"expect(object).not.toHaveProperty(path, value)

Expected the object:
  {\\"a\\": {\\"b\\": {\\"c\\": {\\"d\\": 1}}}}
Not to have a nested property:
  \\"a.b.c.d\\"
With a value of:
  1
"
`;

exports[`.toHaveProperty() {pass: true} expect({"a": {"b": {"c": 5}}}).toHaveProperty('a.b', {"c": 5}) 1`] = `
"expect(object).not.toHaveProperty(path, value)

Expected the object:
  {\\"a\\": {\\"b\\": {\\"c\\": 5}}}
Not to have a nested property:
  \\"a.b\\"
With a value of:
  {\\"c\\": 5}
"
`;

exports[`.toHaveProperty() {pass: true} expect({"a": {"b": undefined}}).toHaveProperty('a.b') 1`] = `
"expect(object).not.toHaveProperty(path)

Expected the object:
  {\\"a\\": {\\"b\\": undefined}}
Not to have a nested property:
  \\"a.b\\"
"
`;

exports[`.toHaveProperty() {pass: true} expect({"a": {"b": undefined}}).toHaveProperty('a.b', undefined) 1`] = `
"expect(object).not.toHaveProperty(path, value)

Expected the object:
  {\\"a\\": {\\"b\\": undefined}}
Not to have a nested property:
  \\"a.b\\"
With a value of:
  undefined
"
`;

exports[`.toHaveProperty() {pass: true} expect({"a": 0}).toHaveProperty('a') 1`] = `
"expect(object).not.toHaveProperty(path)

Expected the object:
  {\\"a\\": 0}
Not to have a nested property:
  \\"a\\"
"
`;

exports[`.toHaveProperty() {pass: true} expect({"a": 0}).toHaveProperty('a', 0) 1`] = `
"expect(object).not.toHaveProperty(path, value)

Expected the object:
  {\\"a\\": 0}
Not to have a nested property:
  \\"a\\"
With a value of:
  0
"
`;

exports[`.toHaveProperty() {pass: true} expect({"a.b.c.d": 1}).toHaveProperty('a.b.c.d') 1`] = `
"expect(object).not.toHaveProperty(path)

Expected the object:
  {\\"a.b.c.d\\": 1}
Not to have a nested property:
  [\\"a.b.c.d\\"]
"
`;

exports[`.toHaveProperty() {pass: true} expect({"a.b.c.d": 1}).toHaveProperty('a.b.c.d', 1) 1`] = `
"expect(object).not.toHaveProperty(path, value)

Expected the object:
  {\\"a.b.c.d\\": 1}
Not to have a nested property:
  [\\"a.b.c.d\\"]
With a value of:
  1
"
`;

exports[`.toHaveProperty() {pass: true} expect({"property": 1}).toHaveProperty('property', 1) 1`] = `
"expect(object).not.toHaveProperty(path, value)

Expected the object:
  {\\"property\\": 1}
Not to have a nested property:
  \\"property\\"
With a value of:
  1
"
`;

exports[`.toHaveProperty() {pass: true} expect({}).toHaveProperty('a', undefined) 1`] = `
"expect(object).not.toHaveProperty(path, value)

Expected the object:
  {}
Not to have a nested property:
  \\"a\\"
With a value of:
  undefined
"
`;

exports[`.toHaveProperty() {pass: true} expect({}).toHaveProperty('b', "b") 1`] = `
"expect(object).not.toHaveProperty(path, value)

Expected the object:
  {}
Not to have a nested property:
  \\"b\\"
With a value of:
  \\"b\\"
"
`;

exports[`.toMatch() {pass: true} expect(Foo bar).toMatch(/^foo/i) 1`] = `
"expect(received).not.toMatch(expected)

Expected value not to match:
  /^foo/i
Received:
  \\"Foo bar\\""
`;

exports[`.toMatch() {pass: true} expect(foo).toMatch(foo) 1`] = `
"expect(received).not.toMatch(expected)

Expected value not to match:
  \\"foo\\"
Received:
  \\"foo\\""
`;

exports[`.toMatch() throws if non String actual value passed: [/foo/i, "foo"] 1`] = `
"expect(string)[.not].toMatch(expected)

string value must be a string.
Received:
  regexp: /foo/i"
`;

exports[`.toMatch() throws if non String actual value passed: [[], "foo"] 1`] = `
"expect(string)[.not].toMatch(expected)

string value must be a string.
Received:
  array: []"
`;

exports[`.toMatch() throws if non String actual value passed: [[Function anonymous], "foo"] 1`] = `
"expect(string)[.not].toMatch(expected)

string value must be a string.
Received:
  function: [Function anonymous]"
`;

exports[`.toMatch() throws if non String actual value passed: [{}, "foo"] 1`] = `
"expect(string)[.not].toMatch(expected)

string value must be a string.
Received:
  object: {}"
`;

exports[`.toMatch() throws if non String actual value passed: [1, "foo"] 1`] = `
"expect(string)[.not].toMatch(expected)

string value must be a string.
Received:
  number: 1"
`;

exports[`.toMatch() throws if non String actual value passed: [true, "foo"] 1`] = `
"expect(string)[.not].toMatch(expected)

string value must be a string.
Received:
  boolean: true"
`;

exports[`.toMatch() throws if non String actual value passed: [undefined, "foo"] 1`] = `
"expect(string)[.not].toMatch(expected)

string value must be a string.
Received: undefined"
`;

exports[`.toMatch() throws if non String/RegExp expected value passed: ["foo", []] 1`] = `
"expect(string)[.not].toMatch(expected)

expected value must be a string or a regular expression.
Expected:
  array: []"
`;

exports[`.toMatch() throws if non String/RegExp expected value passed: ["foo", [Function anonymous]] 1`] = `
"expect(string)[.not].toMatch(expected)

expected value must be a string or a regular expression.
Expected:
  function: [Function anonymous]"
`;

exports[`.toMatch() throws if non String/RegExp expected value passed: ["foo", {}] 1`] = `
"expect(string)[.not].toMatch(expected)

expected value must be a string or a regular expression.
Expected:
  object: {}"
`;

exports[`.toMatch() throws if non String/RegExp expected value passed: ["foo", 1] 1`] = `
"expect(string)[.not].toMatch(expected)

expected value must be a string or a regular expression.
Expected:
  number: 1"
`;

exports[`.toMatch() throws if non String/RegExp expected value passed: ["foo", true] 1`] = `
"expect(string)[.not].toMatch(expected)

expected value must be a string or a regular expression.
Expected:
  boolean: true"
`;

exports[`.toMatch() throws if non String/RegExp expected value passed: ["foo", undefined] 1`] = `
"expect(string)[.not].toMatch(expected)

expected value must be a string or a regular expression.
Expected: undefined"
`;

exports[`.toMatch() throws: [bar, /foo/] 1`] = `
"expect(received).toMatch(expected)

Expected value to match:
  /foo/
Received:
  \\"bar\\""
`;

exports[`.toMatch() throws: [bar, foo] 1`] = `
"expect(received).toMatch(expected)

Expected value to match:
  \\"foo\\"
Received:
  \\"bar\\""
`;

exports[`toMatchObject() {pass: false} expect([0]).toMatchObject([-0]) 1`] = `
"expect(received).toMatchObject(expected)

Expected value to match object:
  [-0]
Received:
  [0]
Difference:
- Expected
+ Received

  Array [
-   -0,
+   0,
  ]"
`;

exports[`toMatchObject() {pass: false} expect([1, 2, 3]).toMatchObject([1, 2, 2]) 1`] = `
"expect(received).toMatchObject(expected)

Expected value to match object:
  [1, 2, 2]
Received:
  [1, 2, 3]
Difference:
- Expected
+ Received

  Array [
    1,
    2,
-   2,
+   3,
  ]"
`;

exports[`toMatchObject() {pass: false} expect([1, 2, 3]).toMatchObject([2, 3, 1]) 1`] = `
"expect(received).toMatchObject(expected)

Expected value to match object:
  [2, 3, 1]
Received:
  [1, 2, 3]
Difference:
- Expected
+ Received

  Array [
+   1,
    2,
    3,
-   1,
  ]"
`;

exports[`toMatchObject() {pass: false} expect([1, 2]).toMatchObject([1, 3]) 1`] = `
"expect(received).toMatchObject(expected)

Expected value to match object:
  [1, 3]
Received:
  [1, 2]
Difference:
- Expected
+ Received

  Array [
    1,
-   3,
+   2,
  ]"
`;

exports[`toMatchObject() {pass: false} expect([Error: foo]).toMatchObject([Error: bar]) 1`] = `
"expect(received).toMatchObject(expected)

Expected value to match object:
  [Error: bar]
Received:
  [Error: foo]
Difference:
- Expected
+ Received

- [Error: bar]
+ [Error: foo]"
`;

exports[`toMatchObject() {pass: false} expect({"a": "a", "c": "d"}).toMatchObject({"a": Any<Number>}) 1`] = `
"expect(received).toMatchObject(expected)

Expected value to match object:
  {\\"a\\": Any<Number>}
Received:
  {\\"a\\": \\"a\\", \\"c\\": \\"d\\"}
Difference:
- Expected
+ Received

  Object {
-   \\"a\\": Any<Number>,
+   \\"a\\": \\"a\\",
  }"
`;

exports[`toMatchObject() {pass: false} expect({"a": "b", "c": "d"}).toMatchObject({"a": "b!", "c": "d"}) 1`] = `
"expect(received).toMatchObject(expected)

Expected value to match object:
  {\\"a\\": \\"b!\\", \\"c\\": \\"d\\"}
Received:
  {\\"a\\": \\"b\\", \\"c\\": \\"d\\"}
Difference:
- Expected
+ Received

  Object {
-   \\"a\\": \\"b!\\",
+   \\"a\\": \\"b\\",
    \\"c\\": \\"d\\",
  }"
`;

exports[`toMatchObject() {pass: false} expect({"a": "b", "c": "d"}).toMatchObject({"e": "b"}) 1`] = `
"expect(received).toMatchObject(expected)

Expected value to match object:
  {\\"e\\": \\"b\\"}
Received:
  {\\"a\\": \\"b\\", \\"c\\": \\"d\\"}
Difference:
- Expected
+ Received

  Object {
-   \\"e\\": \\"b\\",
+   \\"a\\": \\"b\\",
+   \\"c\\": \\"d\\",
  }"
`;

exports[`toMatchObject() {pass: false} expect({"a": "b", "t": {"x": {"r": "r"}, "z": "z"}}).toMatchObject({"a": "b", "t": {"z": [3]}}) 1`] = `
"expect(received).toMatchObject(expected)

Expected value to match object:
  {\\"a\\": \\"b\\", \\"t\\": {\\"z\\": [3]}}
Received:
  {\\"a\\": \\"b\\", \\"t\\": {\\"x\\": {\\"r\\": \\"r\\"}, \\"z\\": \\"z\\"}}
Difference:
- Expected
+ Received

  Object {
    \\"a\\": \\"b\\",
    \\"t\\": Object {
-     \\"z\\": Array [
-       3,
-     ],
+     \\"z\\": \\"z\\",
    },
  }"
`;

exports[`toMatchObject() {pass: false} expect({"a": "b", "t": {"x": {"r": "r"}, "z": "z"}}).toMatchObject({"t": {"l": {"r": "r"}}}) 1`] = `
"expect(received).toMatchObject(expected)

Expected value to match object:
  {\\"t\\": {\\"l\\": {\\"r\\": \\"r\\"}}}
Received:
  {\\"a\\": \\"b\\", \\"t\\": {\\"x\\": {\\"r\\": \\"r\\"}, \\"z\\": \\"z\\"}}
Difference:
- Expected
+ Received

  Object {
    \\"t\\": Object {
-     \\"l\\": Object {
+     \\"x\\": Object {
        \\"r\\": \\"r\\",
      },
+     \\"z\\": \\"z\\",
    },
  }"
`;

exports[`toMatchObject() {pass: false} expect({"a": [{"a": "a", "b": "b"}]}).toMatchObject({"a": [{"a": "c"}]}) 1`] = `
"expect(received).toMatchObject(expected)

Expected value to match object:
  {\\"a\\": [{\\"a\\": \\"c\\"}]}
Received:
  {\\"a\\": [{\\"a\\": \\"a\\", \\"b\\": \\"b\\"}]}
Difference:
- Expected
+ Received

  Object {
    \\"a\\": Array [
      Object {
-       \\"a\\": \\"c\\",
+       \\"a\\": \\"a\\",
      },
    ],
  }"
`;

exports[`toMatchObject() {pass: false} expect({"a": [3, 4, "v"], "b": "b"}).toMatchObject({"a": ["v"]}) 1`] = `
"expect(received).toMatchObject(expected)

Expected value to match object:
  {\\"a\\": [\\"v\\"]}
Received:
  {\\"a\\": [3, 4, \\"v\\"], \\"b\\": \\"b\\"}
Difference:
- Expected
+ Received

  Object {
    \\"a\\": Array [
+     3,
+     4,
      \\"v\\",
    ],
  }"
`;

exports[`toMatchObject() {pass: false} expect({"a": [3, 4, 5], "b": "b"}).toMatchObject({"a": [3, 4, 5, 6]}) 1`] = `
"expect(received).toMatchObject(expected)

Expected value to match object:
  {\\"a\\": [3, 4, 5, 6]}
Received:
  {\\"a\\": [3, 4, 5], \\"b\\": \\"b\\"}
Difference:
- Expected
+ Received

  Object {
    \\"a\\": Array [
      3,
      4,
      5,
-     6,
    ],
  }"
`;

exports[`toMatchObject() {pass: false} expect({"a": [3, 4, 5], "b": "b"}).toMatchObject({"a": [3, 4]}) 1`] = `
"expect(received).toMatchObject(expected)

Expected value to match object:
  {\\"a\\": [3, 4]}
Received:
  {\\"a\\": [3, 4, 5], \\"b\\": \\"b\\"}
Difference:
- Expected
+ Received

  Object {
    \\"a\\": Array [
      3,
      4,
+     5,
    ],
  }"
`;

exports[`toMatchObject() {pass: false} expect({"a": [3, 4, 5], "b": "b"}).toMatchObject({"a": {"b": 4}}) 1`] = `
"expect(received).toMatchObject(expected)

Expected value to match object:
  {\\"a\\": {\\"b\\": 4}}
Received:
  {\\"a\\": [3, 4, 5], \\"b\\": \\"b\\"}
Difference:
- Expected
+ Received

  Object {
-   \\"a\\": Object {
-     \\"b\\": 4,
-   },
+   \\"a\\": Array [
+     3,
+     4,
+     5,
+   ],
  }"
`;

exports[`toMatchObject() {pass: false} expect({"a": [3, 4, 5], "b": "b"}).toMatchObject({"a": {"b": Any<String>}}) 1`] = `
"expect(received).toMatchObject(expected)

Expected value to match object:
  {\\"a\\": {\\"b\\": Any<String>}}
Received:
  {\\"a\\": [3, 4, 5], \\"b\\": \\"b\\"}
Difference:
- Expected
+ Received

  Object {
-   \\"a\\": Object {
-     \\"b\\": Any<String>,
-   },
+   \\"a\\": Array [
+     3,
+     4,
+     5,
+   ],
  }"
`;

exports[`toMatchObject() {pass: false} expect({"a": 1, "b": 1, "c": 1, "d": {"e": {"f": 555}}}).toMatchObject({"d": {"e": {"f": 222}}}) 1`] = `
"expect(received).toMatchObject(expected)

Expected value to match object:
  {\\"d\\": {\\"e\\": {\\"f\\": 222}}}
Received:
  {\\"a\\": 1, \\"b\\": 1, \\"c\\": 1, \\"d\\": {\\"e\\": {\\"f\\": 555}}}
Difference:
- Expected
+ Received

  Object {
    \\"d\\": Object {
      \\"e\\": Object {
-       \\"f\\": 222,
+       \\"f\\": 555,
      },
    },
  }"
`;

exports[`toMatchObject() {pass: false} expect({"a": 2015-11-30T00:00:00.000Z, "b": "b"}).toMatchObject({"a": 2015-10-10T00:00:00.000Z}) 1`] = `
"expect(received).toMatchObject(expected)

Expected value to match object:
  {\\"a\\": 2015-10-10T00:00:00.000Z}
Received:
  {\\"a\\": 2015-11-30T00:00:00.000Z, \\"b\\": \\"b\\"}
Difference:
- Expected
+ Received

  Object {
-   \\"a\\": 2015-10-10T00:00:00.000Z,
+   \\"a\\": 2015-11-30T00:00:00.000Z,
  }"
`;

exports[`toMatchObject() {pass: false} expect({"a": null, "b": "b"}).toMatchObject({"a": "4"}) 1`] = `
"expect(received).toMatchObject(expected)

Expected value to match object:
  {\\"a\\": \\"4\\"}
Received:
  {\\"a\\": null, \\"b\\": \\"b\\"}
Difference:
- Expected
+ Received

  Object {
-   \\"a\\": \\"4\\",
+   \\"a\\": null,
  }"
`;

exports[`toMatchObject() {pass: false} expect({"a": null, "b": "b"}).toMatchObject({"a": undefined}) 1`] = `
"expect(received).toMatchObject(expected)

Expected value to match object:
  {\\"a\\": undefined}
Received:
  {\\"a\\": null, \\"b\\": \\"b\\"}
Difference:
- Expected
+ Received

  Object {
-   \\"a\\": undefined,
+   \\"a\\": null,
  }"
`;

exports[`toMatchObject() {pass: false} expect({"a": undefined}).toMatchObject({"a": null}) 1`] = `
"expect(received).toMatchObject(expected)

Expected value to match object:
  {\\"a\\": null}
Received:
  {\\"a\\": undefined}
Difference:
- Expected
+ Received

  Object {
-   \\"a\\": null,
+   \\"a\\": undefined,
  }"
`;

exports[`toMatchObject() {pass: false} expect({}).toMatchObject({"a": undefined}) 1`] = `
"expect(received).toMatchObject(expected)

Expected value to match object:
  {\\"a\\": undefined}
Received:
  {}
Difference:
- Expected
+ Received

- Object {
-   \\"a\\": undefined,
- }
+ Object {}"
`;

exports[`toMatchObject() {pass: false} expect(2015-11-30T00:00:00.000Z).toMatchObject(2015-10-10T00:00:00.000Z) 1`] = `
"expect(received).toMatchObject(expected)

Expected value to match object:
  2015-10-10T00:00:00.000Z
Received:
  2015-11-30T00:00:00.000Z
Difference:
- Expected
+ Received

- 2015-10-10T00:00:00.000Z
+ 2015-11-30T00:00:00.000Z"
`;

exports[`toMatchObject() {pass: false} expect(Set {1, 2}).toMatchObject(Set {2}) 1`] = `
"expect(received).toMatchObject(expected)

Expected value to match object:
  Set {2}
Received:
  Set {1, 2}
Difference:
- Expected
+ Received

  Set {
+   1,
    2,
  }"
`;

exports[`toMatchObject() {pass: true} expect([]).toMatchObject([]) 1`] = `
"expect(received).not.toMatchObject(expected)

Expected value not to match object:
  []
Received:
  []"
`;

exports[`toMatchObject() {pass: true} expect([1, 2]).toMatchObject([1, 2]) 1`] = `
"expect(received).not.toMatchObject(expected)

Expected value not to match object:
  [1, 2]
Received:
  [1, 2]"
`;

exports[`toMatchObject() {pass: true} expect([Error: foo]).toMatchObject([Error: foo]) 1`] = `
"expect(received).not.toMatchObject(expected)

Expected value not to match object:
  [Error: foo]
Received:
  [Error: foo]"
`;

exports[`toMatchObject() {pass: true} expect({"a": "b", "c": "d"}).toMatchObject({"a": "b", "c": "d"}) 1`] = `
"expect(received).not.toMatchObject(expected)

Expected value not to match object:
  {\\"a\\": \\"b\\", \\"c\\": \\"d\\"}
Received:
  {\\"a\\": \\"b\\", \\"c\\": \\"d\\"}"
`;

exports[`toMatchObject() {pass: true} expect({"a": "b", "c": "d"}).toMatchObject({"a": "b"}) 1`] = `
"expect(received).not.toMatchObject(expected)

Expected value not to match object:
  {\\"a\\": \\"b\\"}
Received:
  {\\"a\\": \\"b\\", \\"c\\": \\"d\\"}"
`;

exports[`toMatchObject() {pass: true} expect({"a": "b", "t": {"x": {"r": "r"}, "z": "z"}}).toMatchObject({"a": "b", "t": {"z": "z"}}) 1`] = `
"expect(received).not.toMatchObject(expected)

Expected value not to match object:
  {\\"a\\": \\"b\\", \\"t\\": {\\"z\\": \\"z\\"}}
Received:
  {\\"a\\": \\"b\\", \\"t\\": {\\"x\\": {\\"r\\": \\"r\\"}, \\"z\\": \\"z\\"}}"
`;

exports[`toMatchObject() {pass: true} expect({"a": "b", "t": {"x": {"r": "r"}, "z": "z"}}).toMatchObject({"t": {"x": {"r": "r"}}}) 1`] = `
"expect(received).not.toMatchObject(expected)

Expected value not to match object:
  {\\"t\\": {\\"x\\": {\\"r\\": \\"r\\"}}}
Received:
  {\\"a\\": \\"b\\", \\"t\\": {\\"x\\": {\\"r\\": \\"r\\"}, \\"z\\": \\"z\\"}}"
`;

exports[`toMatchObject() {pass: true} expect({"a": [{"a": "a", "b": "b"}]}).toMatchObject({"a": [{"a": "a"}]}) 1`] = `
"expect(received).not.toMatchObject(expected)

Expected value not to match object:
  {\\"a\\": [{\\"a\\": \\"a\\"}]}
Received:
  {\\"a\\": [{\\"a\\": \\"a\\", \\"b\\": \\"b\\"}]}"
`;

exports[`toMatchObject() {pass: true} expect({"a": [3, 4, 5, "v"], "b": "b"}).toMatchObject({"a": [3, 4, 5, "v"]}) 1`] = `
"expect(received).not.toMatchObject(expected)

Expected value not to match object:
  {\\"a\\": [3, 4, 5, \\"v\\"]}
Received:
  {\\"a\\": [3, 4, 5, \\"v\\"], \\"b\\": \\"b\\"}"
`;

exports[`toMatchObject() {pass: true} expect({"a": [3, 4, 5], "b": "b"}).toMatchObject({"a": [3, 4, 5]}) 1`] = `
"expect(received).not.toMatchObject(expected)

Expected value not to match object:
  {\\"a\\": [3, 4, 5]}
Received:
  {\\"a\\": [3, 4, 5], \\"b\\": \\"b\\"}"
`;

exports[`toMatchObject() {pass: true} expect({"a": {"x": "x", "y": "y"}}).toMatchObject({"a": {"x": Any<String>}}) 1`] = `
"expect(received).not.toMatchObject(expected)

Expected value not to match object:
  {\\"a\\": {\\"x\\": Any<String>}}
Received:
  {\\"a\\": {\\"x\\": \\"x\\", \\"y\\": \\"y\\"}}"
`;

exports[`toMatchObject() {pass: true} expect({"a": 1, "c": 2}).toMatchObject({"a": Any<Number>}) 1`] = `
"expect(received).not.toMatchObject(expected)

Expected value not to match object:
  {\\"a\\": Any<Number>}
Received:
  {\\"a\\": 1, \\"c\\": 2}"
`;

exports[`toMatchObject() {pass: true} expect({"a": 2015-11-30T00:00:00.000Z, "b": "b"}).toMatchObject({"a": 2015-11-30T00:00:00.000Z}) 1`] = `
"expect(received).not.toMatchObject(expected)

Expected value not to match object:
  {\\"a\\": 2015-11-30T00:00:00.000Z}
Received:
  {\\"a\\": 2015-11-30T00:00:00.000Z, \\"b\\": \\"b\\"}"
`;

exports[`toMatchObject() {pass: true} expect({"a": null, "b": "b"}).toMatchObject({"a": null}) 1`] = `
"expect(received).not.toMatchObject(expected)

Expected value not to match object:
  {\\"a\\": null}
Received:
  {\\"a\\": null, \\"b\\": \\"b\\"}"
`;

exports[`toMatchObject() {pass: true} expect({"a": undefined, "b": "b"}).toMatchObject({"a": undefined}) 1`] = `
"expect(received).not.toMatchObject(expected)

Expected value not to match object:
  {\\"a\\": undefined}
Received:
  {\\"a\\": undefined, \\"b\\": \\"b\\"}"
`;

exports[`toMatchObject() {pass: true} expect({"a": undefined}).toMatchObject({"a": undefined}) 1`] = `
"expect(received).not.toMatchObject(expected)

Expected value not to match object:
  {\\"a\\": undefined}
Received:
  {\\"a\\": undefined}"
`;

exports[`toMatchObject() {pass: true} expect(2015-11-30T00:00:00.000Z).toMatchObject(2015-11-30T00:00:00.000Z) 1`] = `
"expect(received).not.toMatchObject(expected)

Expected value not to match object:
  2015-11-30T00:00:00.000Z
Received:
  2015-11-30T00:00:00.000Z"
`;

exports[`toMatchObject() {pass: true} expect(Set {1, 2}).toMatchObject(Set {1, 2}) 1`] = `
"expect(received).not.toMatchObject(expected)

Expected value not to match object:
  Set {1, 2}
Received:
  Set {1, 2}"
`;

exports[`toMatchObject() {pass: true} expect(Set {1, 2}).toMatchObject(Set {2, 1}) 1`] = `
"expect(received).not.toMatchObject(expected)

Expected value not to match object:
  Set {2, 1}
Received:
  Set {1, 2}"
`;

exports[`toMatchObject() throws expect("44").toMatchObject({}) 1`] = `
"expect(object)[.not].toMatchObject(expected)

received value must be an object.
Received:
  string: \\"44\\""
`;

exports[`toMatchObject() throws expect({}).toMatchObject("some string") 1`] = `
"expect(object)[.not].toMatchObject(expected)

expected value must be an object.
Expected:
  string: \\"some string\\""
`;

exports[`toMatchObject() throws expect({}).toMatchObject(4) 1`] = `
"expect(object)[.not].toMatchObject(expected)

expected value must be an object.
Expected:
  number: 4"
`;

exports[`toMatchObject() throws expect({}).toMatchObject(null) 1`] = `
"expect(object)[.not].toMatchObject(expected)

expected value must be an object.
Expected: null"
`;

exports[`toMatchObject() throws expect({}).toMatchObject(true) 1`] = `
"expect(object)[.not].toMatchObject(expected)

expected value must be an object.
Expected:
  boolean: true"
`;

exports[`toMatchObject() throws expect({}).toMatchObject(undefined) 1`] = `
"expect(object)[.not].toMatchObject(expected)

expected value must be an object.
Expected: undefined"
`;

exports[`toMatchObject() throws expect(4).toMatchObject({}) 1`] = `
"expect(object)[.not].toMatchObject(expected)

received value must be an object.
Received:
  number: 4"
`;

exports[`toMatchObject() throws expect(null).toMatchObject({}) 1`] = `
"expect(object)[.not].toMatchObject(expected)

received value must be an object.
Received: null"
`;

exports[`toMatchObject() throws expect(true).toMatchObject({}) 1`] = `
"expect(object)[.not].toMatchObject(expected)

received value must be an object.
Received:
  boolean: true"
`;

exports[`toMatchObject() throws expect(undefined).toMatchObject({}) 1`] = `
"expect(object)[.not].toMatchObject(expected)

received value must be an object.
Received: undefined"
`;
