// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`.rejects fails for promise that resolves 1`] = `
"<dim>expect(</>received</><dim>).</>rejects<dim>.</>toBe<dim>()</>

Received promise resolved instead of rejected
Resolved to value: 4</>"
`;

exports[`.rejects fails non-promise value "a" 1`] = `
"<dim>expect(</>received</><dim>).</>rejects<dim>.</>toBeDefined<dim>()</>

<bold>Matcher error</>: received</> value must be a promise

Received has type:  string
Received has value: \\"a\\"</>"
`;

exports[`.rejects fails non-promise value [1] 1`] = `
"<dim>expect(</>received</><dim>).</>rejects<dim>.</>toBeDefined<dim>()</>

<bold>Matcher error</>: received</> value must be a promise

Received has type:  array
Received has value: [1]</>"
`;

exports[`.rejects fails non-promise value [Function anonymous] 1`] = `
"<dim>expect(</>received</><dim>).</>rejects<dim>.</>toBeDefined<dim>()</>

<bold>Matcher error</>: received</> value must be a promise

Received has type:  function
Received has value: [Function anonymous]</>"
`;

exports[`.rejects fails non-promise value {"a": 1} 1`] = `
"<dim>expect(</>received</><dim>).</>rejects<dim>.</>toBeDefined<dim>()</>

<bold>Matcher error</>: received</> value must be a promise

Received has type:  object
Received has value: {\\"a\\": 1}</>"
`;

exports[`.rejects fails non-promise value 4 1`] = `
"<dim>expect(</>received</><dim>).</>rejects<dim>.</>not<dim>.</>toBeDefined<dim>()</>

<bold>Matcher error</>: received</> value must be a promise

Received has type:  number
Received has value: 4</>"
`;

exports[`.rejects fails non-promise value null 1`] = `
"<dim>expect(</>received</><dim>).</>rejects<dim>.</>not<dim>.</>toBeDefined<dim>()</>

<bold>Matcher error</>: received</> value must be a promise

Received has value: null</>"
`;

exports[`.rejects fails non-promise value true 1`] = `
"<dim>expect(</>received</><dim>).</>rejects<dim>.</>not<dim>.</>toBeDefined<dim>()</>

<bold>Matcher error</>: received</> value must be a promise

Received has type:  boolean
Received has value: true</>"
`;

exports[`.rejects fails non-promise value undefined 1`] = `
"<dim>expect(</>received</><dim>).</>rejects<dim>.</>not<dim>.</>toBeDefined<dim>()</>

<bold>Matcher error</>: received</> value must be a promise

Received has value: undefined</>"
`;

exports[`.resolves fails for promise that rejects 1`] = `
"<dim>expect(</>received</><dim>).</>resolves<dim>.</>toBe<dim>()</>

Received promise rejected instead of resolved
Rejected to value: 4</>"
`;

exports[`.resolves fails non-promise value "a" 1`] = `
"<dim>expect(</>received</><dim>).</>resolves<dim>.</>toBeDefined<dim>()</>

<bold>Matcher error</>: received</> value must be a promise

Received has type:  string
Received has value: \\"a\\"</>"
`;

exports[`.resolves fails non-promise value "a" synchronously 1`] = `
"<dim>expect(</>received</><dim>).</>resolves<dim>.</>toBeDefined<dim>()</>

<bold>Matcher error</>: received</> value must be a promise

Received has type:  string
Received has value: \\"a\\"</>"
`;

exports[`.resolves fails non-promise value [1] 1`] = `
"<dim>expect(</>received</><dim>).</>resolves<dim>.</>toBeDefined<dim>()</>

<bold>Matcher error</>: received</> value must be a promise

Received has type:  array
Received has value: [1]</>"
`;

exports[`.resolves fails non-promise value [1] synchronously 1`] = `
"<dim>expect(</>received</><dim>).</>resolves<dim>.</>toBeDefined<dim>()</>

<bold>Matcher error</>: received</> value must be a promise

Received has type:  array
Received has value: [1]</>"
`;

exports[`.resolves fails non-promise value [Function anonymous] 1`] = `
"<dim>expect(</>received</><dim>).</>resolves<dim>.</>toBeDefined<dim>()</>

<bold>Matcher error</>: received</> value must be a promise

Received has type:  function
Received has value: [Function anonymous]</>"
`;

exports[`.resolves fails non-promise value [Function anonymous] synchronously 1`] = `
"<dim>expect(</>received</><dim>).</>resolves<dim>.</>toBeDefined<dim>()</>

<bold>Matcher error</>: received</> value must be a promise

Received has type:  function
Received has value: [Function anonymous]</>"
`;

exports[`.resolves fails non-promise value {"a": 1} 1`] = `
"<dim>expect(</>received</><dim>).</>resolves<dim>.</>toBeDefined<dim>()</>

<bold>Matcher error</>: received</> value must be a promise

Received has type:  object
Received has value: {\\"a\\": 1}</>"
`;

exports[`.resolves fails non-promise value {"a": 1} synchronously 1`] = `
"<dim>expect(</>received</><dim>).</>resolves<dim>.</>toBeDefined<dim>()</>

<bold>Matcher error</>: received</> value must be a promise

Received has type:  object
Received has value: {\\"a\\": 1}</>"
`;

exports[`.resolves fails non-promise value 4 1`] = `
"<dim>expect(</>received</><dim>).</>resolves<dim>.</>not<dim>.</>toBeDefined<dim>()</>

<bold>Matcher error</>: received</> value must be a promise

Received has type:  number
Received has value: 4</>"
`;

exports[`.resolves fails non-promise value 4 synchronously 1`] = `
"<dim>expect(</>received</><dim>).</>resolves<dim>.</>not<dim>.</>toBeDefined<dim>()</>

<bold>Matcher error</>: received</> value must be a promise

Received has type:  number
Received has value: 4</>"
`;

exports[`.resolves fails non-promise value null 1`] = `
"<dim>expect(</>received</><dim>).</>resolves<dim>.</>not<dim>.</>toBeDefined<dim>()</>

<bold>Matcher error</>: received</> value must be a promise

Received has value: null</>"
`;

exports[`.resolves fails non-promise value null synchronously 1`] = `
"<dim>expect(</>received</><dim>).</>resolves<dim>.</>not<dim>.</>toBeDefined<dim>()</>

<bold>Matcher error</>: received</> value must be a promise

Received has value: null</>"
`;

exports[`.resolves fails non-promise value true 1`] = `
"<dim>expect(</>received</><dim>).</>resolves<dim>.</>not<dim>.</>toBeDefined<dim>()</>

<bold>Matcher error</>: received</> value must be a promise

Received has type:  boolean
Received has value: true</>"
`;

exports[`.resolves fails non-promise value true synchronously 1`] = `
"<dim>expect(</>received</><dim>).</>resolves<dim>.</>not<dim>.</>toBeDefined<dim>()</>

<bold>Matcher error</>: received</> value must be a promise

Received has type:  boolean
Received has value: true</>"
`;

exports[`.resolves fails non-promise value undefined 1`] = `
"<dim>expect(</>received</><dim>).</>resolves<dim>.</>not<dim>.</>toBeDefined<dim>()</>

<bold>Matcher error</>: received</> value must be a promise

Received has value: undefined</>"
`;

exports[`.resolves fails non-promise value undefined synchronously 1`] = `
"<dim>expect(</>received</><dim>).</>resolves<dim>.</>not<dim>.</>toBeDefined<dim>()</>

<bold>Matcher error</>: received</> value must be a promise

Received has value: undefined</>"
`;

exports[`.toBe() does not crash on circular references 1`] = `
"<dim>expect(</>received</><dim>).</>toBe<dim>(</><green>expected</><dim>) // Object.is equality</>

<red>- Expected</>
+ Received</>

<red>- Object {}</>
+ Object {</>
+   \\"circular\\": [Circular],</>
+ }</>"
`;

exports[`.toBe() fails for '"a"' with '.not' 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBe<dim>(</><green>expected</><dim>) // Object.is equality</>

Expected: not <green>\\"a\\"</>"
`;

exports[`.toBe() fails for '[]' with '.not' 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBe<dim>(</><green>expected</><dim>) // Object.is equality</>

Expected: not <green>[]</>"
`;

exports[`.toBe() fails for '{}' with '.not' 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBe<dim>(</><green>expected</><dim>) // Object.is equality</>

Expected: not <green>{}</>"
`;

exports[`.toBe() fails for '1' with '.not' 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBe<dim>(</><green>expected</><dim>) // Object.is equality</>

Expected: not <green>1</>"
`;

exports[`.toBe() fails for 'false' with '.not' 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBe<dim>(</><green>expected</><dim>) // Object.is equality</>

Expected: not <green>false</>"
`;

exports[`.toBe() fails for 'null' with '.not' 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBe<dim>(</><green>expected</><dim>) // Object.is equality</>

Expected: not <green>null</>"
`;

exports[`.toBe() fails for 'undefined' with '.not' 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBe<dim>(</><green>expected</><dim>) // Object.is equality</>

Expected: not <green>undefined</>"
`;

exports[`.toBe() fails for: "" and "compare one-line string to empty string" 1`] = `
"<dim>expect(</>received</><dim>).</>toBe<dim>(</><green>expected</><dim>) // Object.is equality</>

Expected: <green>\\"compare one-line string to empty string\\"</>
Received: \\"\\"</>"
`;

exports[`.toBe() fails for: "abc" and "cde" 1`] = `
"<dim>expect(</>received</><dim>).</>toBe<dim>(</><green>expected</><dim>) // Object.is equality</>

Expected: <green>\\"cde\\"</>
Received: \\"abc\\"</>"
`;

exports[`.toBe() fails for: "four
4
line
string" and "3
line
string" 1`] = `
"<dim>expect(</>received</><dim>).</>toBe<dim>(</><green>expected</><dim>) // Object.is equality</>

<red>- Expected</>
+ Received</>

<red>- <inverse>3</></>
+ <inverse>four</></>
+ <inverse>4</></>
<dim>  line</>
<dim>  string</>"
`;

exports[`.toBe() fails for: "painless JavaScript testing" and "delightful JavaScript testing" 1`] = `
"<dim>expect(</>received</><dim>).</>toBe<dim>(</><green>expected</><dim>) // Object.is equality</>

Expected: <green>\\"<inverse>delightful</> JavaScript testing\\"</>
Received: \\"<inverse>painless</> JavaScript testing\\"</>"
`;

exports[`.toBe() fails for: "with 
trailing space" and "without trailing space" 1`] = `
"<dim>expect(</>received</><dim>).</>toBe<dim>(</><green>expected</><dim>) // Object.is equality</>

<red>- Expected</>
+ Received</>

<red>- with<inverse>out</> trailing space</>
+ withÂ·</>
+ trailing space</>"
`;

exports[`.toBe() fails for: /received/ and /expected/ 1`] = `
"<dim>expect(</>received</><dim>).</>toBe<dim>(</><green>expected</><dim>) // Object.is equality</>

Expected: <green>/expected/</>
Received: /received/</>"
`;

exports[`.toBe() fails for: [] and [] 1`] = `
"<dim>expect(</>received</><dim>).</>toBe<dim>(</><green>expected</><dim>) // Object.is equality</>

<dim>If it should pass with deep equality, replace \\"toBe\\" with \\"toStrictEqual\\"</>

Expected: <green>[]</>
Received: serializes to the same string"
`;

exports[`.toBe() fails for: [Error: received] and [Error: expected] 1`] = `
"<dim>expect(</>received</><dim>).</>toBe<dim>(</><green>expected</><dim>) // Object.is equality</>

Expected: <green>[Error: expected]</>
Received: [Error: received]</>"
`;

exports[`.toBe() fails for: [Function anonymous] and [Function anonymous] 1`] = `
"<dim>expect(</>received</><dim>).</>toBe<dim>(</><green>expected</><dim>) // Object.is equality</>

Expected: <green>[Function anonymous]</>
Received: serializes to the same string"
`;

exports[`.toBe() fails for: {"a": [Function a], "b": 2} and {"a": Any<Function>, "b": 2} 1`] = `
"<dim>expect(</>received</><dim>).</>toBe<dim>(</><green>expected</><dim>) // Object.is equality</>

<dim>If it should pass with deep equality, replace \\"toBe\\" with \\"toStrictEqual\\"</>

<red>- Expected</>
+ Received</>

<dim>  Object {</>
<red>-   \\"a\\": Any<Function>,</>
+   \\"a\\": [Function a],</>
<dim>    \\"b\\": 2,</>
<dim>  }</>"
`;

exports[`.toBe() fails for: {"a": 1} and {"a": 1} 1`] = `
"<dim>expect(</>received</><dim>).</>toBe<dim>(</><green>expected</><dim>) // Object.is equality</>

<dim>If it should pass with deep equality, replace \\"toBe\\" with \\"toStrictEqual\\"</>

Expected: <green>{\\"a\\": 1}</>
Received: serializes to the same string"
`;

exports[`.toBe() fails for: {"a": 1} and {"a": 5} 1`] = `
"<dim>expect(</>received</><dim>).</>toBe<dim>(</><green>expected</><dim>) // Object.is equality</>

<red>- Expected</>
+ Received</>

<dim>  Object {</>
<red>-   \\"a\\": 5,</>
+   \\"a\\": 1,</>
<dim>  }</>"
`;

exports[`.toBe() fails for: {"a": undefined, "b": 2} and {"b": 2} 1`] = `
"<dim>expect(</>received</><dim>).</>toBe<dim>(</><green>expected</><dim>) // Object.is equality</>

<dim>If it should pass with deep equality, replace \\"toBe\\" with \\"toEqual\\"</>

<red>- Expected</>
+ Received</>

<dim>  Object {</>
+   \\"a\\": undefined,</>
<dim>    \\"b\\": 2,</>
<dim>  }</>"
`;

exports[`.toBe() fails for: {} and {} 1`] = `
"<dim>expect(</>received</><dim>).</>toBe<dim>(</><green>expected</><dim>) // Object.is equality</>

<dim>If it should pass with deep equality, replace \\"toBe\\" with \\"toStrictEqual\\"</>

Expected: <green>{}</>
Received: serializes to the same string"
`;

exports[`.toBe() fails for: -0 and 0 1`] = `
"<dim>expect(</>received</><dim>).</>toBe<dim>(</><green>expected</><dim>) // Object.is equality</>

Expected: <green>0</>
Received: -0</>"
`;

exports[`.toBe() fails for: 1 and 2 1`] = `
"<dim>expect(</>received</><dim>).</>toBe<dim>(</><green>expected</><dim>) // Object.is equality</>

Expected: <green>2</>
Received: 1</>"
`;

exports[`.toBe() fails for: 2020-02-20T00:00:00.000Z and 2020-02-20T00:00:00.000Z 1`] = `
"<dim>expect(</>received</><dim>).</>toBe<dim>(</><green>expected</><dim>) // Object.is equality</>

<dim>If it should pass with deep equality, replace \\"toBe\\" with \\"toStrictEqual\\"</>

Expected: <green>2020-02-20T00:00:00.000Z</>
Received: serializes to the same string"
`;

exports[`.toBe() fails for: 2020-02-21T00:00:00.000Z and 2020-02-20T00:00:00.000Z 1`] = `
"<dim>expect(</>received</><dim>).</>toBe<dim>(</><green>expected</><dim>) // Object.is equality</>

Expected: <green>2020-02-20T00:00:00.000Z</>
Received: 2020-02-21T00:00:00.000Z</>"
`;

exports[`.toBe() fails for: Symbol(received) and Symbol(expected) 1`] = `
"<dim>expect(</>received</><dim>).</>toBe<dim>(</><green>expected</><dim>) // Object.is equality</>

Expected: <green>Symbol(expected)</>
Received: Symbol(received)</>"
`;

exports[`.toBe() fails for: null and undefined 1`] = `
"<dim>expect(</>received</><dim>).</>toBe<dim>(</><green>expected</><dim>) // Object.is equality</>

Expected: <green>undefined</>
Received: null</>"
`;

exports[`.toBe() fails for: true and false 1`] = `
"<dim>expect(</>received</><dim>).</>toBe<dim>(</><green>expected</><dim>) // Object.is equality</>

Expected: <green>false</>
Received: true</>"
`;

exports[`.toBeCloseTo() {pass: false} expect(-Infinity)toBeCloseTo( -1.23) 1`] = `
"<dim>expect(</>received</><dim>).</>toBeCloseTo<dim>(</><green>expected</><dim>)</>

Expected: <green>-1.23</>
Received: -Infinity</>

Expected precision:    <green>2</>
Expected difference: < <green>0.005</>
Received difference:   Infinity</>"
`;

exports[`.toBeCloseTo() {pass: false} expect(Infinity)toBeCloseTo( -Infinity) 1`] = `
"<dim>expect(</>received</><dim>).</>toBeCloseTo<dim>(</><green>expected</><dim>)</>

Expected: <green>-Infinity</>
Received: Infinity</>

Expected precision:    <green>2</>
Expected difference: < <green>0.005</>
Received difference:   Infinity</>"
`;

exports[`.toBeCloseTo() {pass: false} expect(Infinity)toBeCloseTo( 1.23) 1`] = `
"<dim>expect(</>received</><dim>).</>toBeCloseTo<dim>(</><green>expected</><dim>)</>

Expected: <green>1.23</>
Received: Infinity</>

Expected precision:    <green>2</>
Expected difference: < <green>0.005</>
Received difference:   Infinity</>"
`;

exports[`.toBeCloseTo() {pass: true} expect(-Infinity)toBeCloseTo( -Infinity) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeCloseTo<dim>(</><green>expected</><dim>)</>

Expected: not <green>-Infinity</>
"
`;

exports[`.toBeCloseTo() {pass: true} expect(0)toBeCloseTo( 0) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeCloseTo<dim>(</><green>expected</><dim>)</>

Expected: not <green>0</>
"
`;

exports[`.toBeCloseTo() {pass: true} expect(0)toBeCloseTo( 0.001) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeCloseTo<dim>(</><green>expected</><dim>)</>

Expected: not <green>0.001</>
Received:     0</>

Expected precision:        <green>2</>
Expected difference: not < <green>0.005</>
Received difference:       0.001</>"
`;

exports[`.toBeCloseTo() {pass: true} expect(1.23)toBeCloseTo( 1.225) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeCloseTo<dim>(</><green>expected</><dim>)</>

Expected: not <green>1.225</>
Received:     1.23</>

Expected precision:        <green>2</>
Expected difference: not < <green>0.005</>
Received difference:       0.004999999999999893</>"
`;

exports[`.toBeCloseTo() {pass: true} expect(1.23)toBeCloseTo( 1.226) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeCloseTo<dim>(</><green>expected</><dim>)</>

Expected: not <green>1.226</>
Received:     1.23</>

Expected precision:        <green>2</>
Expected difference: not < <green>0.005</>
Received difference:       0.0040000000000000036</>"
`;

exports[`.toBeCloseTo() {pass: true} expect(1.23)toBeCloseTo( 1.229) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeCloseTo<dim>(</><green>expected</><dim>)</>

Expected: not <green>1.229</>
Received:     1.23</>

Expected precision:        <green>2</>
Expected difference: not < <green>0.005</>
Received difference:       0.0009999999999998899</>"
`;

exports[`.toBeCloseTo() {pass: true} expect(1.23)toBeCloseTo( 1.234) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeCloseTo<dim>(</><green>expected</><dim>)</>

Expected: not <green>1.234</>
Received:     1.23</>

Expected precision:        <green>2</>
Expected difference: not < <green>0.005</>
Received difference:       0.0040000000000000036</>"
`;

exports[`.toBeCloseTo() {pass: true} expect(Infinity)toBeCloseTo( Infinity) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeCloseTo<dim>(</><green>expected</><dim>)</>

Expected: not <green>Infinity</>
"
`;

exports[`.toBeCloseTo() accepts an optional precision argument: [0, 0.000004, 5] 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeCloseTo<dim>(</><green>expected</><dim>, </><green>precision</><dim>)</>

Expected: not <green>0.000004</>
Received:     0</>

Expected precision:        <green>5</>
Expected difference: not < <green>0.000005</>
Received difference:       0.000004</>"
`;

exports[`.toBeCloseTo() accepts an optional precision argument: [0, 0.0001, 3] 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeCloseTo<dim>(</><green>expected</><dim>, </><green>precision</><dim>)</>

Expected: not <green>0.0001</>
Received:     0</>

Expected precision:        <green>3</>
Expected difference: not < <green>0.0005</>
Received difference:       0.0001</>"
`;

exports[`.toBeCloseTo() accepts an optional precision argument: [0, 0.1, 0] 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeCloseTo<dim>(</><green>expected</><dim>, </><green>precision</><dim>)</>

Expected: not <green>0.1</>
Received:     0</>

Expected precision:        <green>0</>
Expected difference: not < <green>0.5</>
Received difference:       0.1</>"
`;

exports[`.toBeCloseTo() throws: [0, 0.01] 1`] = `
"<dim>expect(</>received</><dim>).</>toBeCloseTo<dim>(</><green>expected</><dim>)</>

Expected: <green>0.01</>
Received: 0</>

Expected precision:    <green>2</>
Expected difference: < <green>0.005</>
Received difference:   0.01</>"
`;

exports[`.toBeCloseTo() throws: [1, 1.23] 1`] = `
"<dim>expect(</>received</><dim>).</>toBeCloseTo<dim>(</><green>expected</><dim>)</>

Expected: <green>1.23</>
Received: 1</>

Expected precision:    <green>2</>
Expected difference: < <green>0.005</>
Received difference:   0.22999999999999998</>"
`;

exports[`.toBeCloseTo() throws: [1.23, 1.2249999] 1`] = `
"<dim>expect(</>received</><dim>).</>toBeCloseTo<dim>(</><green>expected</><dim>)</>

Expected: <green>1.2249999</>
Received: 1.23</>

Expected precision:    <green>2</>
Expected difference: < <green>0.005</>
Received difference:   0.005000099999999952</>"
`;

exports[`.toBeCloseTo() throws: Matcher error promise empty isNot false received 1`] = `
"<dim>expect(</>received</><dim>).</>toBeCloseTo<dim>(</><green>expected</><dim>, </><green>precision</><dim>)</>

<bold>Matcher error</>: received</> value must be a number

Received has type:  string
Received has value: \\"\\"</>"
`;

exports[`.toBeCloseTo() throws: Matcher error promise empty isNot true expected 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeCloseTo<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a number

Expected has value: <green>undefined</>"
`;

exports[`.toBeCloseTo() throws: Matcher error promise rejects isNot false expected 1`] = `
"<dim>expect(</>received</><dim>).</>rejects<dim>.</>toBeCloseTo<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a number

Expected has type:  string
Expected has value: <green>\\"0\\"</>"
`;

exports[`.toBeCloseTo() throws: Matcher error promise rejects isNot true received 1`] = `
"<dim>expect(</>received</><dim>).</>rejects<dim>.</>not<dim>.</>toBeCloseTo<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: received</> value must be a number

Received has type:  symbol
Received has value: Symbol(0.1)</>"
`;

exports[`.toBeCloseTo() throws: Matcher error promise resolves isNot false received 1`] = `
"<dim>expect(</>received</><dim>).</>resolves<dim>.</>toBeCloseTo<dim>(</><green>expected</><dim>, </><green>precision</><dim>)</>

<bold>Matcher error</>: received</> value must be a number

Received has type:  boolean
Received has value: false</>"
`;

exports[`.toBeCloseTo() throws: Matcher error promise resolves isNot true expected 1`] = `
"<dim>expect(</>received</><dim>).</>resolves<dim>.</>not<dim>.</>toBeCloseTo<dim>(</><green>expected</><dim>, </><green>precision</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a number

Expected has value: <green>null</>"
`;

exports[`.toBeDefined(), .toBeUndefined() '"a"' is defined 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeDefined<dim>()</>

Received: \\"a\\"</>"
`;

exports[`.toBeDefined(), .toBeUndefined() '"a"' is defined 2`] = `
"<dim>expect(</>received</><dim>).</>toBeUndefined<dim>()</>

Received: \\"a\\"</>"
`;

exports[`.toBeDefined(), .toBeUndefined() '[]' is defined 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeDefined<dim>()</>

Received: []</>"
`;

exports[`.toBeDefined(), .toBeUndefined() '[]' is defined 2`] = `
"<dim>expect(</>received</><dim>).</>toBeUndefined<dim>()</>

Received: []</>"
`;

exports[`.toBeDefined(), .toBeUndefined() '[Function anonymous]' is defined 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeDefined<dim>()</>

Received: [Function anonymous]</>"
`;

exports[`.toBeDefined(), .toBeUndefined() '[Function anonymous]' is defined 2`] = `
"<dim>expect(</>received</><dim>).</>toBeUndefined<dim>()</>

Received: [Function anonymous]</>"
`;

exports[`.toBeDefined(), .toBeUndefined() '{}' is defined 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeDefined<dim>()</>

Received: {}</>"
`;

exports[`.toBeDefined(), .toBeUndefined() '{}' is defined 2`] = `
"<dim>expect(</>received</><dim>).</>toBeUndefined<dim>()</>

Received: {}</>"
`;

exports[`.toBeDefined(), .toBeUndefined() '0.5' is defined 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeDefined<dim>()</>

Received: 0.5</>"
`;

exports[`.toBeDefined(), .toBeUndefined() '0.5' is defined 2`] = `
"<dim>expect(</>received</><dim>).</>toBeUndefined<dim>()</>

Received: 0.5</>"
`;

exports[`.toBeDefined(), .toBeUndefined() '1' is defined 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeDefined<dim>()</>

Received: 1</>"
`;

exports[`.toBeDefined(), .toBeUndefined() '1' is defined 2`] = `
"<dim>expect(</>received</><dim>).</>toBeUndefined<dim>()</>

Received: 1</>"
`;

exports[`.toBeDefined(), .toBeUndefined() 'Infinity' is defined 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeDefined<dim>()</>

Received: Infinity</>"
`;

exports[`.toBeDefined(), .toBeUndefined() 'Infinity' is defined 2`] = `
"<dim>expect(</>received</><dim>).</>toBeUndefined<dim>()</>

Received: Infinity</>"
`;

exports[`.toBeDefined(), .toBeUndefined() 'Map {}' is defined 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeDefined<dim>()</>

Received: Map {}</>"
`;

exports[`.toBeDefined(), .toBeUndefined() 'Map {}' is defined 2`] = `
"<dim>expect(</>received</><dim>).</>toBeUndefined<dim>()</>

Received: Map {}</>"
`;

exports[`.toBeDefined(), .toBeUndefined() 'true' is defined 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeDefined<dim>()</>

Received: true</>"
`;

exports[`.toBeDefined(), .toBeUndefined() 'true' is defined 2`] = `
"<dim>expect(</>received</><dim>).</>toBeUndefined<dim>()</>

Received: true</>"
`;

exports[`.toBeDefined(), .toBeUndefined() undefined is undefined 1`] = `
"<dim>expect(</>received</><dim>).</>toBeDefined<dim>()</>

Received: undefined</>"
`;

exports[`.toBeDefined(), .toBeUndefined() undefined is undefined 2`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeUndefined<dim>()</>

Received: undefined</>"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() equal numbers: [-Infinity, -Infinity] 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeGreaterThanOrEqual<dim>(</><green>expected</><dim>)</>

Expected: not >= <green>-Infinity</>
Received:        -Infinity</>"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() equal numbers: [-Infinity, -Infinity] 2`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeLessThanOrEqual<dim>(</><green>expected</><dim>)</>

Expected: not <= <green>-Infinity</>
Received:        -Infinity</>"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() equal numbers: [1, 1] 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeGreaterThanOrEqual<dim>(</><green>expected</><dim>)</>

Expected: not >= <green>1</>
Received:        1</>"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() equal numbers: [1, 1] 2`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeLessThanOrEqual<dim>(</><green>expected</><dim>)</>

Expected: not <= <green>1</>
Received:        1</>"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() equal numbers: [1.7976931348623157e+308, 1.7976931348623157e+308] 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeGreaterThanOrEqual<dim>(</><green>expected</><dim>)</>

Expected: not >= <green>1.7976931348623157e+308</>
Received:        1.7976931348623157e+308</>"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() equal numbers: [1.7976931348623157e+308, 1.7976931348623157e+308] 2`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeLessThanOrEqual<dim>(</><green>expected</><dim>)</>

Expected: not <= <green>1.7976931348623157e+308</>
Received:        1.7976931348623157e+308</>"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() equal numbers: [5e-324, 5e-324] 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeGreaterThanOrEqual<dim>(</><green>expected</><dim>)</>

Expected: not >= <green>5e-324</>
Received:        5e-324</>"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() equal numbers: [5e-324, 5e-324] 2`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeLessThanOrEqual<dim>(</><green>expected</><dim>)</>

Expected: not <= <green>5e-324</>
Received:        5e-324</>"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() equal numbers: [Infinity, Infinity] 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeGreaterThanOrEqual<dim>(</><green>expected</><dim>)</>

Expected: not >= <green>Infinity</>
Received:        Infinity</>"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() equal numbers: [Infinity, Infinity] 2`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeLessThanOrEqual<dim>(</><green>expected</><dim>)</>

Expected: not <= <green>Infinity</>
Received:        Infinity</>"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [-Infinity, Infinity] 1`] = `
"<dim>expect(</>received</><dim>).</>toBeGreaterThan<dim>(</><green>expected</><dim>)</>

Expected: > <green>Infinity</>
Received:   -Infinity</>"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [-Infinity, Infinity] 2`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeLessThan<dim>(</><green>expected</><dim>)</>

Expected: not < <green>Infinity</>
Received:       -Infinity</>"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [-Infinity, Infinity] 3`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeGreaterThan<dim>(</><green>expected</><dim>)</>

Expected: not > <green>-Infinity</>
Received:       Infinity</>"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [-Infinity, Infinity] 4`] = `
"<dim>expect(</>received</><dim>).</>toBeLessThan<dim>(</><green>expected</><dim>)</>

Expected: < <green>-Infinity</>
Received:   Infinity</>"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [-Infinity, Infinity] 5`] = `
"<dim>expect(</>received</><dim>).</>toBeGreaterThanOrEqual<dim>(</><green>expected</><dim>)</>

Expected: >= <green>Infinity</>
Received:    -Infinity</>"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [-Infinity, Infinity] 6`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeLessThanOrEqual<dim>(</><green>expected</><dim>)</>

Expected: not <= <green>Infinity</>
Received:        -Infinity</>"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [-Infinity, Infinity] 7`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeGreaterThanOrEqual<dim>(</><green>expected</><dim>)</>

Expected: not >= <green>-Infinity</>
Received:        Infinity</>"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [-Infinity, Infinity] 8`] = `
"<dim>expect(</>received</><dim>).</>toBeLessThanOrEqual<dim>(</><green>expected</><dim>)</>

Expected: <= <green>-Infinity</>
Received:    Infinity</>"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [0.1, 0.2] 1`] = `
"<dim>expect(</>received</><dim>).</>toBeGreaterThan<dim>(</><green>expected</><dim>)</>

Expected: > <green>0.2</>
Received:   0.1</>"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [0.1, 0.2] 2`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeLessThan<dim>(</><green>expected</><dim>)</>

Expected: not < <green>0.2</>
Received:       0.1</>"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [0.1, 0.2] 3`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeGreaterThan<dim>(</><green>expected</><dim>)</>

Expected: not > <green>0.1</>
Received:       0.2</>"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [0.1, 0.2] 4`] = `
"<dim>expect(</>received</><dim>).</>toBeLessThan<dim>(</><green>expected</><dim>)</>

Expected: < <green>0.1</>
Received:   0.2</>"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [0.1, 0.2] 5`] = `
"<dim>expect(</>received</><dim>).</>toBeGreaterThanOrEqual<dim>(</><green>expected</><dim>)</>

Expected: >= <green>0.2</>
Received:    0.1</>"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [0.1, 0.2] 6`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeLessThanOrEqual<dim>(</><green>expected</><dim>)</>

Expected: not <= <green>0.2</>
Received:        0.1</>"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [0.1, 0.2] 7`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeGreaterThanOrEqual<dim>(</><green>expected</><dim>)</>

Expected: not >= <green>0.1</>
Received:        0.2</>"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [0.1, 0.2] 8`] = `
"<dim>expect(</>received</><dim>).</>toBeLessThanOrEqual<dim>(</><green>expected</><dim>)</>

Expected: <= <green>0.1</>
Received:    0.2</>"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [1, 2] 1`] = `
"<dim>expect(</>received</><dim>).</>toBeGreaterThan<dim>(</><green>expected</><dim>)</>

Expected: > <green>2</>
Received:   1</>"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [1, 2] 2`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeLessThan<dim>(</><green>expected</><dim>)</>

Expected: not < <green>2</>
Received:       1</>"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [1, 2] 3`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeGreaterThan<dim>(</><green>expected</><dim>)</>

Expected: not > <green>1</>
Received:       2</>"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [1, 2] 4`] = `
"<dim>expect(</>received</><dim>).</>toBeLessThan<dim>(</><green>expected</><dim>)</>

Expected: < <green>1</>
Received:   2</>"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [1, 2] 5`] = `
"<dim>expect(</>received</><dim>).</>toBeGreaterThanOrEqual<dim>(</><green>expected</><dim>)</>

Expected: >= <green>2</>
Received:    1</>"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [1, 2] 6`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeLessThanOrEqual<dim>(</><green>expected</><dim>)</>

Expected: not <= <green>2</>
Received:        1</>"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [1, 2] 7`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeGreaterThanOrEqual<dim>(</><green>expected</><dim>)</>

Expected: not >= <green>1</>
Received:        2</>"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [1, 2] 8`] = `
"<dim>expect(</>received</><dim>).</>toBeLessThanOrEqual<dim>(</><green>expected</><dim>)</>

Expected: <= <green>1</>
Received:    2</>"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [3, 7] 1`] = `
"<dim>expect(</>received</><dim>).</>toBeGreaterThan<dim>(</><green>expected</><dim>)</>

Expected: > <green>7</>
Received:   3</>"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [3, 7] 2`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeLessThan<dim>(</><green>expected</><dim>)</>

Expected: not < <green>7</>
Received:       3</>"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [3, 7] 3`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeGreaterThan<dim>(</><green>expected</><dim>)</>

Expected: not > <green>3</>
Received:       7</>"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [3, 7] 4`] = `
"<dim>expect(</>received</><dim>).</>toBeLessThan<dim>(</><green>expected</><dim>)</>

Expected: < <green>3</>
Received:   7</>"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [3, 7] 5`] = `
"<dim>expect(</>received</><dim>).</>toBeGreaterThanOrEqual<dim>(</><green>expected</><dim>)</>

Expected: >= <green>7</>
Received:    3</>"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [3, 7] 6`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeLessThanOrEqual<dim>(</><green>expected</><dim>)</>

Expected: not <= <green>7</>
Received:        3</>"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [3, 7] 7`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeGreaterThanOrEqual<dim>(</><green>expected</><dim>)</>

Expected: not >= <green>3</>
Received:        7</>"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [3, 7] 8`] = `
"<dim>expect(</>received</><dim>).</>toBeLessThanOrEqual<dim>(</><green>expected</><dim>)</>

Expected: <= <green>3</>
Received:    7</>"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [5e-324, 1.7976931348623157e+308] 1`] = `
"<dim>expect(</>received</><dim>).</>toBeGreaterThan<dim>(</><green>expected</><dim>)</>

Expected: > <green>1.7976931348623157e+308</>
Received:   5e-324</>"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [5e-324, 1.7976931348623157e+308] 2`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeLessThan<dim>(</><green>expected</><dim>)</>

Expected: not < <green>1.7976931348623157e+308</>
Received:       5e-324</>"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [5e-324, 1.7976931348623157e+308] 3`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeGreaterThan<dim>(</><green>expected</><dim>)</>

Expected: not > <green>5e-324</>
Received:       1.7976931348623157e+308</>"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [5e-324, 1.7976931348623157e+308] 4`] = `
"<dim>expect(</>received</><dim>).</>toBeLessThan<dim>(</><green>expected</><dim>)</>

Expected: < <green>5e-324</>
Received:   1.7976931348623157e+308</>"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [5e-324, 1.7976931348623157e+308] 5`] = `
"<dim>expect(</>received</><dim>).</>toBeGreaterThanOrEqual<dim>(</><green>expected</><dim>)</>

Expected: >= <green>1.7976931348623157e+308</>
Received:    5e-324</>"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [5e-324, 1.7976931348623157e+308] 6`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeLessThanOrEqual<dim>(</><green>expected</><dim>)</>

Expected: not <= <green>1.7976931348623157e+308</>
Received:        5e-324</>"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [5e-324, 1.7976931348623157e+308] 7`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeGreaterThanOrEqual<dim>(</><green>expected</><dim>)</>

Expected: not >= <green>5e-324</>
Received:        1.7976931348623157e+308</>"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [5e-324, 1.7976931348623157e+308] 8`] = `
"<dim>expect(</>received</><dim>).</>toBeLessThanOrEqual<dim>(</><green>expected</><dim>)</>

Expected: <= <green>5e-324</>
Received:    1.7976931348623157e+308</>"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [9, 18] 1`] = `
"<dim>expect(</>received</><dim>).</>toBeGreaterThan<dim>(</><green>expected</><dim>)</>

Expected: > <green>18</>
Received:   9</>"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [9, 18] 2`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeLessThan<dim>(</><green>expected</><dim>)</>

Expected: not < <green>18</>
Received:       9</>"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [9, 18] 3`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeGreaterThan<dim>(</><green>expected</><dim>)</>

Expected: not > <green>9</>
Received:       18</>"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [9, 18] 4`] = `
"<dim>expect(</>received</><dim>).</>toBeLessThan<dim>(</><green>expected</><dim>)</>

Expected: < <green>9</>
Received:   18</>"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [9, 18] 5`] = `
"<dim>expect(</>received</><dim>).</>toBeGreaterThanOrEqual<dim>(</><green>expected</><dim>)</>

Expected: >= <green>18</>
Received:    9</>"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [9, 18] 6`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeLessThanOrEqual<dim>(</><green>expected</><dim>)</>

Expected: not <= <green>18</>
Received:        9</>"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [9, 18] 7`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeGreaterThanOrEqual<dim>(</><green>expected</><dim>)</>

Expected: not >= <green>9</>
Received:        18</>"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [9, 18] 8`] = `
"<dim>expect(</>received</><dim>).</>toBeLessThanOrEqual<dim>(</><green>expected</><dim>)</>

Expected: <= <green>9</>
Received:    18</>"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [17, 34] 1`] = `
"<dim>expect(</>received</><dim>).</>toBeGreaterThan<dim>(</><green>expected</><dim>)</>

Expected: > <green>34</>
Received:   17</>"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [17, 34] 2`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeLessThan<dim>(</><green>expected</><dim>)</>

Expected: not < <green>34</>
Received:       17</>"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [17, 34] 3`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeGreaterThan<dim>(</><green>expected</><dim>)</>

Expected: not > <green>17</>
Received:       34</>"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [17, 34] 4`] = `
"<dim>expect(</>received</><dim>).</>toBeLessThan<dim>(</><green>expected</><dim>)</>

Expected: < <green>17</>
Received:   34</>"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [17, 34] 5`] = `
"<dim>expect(</>received</><dim>).</>toBeGreaterThanOrEqual<dim>(</><green>expected</><dim>)</>

Expected: >= <green>34</>
Received:    17</>"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [17, 34] 6`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeLessThanOrEqual<dim>(</><green>expected</><dim>)</>

Expected: not <= <green>34</>
Received:        17</>"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [17, 34] 7`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeGreaterThanOrEqual<dim>(</><green>expected</><dim>)</>

Expected: not >= <green>17</>
Received:        34</>"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [17, 34] 8`] = `
"<dim>expect(</>received</><dim>).</>toBeLessThanOrEqual<dim>(</><green>expected</><dim>)</>

Expected: <= <green>17</>
Received:    34</>"
`;

exports[`.toBeInstanceOf() failing "a" and [Function String] 1`] = `
"<dim>expect(</>received</><dim>).</>toBeInstanceOf<dim>(</><green>expected</><dim>)</>

Expected constructor: <green>String</>

Received value has no prototype
Received value: \\"a\\"</>"
`;

exports[`.toBeInstanceOf() failing /\\w+/ and [Function anonymous] 1`] = `
"<dim>expect(</>received</><dim>).</>toBeInstanceOf<dim>(</><green>expected</><dim>)</>

Expected constructor name is an empty string
Received constructor: RegExp</>
"
`;

exports[`.toBeInstanceOf() failing {} and [Function A] 1`] = `
"<dim>expect(</>received</><dim>).</>toBeInstanceOf<dim>(</><green>expected</><dim>)</>

Expected constructor: <green>A</>

Received value has no prototype
Received value: {}</>"
`;

exports[`.toBeInstanceOf() failing {} and [Function B] 1`] = `
"<dim>expect(</>received</><dim>).</>toBeInstanceOf<dim>(</><green>expected</><dim>)</>

Expected constructor: <green>B</>
Received constructor: A</>
"
`;

exports[`.toBeInstanceOf() failing {} and [Function RegExp] 1`] = `
"<dim>expect(</>received</><dim>).</>toBeInstanceOf<dim>(</><green>expected</><dim>)</>

Expected constructor: <green>RegExp</>
Received constructor name is an empty string
"
`;

exports[`.toBeInstanceOf() failing 1 and [Function Number] 1`] = `
"<dim>expect(</>received</><dim>).</>toBeInstanceOf<dim>(</><green>expected</><dim>)</>

Expected constructor: <green>Number</>

Received value has no prototype
Received value: 1</>"
`;

exports[`.toBeInstanceOf() failing null and [Function String] 1`] = `
"<dim>expect(</>received</><dim>).</>toBeInstanceOf<dim>(</><green>expected</><dim>)</>

Expected constructor: <green>String</>

Received value has no prototype
Received value: null</>"
`;

exports[`.toBeInstanceOf() failing true and [Function Boolean] 1`] = `
"<dim>expect(</>received</><dim>).</>toBeInstanceOf<dim>(</><green>expected</><dim>)</>

Expected constructor: <green>Boolean</>

Received value has no prototype
Received value: true</>"
`;

exports[`.toBeInstanceOf() failing undefined and [Function String] 1`] = `
"<dim>expect(</>received</><dim>).</>toBeInstanceOf<dim>(</><green>expected</><dim>)</>

Expected constructor: <green>String</>

Received value has no prototype
Received value: undefined</>"
`;

exports[`.toBeInstanceOf() passing [] and [Function Array] 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeInstanceOf<dim>(</><green>expected</><dim>)</>

Expected constructor: not <green>Array</>
"
`;

exports[`.toBeInstanceOf() passing {} and [Function A] 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeInstanceOf<dim>(</><green>expected</><dim>)</>

Expected constructor: not <green>A</>
"
`;

exports[`.toBeInstanceOf() passing {} and [Function B] 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeInstanceOf<dim>(</><green>expected</><dim>)</>

Expected constructor: not <green>B</>
Received constructor:     C</> extends <green>B</>
"
`;

exports[`.toBeInstanceOf() passing {} and [Function B] 2`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeInstanceOf<dim>(</><green>expected</><dim>)</>

Expected constructor: not <green>B</>
Received constructor:     E</> extends â¦ extends <green>B</>
"
`;

exports[`.toBeInstanceOf() passing {} and [Function B] 3`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeInstanceOf<dim>(</><green>expected</><dim>)</>

Expected constructor: not <green>B</>
Received constructor name is not a string
"
`;

exports[`.toBeInstanceOf() passing {} and [Function anonymous] 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeInstanceOf<dim>(</><green>expected</><dim>)</>

Expected constructor name is an empty string
Received constructor: SubHasNameProp</>
"
`;

exports[`.toBeInstanceOf() passing {} and [Function name() {}] 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeInstanceOf<dim>(</><green>expected</><dim>)</>

Expected constructor name is not a string
"
`;

exports[`.toBeInstanceOf() passing Map {} and [Function Map] 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeInstanceOf<dim>(</><green>expected</><dim>)</>

Expected constructor: not <green>Map</>
"
`;

exports[`.toBeInstanceOf() throws if constructor is not a function 1`] = `
"<dim>expect(</>received</><dim>).</>toBeInstanceOf<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a function

Expected has type:  number
Expected has value: <green>4</>"
`;

exports[`.toBeNaN() {pass: true} expect(NaN).toBeNaN() 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeNaN<dim>()</>

Received: NaN</>"
`;

exports[`.toBeNaN() {pass: true} expect(NaN).toBeNaN() 2`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeNaN<dim>()</>

Received: NaN</>"
`;

exports[`.toBeNaN() {pass: true} expect(NaN).toBeNaN() 3`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeNaN<dim>()</>

Received: NaN</>"
`;

exports[`.toBeNaN() {pass: true} expect(NaN).toBeNaN() 4`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeNaN<dim>()</>

Received: NaN</>"
`;

exports[`.toBeNaN() throws 1`] = `
"<dim>expect(</>received</><dim>).</>toBeNaN<dim>()</>

Received: 1</>"
`;

exports[`.toBeNaN() throws 2`] = `
"<dim>expect(</>received</><dim>).</>toBeNaN<dim>()</>

Received: \\"\\"</>"
`;

exports[`.toBeNaN() throws 3`] = `
"<dim>expect(</>received</><dim>).</>toBeNaN<dim>()</>

Received: null</>"
`;

exports[`.toBeNaN() throws 4`] = `
"<dim>expect(</>received</><dim>).</>toBeNaN<dim>()</>

Received: undefined</>"
`;

exports[`.toBeNaN() throws 5`] = `
"<dim>expect(</>received</><dim>).</>toBeNaN<dim>()</>

Received: {}</>"
`;

exports[`.toBeNaN() throws 6`] = `
"<dim>expect(</>received</><dim>).</>toBeNaN<dim>()</>

Received: []</>"
`;

exports[`.toBeNaN() throws 7`] = `
"<dim>expect(</>received</><dim>).</>toBeNaN<dim>()</>

Received: 0.2</>"
`;

exports[`.toBeNaN() throws 8`] = `
"<dim>expect(</>received</><dim>).</>toBeNaN<dim>()</>

Received: 0</>"
`;

exports[`.toBeNaN() throws 9`] = `
"<dim>expect(</>received</><dim>).</>toBeNaN<dim>()</>

Received: Infinity</>"
`;

exports[`.toBeNaN() throws 10`] = `
"<dim>expect(</>received</><dim>).</>toBeNaN<dim>()</>

Received: -Infinity</>"
`;

exports[`.toBeNull() fails for '"a"' 1`] = `
"<dim>expect(</>received</><dim>).</>toBeNull<dim>()</>

Received: \\"a\\"</>"
`;

exports[`.toBeNull() fails for '[]' 1`] = `
"<dim>expect(</>received</><dim>).</>toBeNull<dim>()</>

Received: []</>"
`;

exports[`.toBeNull() fails for '[Function anonymous]' 1`] = `
"<dim>expect(</>received</><dim>).</>toBeNull<dim>()</>

Received: [Function anonymous]</>"
`;

exports[`.toBeNull() fails for '{}' 1`] = `
"<dim>expect(</>received</><dim>).</>toBeNull<dim>()</>

Received: {}</>"
`;

exports[`.toBeNull() fails for '0.5' 1`] = `
"<dim>expect(</>received</><dim>).</>toBeNull<dim>()</>

Received: 0.5</>"
`;

exports[`.toBeNull() fails for '1' 1`] = `
"<dim>expect(</>received</><dim>).</>toBeNull<dim>()</>

Received: 1</>"
`;

exports[`.toBeNull() fails for 'Infinity' 1`] = `
"<dim>expect(</>received</><dim>).</>toBeNull<dim>()</>

Received: Infinity</>"
`;

exports[`.toBeNull() fails for 'Map {}' 1`] = `
"<dim>expect(</>received</><dim>).</>toBeNull<dim>()</>

Received: Map {}</>"
`;

exports[`.toBeNull() fails for 'true' 1`] = `
"<dim>expect(</>received</><dim>).</>toBeNull<dim>()</>

Received: true</>"
`;

exports[`.toBeNull() fails for null with .not 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeNull<dim>()</>

Received: null</>"
`;

exports[`.toBeTruthy(), .toBeFalsy() '""' is falsy 1`] = `
"<dim>expect(</>received</><dim>).</>toBeTruthy<dim>()</>

Received: \\"\\"</>"
`;

exports[`.toBeTruthy(), .toBeFalsy() '""' is falsy 2`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeFalsy<dim>()</>

Received: \\"\\"</>"
`;

exports[`.toBeTruthy(), .toBeFalsy() '"a"' is truthy 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeTruthy<dim>()</>

Received: \\"a\\"</>"
`;

exports[`.toBeTruthy(), .toBeFalsy() '"a"' is truthy 2`] = `
"<dim>expect(</>received</><dim>).</>toBeFalsy<dim>()</>

Received: \\"a\\"</>"
`;

exports[`.toBeTruthy(), .toBeFalsy() '[]' is truthy 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeTruthy<dim>()</>

Received: []</>"
`;

exports[`.toBeTruthy(), .toBeFalsy() '[]' is truthy 2`] = `
"<dim>expect(</>received</><dim>).</>toBeFalsy<dim>()</>

Received: []</>"
`;

exports[`.toBeTruthy(), .toBeFalsy() '[Function anonymous]' is truthy 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeTruthy<dim>()</>

Received: [Function anonymous]</>"
`;

exports[`.toBeTruthy(), .toBeFalsy() '[Function anonymous]' is truthy 2`] = `
"<dim>expect(</>received</><dim>).</>toBeFalsy<dim>()</>

Received: [Function anonymous]</>"
`;

exports[`.toBeTruthy(), .toBeFalsy() '{}' is truthy 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeTruthy<dim>()</>

Received: {}</>"
`;

exports[`.toBeTruthy(), .toBeFalsy() '{}' is truthy 2`] = `
"<dim>expect(</>received</><dim>).</>toBeFalsy<dim>()</>

Received: {}</>"
`;

exports[`.toBeTruthy(), .toBeFalsy() '0' is falsy 1`] = `
"<dim>expect(</>received</><dim>).</>toBeTruthy<dim>()</>

Received: 0</>"
`;

exports[`.toBeTruthy(), .toBeFalsy() '0' is falsy 2`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeFalsy<dim>()</>

Received: 0</>"
`;

exports[`.toBeTruthy(), .toBeFalsy() '0.5' is truthy 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeTruthy<dim>()</>

Received: 0.5</>"
`;

exports[`.toBeTruthy(), .toBeFalsy() '0.5' is truthy 2`] = `
"<dim>expect(</>received</><dim>).</>toBeFalsy<dim>()</>

Received: 0.5</>"
`;

exports[`.toBeTruthy(), .toBeFalsy() '1' is truthy 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeTruthy<dim>()</>

Received: 1</>"
`;

exports[`.toBeTruthy(), .toBeFalsy() '1' is truthy 2`] = `
"<dim>expect(</>received</><dim>).</>toBeFalsy<dim>()</>

Received: 1</>"
`;

exports[`.toBeTruthy(), .toBeFalsy() 'Infinity' is truthy 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeTruthy<dim>()</>

Received: Infinity</>"
`;

exports[`.toBeTruthy(), .toBeFalsy() 'Infinity' is truthy 2`] = `
"<dim>expect(</>received</><dim>).</>toBeFalsy<dim>()</>

Received: Infinity</>"
`;

exports[`.toBeTruthy(), .toBeFalsy() 'Map {}' is truthy 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeTruthy<dim>()</>

Received: Map {}</>"
`;

exports[`.toBeTruthy(), .toBeFalsy() 'Map {}' is truthy 2`] = `
"<dim>expect(</>received</><dim>).</>toBeFalsy<dim>()</>

Received: Map {}</>"
`;

exports[`.toBeTruthy(), .toBeFalsy() 'NaN' is falsy 1`] = `
"<dim>expect(</>received</><dim>).</>toBeTruthy<dim>()</>

Received: NaN</>"
`;

exports[`.toBeTruthy(), .toBeFalsy() 'NaN' is falsy 2`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeFalsy<dim>()</>

Received: NaN</>"
`;

exports[`.toBeTruthy(), .toBeFalsy() 'false' is falsy 1`] = `
"<dim>expect(</>received</><dim>).</>toBeTruthy<dim>()</>

Received: false</>"
`;

exports[`.toBeTruthy(), .toBeFalsy() 'false' is falsy 2`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeFalsy<dim>()</>

Received: false</>"
`;

exports[`.toBeTruthy(), .toBeFalsy() 'null' is falsy 1`] = `
"<dim>expect(</>received</><dim>).</>toBeTruthy<dim>()</>

Received: null</>"
`;

exports[`.toBeTruthy(), .toBeFalsy() 'null' is falsy 2`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeFalsy<dim>()</>

Received: null</>"
`;

exports[`.toBeTruthy(), .toBeFalsy() 'true' is truthy 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeTruthy<dim>()</>

Received: true</>"
`;

exports[`.toBeTruthy(), .toBeFalsy() 'true' is truthy 2`] = `
"<dim>expect(</>received</><dim>).</>toBeFalsy<dim>()</>

Received: true</>"
`;

exports[`.toBeTruthy(), .toBeFalsy() 'undefined' is falsy 1`] = `
"<dim>expect(</>received</><dim>).</>toBeTruthy<dim>()</>

Received: undefined</>"
`;

exports[`.toBeTruthy(), .toBeFalsy() 'undefined' is falsy 2`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeFalsy<dim>()</>

Received: undefined</>"
`;

exports[`.toBeTruthy(), .toBeFalsy() does not accept arguments 1`] = `
"<dim>expect(</>received</><dim>).</>toBeTruthy<dim>()</>

<bold>Matcher error</>: this matcher must not have an expected argument

Expected has value: <green>null</>"
`;

exports[`.toBeTruthy(), .toBeFalsy() does not accept arguments 2`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toBeFalsy<dim>()</>

<bold>Matcher error</>: this matcher must not have an expected argument

Expected has value: <green>null</>"
`;

exports[`.toContain(), .toContainEqual() '"11112111"' contains '"2"' 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toContain<dim>(</><green>expected</><dim>) // indexOf</>

Expected substring: not <green>\\"2\\"</>
Received string:        \\"1111<inverse>2</>111\\"</>"
`;

exports[`.toContain(), .toContainEqual() '"abcdef"' contains '"abc"' 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toContain<dim>(</><green>expected</><dim>) // indexOf</>

Expected substring: not <green>\\"abc\\"</>
Received string:        \\"<inverse>abc</>def\\"</>"
`;

exports[`.toContain(), .toContainEqual() '["a", "b", "c", "d"]' contains '"a"' 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toContain<dim>(</><green>expected</><dim>) // indexOf</>

Expected value: not <green>\\"a\\"</>
Received array:     [<inverse>\\"a\\"</>, \\"b\\", \\"c\\", \\"d\\"]</>"
`;

exports[`.toContain(), .toContainEqual() '["a", "b", "c", "d"]' contains a value equal to '"a"' 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toContainEqual<dim>(</><green>expected</><dim>) // deep equality</>

Expected value: not <green>\\"a\\"</>
Received array:     [<inverse>\\"a\\"</>, \\"b\\", \\"c\\", \\"d\\"]</>"
`;

exports[`.toContain(), .toContainEqual() '[{"a": "b"}, {"a": "c"}]' contains a value equal to '{"a": "b"}' 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toContainEqual<dim>(</><green>expected</><dim>) // deep equality</>

Expected value: not <green>{\\"a\\": \\"b\\"}</>
Received array:     [<inverse>{\\"a\\": \\"b\\"}</>, {\\"a\\": \\"c\\"}]</>"
`;

exports[`.toContain(), .toContainEqual() '[{"a": "b"}, {"a": "c"}]' does not contain a value equal to'{"a": "d"}' 1`] = `
"<dim>expect(</>received</><dim>).</>toContainEqual<dim>(</><green>expected</><dim>) // deep equality</>

Expected value: <green>{\\"a\\": \\"d\\"}</>
Received array: [{\\"a\\": \\"b\\"}, {\\"a\\": \\"c\\"}]</>"
`;

exports[`.toContain(), .toContainEqual() '[{}, []]' does not contain '[]' 1`] = `
"<dim>expect(</>received</><dim>).</>toContain<dim>(</><green>expected</><dim>) // indexOf</>

Expected value: <green>[]</>
Received array: [{}, []]</>

<dim>Looks like you wanted to test for object/array equality with the stricter \`toContain\` matcher. You probably need to use \`toContainEqual\` instead.</>"
`;

exports[`.toContain(), .toContainEqual() '[{}, []]' does not contain '{}' 1`] = `
"<dim>expect(</>received</><dim>).</>toContain<dim>(</><green>expected</><dim>) // indexOf</>

Expected value: <green>{}</>
Received array: [{}, []]</>

<dim>Looks like you wanted to test for object/array equality with the stricter \`toContain\` matcher. You probably need to use \`toContainEqual\` instead.</>"
`;

exports[`.toContain(), .toContainEqual() '[0, 1]' contains '1' 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toContain<dim>(</><green>expected</><dim>) // indexOf</>

Expected value:  not <green>1</>
Received object:     [0, 1]</>"
`;

exports[`.toContain(), .toContainEqual() '[0, 1]' contains a value equal to '1' 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toContainEqual<dim>(</><green>expected</><dim>) // deep equality</>

Expected value:  not <green>1</>
Received object:     [0, 1]</>"
`;

exports[`.toContain(), .toContainEqual() '[1, 2, 3, 4]' contains '1' 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toContain<dim>(</><green>expected</><dim>) // indexOf</>

Expected value: not <green>1</>
Received array:     [<inverse>1</>, 2, 3, 4]</>"
`;

exports[`.toContain(), .toContainEqual() '[1, 2, 3, 4]' contains a value equal to '1' 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toContainEqual<dim>(</><green>expected</><dim>) // deep equality</>

Expected value: not <green>1</>
Received array:     [<inverse>1</>, 2, 3, 4]</>"
`;

exports[`.toContain(), .toContainEqual() '[1, 2, 3]' does not contain '4' 1`] = `
"<dim>expect(</>received</><dim>).</>toContain<dim>(</><green>expected</><dim>) // indexOf</>

Expected value: <green>4</>
Received array: [1, 2, 3]</>"
`;

exports[`.toContain(), .toContainEqual() '[Symbol(a)]' contains 'Symbol(a)' 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toContain<dim>(</><green>expected</><dim>) // indexOf</>

Expected value: not <green>Symbol(a)</>
Received array:     [<inverse>Symbol(a)</>]</>"
`;

exports[`.toContain(), .toContainEqual() '[Symbol(a)]' contains a value equal to 'Symbol(a)' 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toContainEqual<dim>(</><green>expected</><dim>) // deep equality</>

Expected value: not <green>Symbol(a)</>
Received array:     [<inverse>Symbol(a)</>]</>"
`;

exports[`.toContain(), .toContainEqual() '[null, undefined]' does not contain '1' 1`] = `
"<dim>expect(</>received</><dim>).</>toContain<dim>(</><green>expected</><dim>) // indexOf</>

Expected value: <green>1</>
Received array: [null, undefined]</>"
`;

exports[`.toContain(), .toContainEqual() '[undefined, null]' contains 'null' 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toContain<dim>(</><green>expected</><dim>) // indexOf</>

Expected value: not <green>null</>
Received array:     [undefined, <inverse>null</>]</>"
`;

exports[`.toContain(), .toContainEqual() '[undefined, null]' contains 'undefined' 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toContain<dim>(</><green>expected</><dim>) // indexOf</>

Expected value: not <green>undefined</>
Received array:     [<inverse>undefined</>, null]</>"
`;

exports[`.toContain(), .toContainEqual() '[undefined, null]' contains a value equal to 'null' 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toContainEqual<dim>(</><green>expected</><dim>) // deep equality</>

Expected value: not <green>null</>
Received array:     [undefined, <inverse>null</>]</>"
`;

exports[`.toContain(), .toContainEqual() '[undefined, null]' contains a value equal to 'undefined' 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toContainEqual<dim>(</><green>expected</><dim>) // deep equality</>

Expected value: not <green>undefined</>
Received array:     [<inverse>undefined</>, null]</>"
`;

exports[`.toContain(), .toContainEqual() 'Set {"abc", "def"}' contains '"abc"' 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toContain<dim>(</><green>expected</><dim>) // indexOf</>

Expected value: not <green>\\"abc\\"</>
Received set:       Set {\\"abc\\", \\"def\\"}</>"
`;

exports[`.toContain(), .toContainEqual() 'Set {1, 2, 3, 4}' contains a value equal to '1' 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toContainEqual<dim>(</><green>expected</><dim>) // deep equality</>

Expected value: not <green>1</>
Received set:       Set {1, 2, 3, 4}</>"
`;

exports[`.toContain(), .toContainEqual() error cases 1`] = `
"<dim>expect(</>received</><dim>).</>toContain<dim>(</><green>expected</><dim>) // indexOf</>

<bold>Matcher error</>: received</> value must not be null nor undefined

Received has value: null</>"
`;

exports[`.toContain(), .toContainEqual() error cases for toContainEqual 1`] = `
"<dim>expect(</>received</><dim>).</>toContainEqual<dim>(</><green>expected</><dim>) // deep equality</>

<bold>Matcher error</>: received</> value must not be null nor undefined

Received has value: null</>"
`;

exports[`.toEqual() {pass: false} expect("1Â 234,57Â $").toEqual("1 234,57 $") 1`] = `
"<dim>expect(</>received</><dim>).</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

Expected: <green>\\"1<inverse> </>234,57<inverse> </>$\\"</>
Received: \\"1<inverse>Â </>234,57<inverse>Â </>$\\"</>"
`;

exports[`.toEqual() {pass: false} expect("Eve").toEqual({"asymmetricMatch": [Function asymmetricMatch]}) 1`] = `
"<dim>expect(</>received</><dim>).</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

Expected: <green>{\\"asymmetricMatch\\": [Function asymmetricMatch]}</>
Received: \\"Eve\\"</>"
`;

exports[`.toEqual() {pass: false} expect("abd").toEqual(StringContaining "bc") 1`] = `
"<dim>expect(</>received</><dim>).</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

Expected: <green>StringContaining \\"bc\\"</>
Received: \\"abd\\"</>"
`;

exports[`.toEqual() {pass: false} expect("abd").toEqual(StringMatching /bc/i) 1`] = `
"<dim>expect(</>received</><dim>).</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

Expected: <green>StringMatching /bc/i</>
Received: \\"abd\\"</>"
`;

exports[`.toEqual() {pass: false} expect("banana").toEqual("apple") 1`] = `
"<dim>expect(</>received</><dim>).</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

Expected: <green>\\"apple\\"</>
Received: \\"banana\\"</>"
`;

exports[`.toEqual() {pass: false} expect("type TypeName<T> = T extends Function ? \\"function\\" : \\"object\\";").toEqual("type TypeName<T> = T extends Function
? \\"function\\"
: \\"object\\";") 1`] = `
"<dim>expect(</>received</><dim>).</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

<red>- Expected</>
+ Received</>

<red>- type TypeName<T> = T extends Function</>
<red>- ? \\"function\\"</>
<red>- : \\"object\\";</>
+ type TypeName<T> = T extends Function<inverse> </>? \\"function\\"<inverse> </>: \\"object\\";</>"
`;

exports[`.toEqual() {pass: false} expect([1, 2]).toEqual([2, 1]) 1`] = `
"<dim>expect(</>received</><dim>).</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

<red>- Expected</>
+ Received</>

<dim>  Array [</>
<red>-   2,</>
<dim>    1,</>
+   2,</>
<dim>  ]</>"
`;

exports[`.toEqual() {pass: false} expect([1, 3]).toEqual(ArrayContaining [1, 2]) 1`] = `
"<dim>expect(</>received</><dim>).</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

Expected: <green>ArrayContaining [1, 2]</>
Received: [1, 3]</>"
`;

exports[`.toEqual() {pass: false} expect([1]).toEqual([2]) 1`] = `
"<dim>expect(</>received</><dim>).</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

<red>- Expected</>
+ Received</>

<dim>  Array [</>
<red>-   2,</>
+   1,</>
<dim>  ]</>"
`;

exports[`.toEqual() {pass: false} expect({"a": 1, "b": 2}).toEqual(ObjectContaining {"a": 2}) 1`] = `
"<dim>expect(</>received</><dim>).</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

Expected: <green>ObjectContaining {\\"a\\": 2}</>
Received: {\\"a\\": 1, \\"b\\": 2}</>"
`;

exports[`.toEqual() {pass: false} expect({"a": 1}).toEqual({"a": 2}) 1`] = `
"<dim>expect(</>received</><dim>).</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

<red>- Expected</>
+ Received</>

<dim>  Object {</>
<red>-   \\"a\\": 2,</>
+   \\"a\\": 1,</>
<dim>  }</>"
`;

exports[`.toEqual() {pass: false} expect({"a": 5}).toEqual({"b": 6}) 1`] = `
"<dim>expect(</>received</><dim>).</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

<red>- Expected</>
+ Received</>

<dim>  Object {</>
<red>-   \\"b\\": 6,</>
+   \\"a\\": 5,</>
<dim>  }</>"
`;

exports[`.toEqual() {pass: false} expect({"nodeName": "div", "nodeType": 1}).toEqual({"nodeName": "p", "nodeType": 1}) 1`] = `
"<dim>expect(</>received</><dim>).</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

<red>- Expected</>
+ Received</>

<dim>  Object {</>
<red>-   \\"nodeName\\": \\"p\\",</>
+   \\"nodeName\\": \\"div\\",</>
<dim>    \\"nodeType\\": 1,</>
<dim>  }</>"
`;

exports[`.toEqual() {pass: false} expect({"target": {"nodeType": 1, "value": "a"}}).toEqual({"target": {"nodeType": 1, "value": "b"}}) 1`] = `
"<dim>expect(</>received</><dim>).</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

<red>- Expected</>
+ Received</>

<dim>  Object {</>
<dim>    \\"target\\": Object {</>
<dim>      \\"nodeType\\": 1,</>
<red>-     \\"value\\": \\"b\\",</>
+     \\"value\\": \\"a\\",</>
<dim>    },</>
<dim>  }</>"
`;

exports[`.toEqual() {pass: false} expect(0).toEqual(-0) 1`] = `
"<dim>expect(</>received</><dim>).</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

Expected: <green>-0</>
Received: 0</>"
`;

exports[`.toEqual() {pass: false} expect(0).toEqual(5e-324) 1`] = `
"<dim>expect(</>received</><dim>).</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

Expected: <green>5e-324</>
Received: 0</>"
`;

exports[`.toEqual() {pass: false} expect(1).toEqual(2) 1`] = `
"<dim>expect(</>received</><dim>).</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

Expected: <green>2</>
Received: 1</>"
`;

exports[`.toEqual() {pass: false} expect(1).toEqual(ArrayContaining [1, 2]) 1`] = `
"<dim>expect(</>received</><dim>).</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

Expected: <green>ArrayContaining [1, 2]</>
Received: 1</>"
`;

exports[`.toEqual() {pass: false} expect(5e-324).toEqual(0) 1`] = `
"<dim>expect(</>received</><dim>).</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

Expected: <green>0</>
Received: 5e-324</>"
`;

exports[`.toEqual() {pass: false} expect(Immutable.List [1, 2]).toEqual(Immutable.List [2, 1]) 1`] = `
"<dim>expect(</>received</><dim>).</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

<red>- Expected</>
+ Received</>

<dim>  Immutable.List [</>
<red>-   2,</>
<dim>    1,</>
+   2,</>
<dim>  ]</>"
`;

exports[`.toEqual() {pass: false} expect(Immutable.List [1]).toEqual(Immutable.List [2]) 1`] = `
"<dim>expect(</>received</><dim>).</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

<red>- Expected</>
+ Received</>

<dim>  Immutable.List [</>
<red>-   2,</>
+   1,</>
<dim>  ]</>"
`;

exports[`.toEqual() {pass: false} expect(Immutable.Map {"1": Immutable.Map {"2": {"a": 99}}}).toEqual(Immutable.Map {"1": Immutable.Map {"2": {"a": 11}}}) 1`] = `
"<dim>expect(</>received</><dim>).</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

<red>- Expected</>
+ Received</>

<dim>  Immutable.Map {</>
<dim>    \\"1\\": Immutable.Map {</>
<dim>      \\"2\\": Object {</>
<red>-       \\"a\\": 11,</>
+       \\"a\\": 99,</>
<dim>      },</>
<dim>    },</>
<dim>  }</>"
`;

exports[`.toEqual() {pass: false} expect(Immutable.Map {"a": 0}).toEqual(Immutable.Map {"b": 0}) 1`] = `
"<dim>expect(</>received</><dim>).</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

<red>- Expected</>
+ Received</>

<dim>  Immutable.Map {</>
<red>-   \\"b\\": 0,</>
+   \\"a\\": 0,</>
<dim>  }</>"
`;

exports[`.toEqual() {pass: false} expect(Immutable.Map {"v": 1}).toEqual(Immutable.Map {"v": 2}) 1`] = `
"<dim>expect(</>received</><dim>).</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

<red>- Expected</>
+ Received</>

<dim>  Immutable.Map {</>
<red>-   \\"v\\": 2,</>
+   \\"v\\": 1,</>
<dim>  }</>"
`;

exports[`.toEqual() {pass: false} expect(Immutable.OrderedMap {1: "one", 2: "two"}).toEqual(Immutable.OrderedMap {2: "two", 1: "one"}) 1`] = `
"<dim>expect(</>received</><dim>).</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

<red>- Expected</>
+ Received</>

<dim>  Immutable.OrderedMap {</>
<red>-   2: \\"two\\",</>
<dim>    1: \\"one\\",</>
+   2: \\"two\\",</>
<dim>  }</>"
`;

exports[`.toEqual() {pass: false} expect(Immutable.OrderedSet [1, 2]).toEqual(Immutable.OrderedSet [2, 1]) 1`] = `
"<dim>expect(</>received</><dim>).</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

<red>- Expected</>
+ Received</>

<dim>  Immutable.OrderedSet [</>
<red>-   2,</>
<dim>    1,</>
+   2,</>
<dim>  ]</>"
`;

exports[`.toEqual() {pass: false} expect(Immutable.Set [1, 2]).toEqual(Immutable.Set []) 1`] = `
"<dim>expect(</>received</><dim>).</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

<red>- Expected</>
+ Received</>

<red>- Immutable.Set []</>
+ Immutable.Set [</>
+   1,</>
+   2,</>
+ ]</>"
`;

exports[`.toEqual() {pass: false} expect(Immutable.Set [1, 2]).toEqual(Immutable.Set [1, 2, 3]) 1`] = `
"<dim>expect(</>received</><dim>).</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

<red>- Expected</>
+ Received</>

<dim>  Immutable.Set [</>
<dim>    1,</>
<dim>    2,</>
<red>-   3,</>
<dim>  ]</>"
`;

exports[`.toEqual() {pass: false} expect(Map {"a" => 0}).toEqual(Map {"b" => 0}) 1`] = `
"<dim>expect(</>received</><dim>).</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

<red>- Expected</>
+ Received</>

<dim>  Map {</>
<red>-   \\"b\\" => 0,</>
+   \\"a\\" => 0,</>
<dim>  }</>"
`;

exports[`.toEqual() {pass: false} expect(Map {"v" => 1}).toEqual(Map {"v" => 2}) 1`] = `
"<dim>expect(</>received</><dim>).</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

<red>- Expected</>
+ Received</>

<dim>  Map {</>
<red>-   \\"v\\" => 2,</>
+   \\"v\\" => 1,</>
<dim>  }</>"
`;

exports[`.toEqual() {pass: false} expect(Map {["v"] => 1}).toEqual(Map {["v"] => 2}) 1`] = `
"<dim>expect(</>received</><dim>).</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

<red>- Expected</>
+ Received</>

<dim>  Map {</>
<dim>    Array [</>
<dim>      \\"v\\",</>
<red>-   ] => 2,</>
+   ] => 1,</>
<dim>  }</>"
`;

exports[`.toEqual() {pass: false} expect(Map {[1] => Map {[1] => "one"}}).toEqual(Map {[1] => Map {[1] => "two"}}) 1`] = `
"<dim>expect(</>received</><dim>).</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

<red>- Expected</>
+ Received</>

<yellow>@@ -2,8 +2,8 @@</>
<dim>    Array [</>
<dim>      1,</>
<dim>    ] => Map {</>
<dim>      Array [</>
<dim>        1,</>
<red>-     ] => \\"two\\",</>
+     ] => \\"one\\",</>
<dim>    },</>
<dim>  }</>"
`;

exports[`.toEqual() {pass: false} expect(Map {}).toEqual(Set {}) 1`] = `
"<dim>expect(</>received</><dim>).</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

Expected: <green>Set {}</>
Received: Map {}</>"
`;

exports[`.toEqual() {pass: false} expect(Map {1 => "one", 2 => "two"}).toEqual(Map {1 => "one"}) 1`] = `
"<dim>expect(</>received</><dim>).</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

<red>- Expected</>
+ Received</>

<dim>  Map {</>
<dim>    1 => \\"one\\",</>
+   2 => \\"two\\",</>
<dim>  }</>"
`;

exports[`.toEqual() {pass: false} expect(Set {[1], [2]}).toEqual(Set {[1], [2], [2]}) 1`] = `
"<dim>expect(</>received</><dim>).</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

<red>- Expected</>
+ Received</>

<yellow>@@ -3,9 +3,6 @@</>
<dim>      1,</>
<dim>    ],</>
<dim>    Array [</>
<dim>      2,</>
<dim>    ],</>
<red>-   Array [</>
<red>-     2,</>
<red>-   ],</>
<dim>  }</>"
`;

exports[`.toEqual() {pass: false} expect(Set {[1], [2]}).toEqual(Set {[1], [2], [3]}) 1`] = `
"<dim>expect(</>received</><dim>).</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

<red>- Expected</>
+ Received</>

<yellow>@@ -3,9 +3,6 @@</>
<dim>      1,</>
<dim>    ],</>
<dim>    Array [</>
<dim>      2,</>
<dim>    ],</>
<red>-   Array [</>
<red>-     3,</>
<red>-   ],</>
<dim>  }</>"
`;

exports[`.toEqual() {pass: false} expect(Set {1, 2}).toEqual(Set {}) 1`] = `
"<dim>expect(</>received</><dim>).</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

<red>- Expected</>
+ Received</>

<red>- Set {}</>
+ Set {</>
+   1,</>
+   2,</>
+ }</>"
`;

exports[`.toEqual() {pass: false} expect(Set {1, 2}).toEqual(Set {1, 2, 3}) 1`] = `
"<dim>expect(</>received</><dim>).</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

<red>- Expected</>
+ Received</>

<dim>  Set {</>
<dim>    1,</>
<dim>    2,</>
<red>-   3,</>
<dim>  }</>"
`;

exports[`.toEqual() {pass: false} expect(Set {Set {1}, Set {2}}).toEqual(Set {Set {1}, Set {3}}) 1`] = `
"<dim>expect(</>received</><dim>).</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

<red>- Expected</>
+ Received</>

<dim>  Set {</>
<dim>    Set {</>
<dim>      1,</>
<dim>    },</>
<dim>    Set {</>
<red>-     3,</>
+     2,</>
<dim>    },</>
<dim>  }</>"
`;

exports[`.toEqual() {pass: false} expect(false).toEqual(ObjectContaining {"a": 2}) 1`] = `
"<dim>expect(</>received</><dim>).</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

Expected: <green>ObjectContaining {\\"a\\": 2}</>
Received: false</>"
`;

exports[`.toEqual() {pass: false} expect(null).toEqual(undefined) 1`] = `
"<dim>expect(</>received</><dim>).</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

Expected: <green>undefined</>
Received: null</>"
`;

exports[`.toEqual() {pass: false} expect(true).toEqual(false) 1`] = `
"<dim>expect(</>received</><dim>).</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

Expected: <green>false</>
Received: true</>"
`;

exports[`.toEqual() {pass: false} expect(undefined).toEqual(Any<Function>) 1`] = `
"<dim>expect(</>received</><dim>).</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

Expected: <green>Any<Function></>
Received: undefined</>"
`;

exports[`.toEqual() {pass: false} expect(undefined).toEqual(Anything) 1`] = `
"<dim>expect(</>received</><dim>).</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

Expected: <green>Anything</>
Received: undefined</>"
`;

exports[`.toEqual() {pass: true} expect("Alice").not.toEqual({"asymmetricMatch": [Function asymmetricMatch]}) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

Expected: not <green>{\\"asymmetricMatch\\": [Function asymmetricMatch]}</>
Received:     \\"Alice\\"</>"
`;

exports[`.toEqual() {pass: true} expect("abc").not.toEqual("abc") 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

Expected: not <green>\\"abc\\"</>
"
`;

exports[`.toEqual() {pass: true} expect("abc").not.toEqual({"0": "a", "1": "b", "2": "c"}) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

Expected: not <green>{\\"0\\": \\"a\\", \\"1\\": \\"b\\", \\"2\\": \\"c\\"}</>
Received:     \\"abc\\"</>"
`;

exports[`.toEqual() {pass: true} expect("abcd").not.toEqual(StringContaining "bc") 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

Expected: not <green>StringContaining \\"bc\\"</>
Received:     \\"abcd\\"</>"
`;

exports[`.toEqual() {pass: true} expect("abcd").not.toEqual(StringMatching /bc/) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

Expected: not <green>StringMatching /bc/</>
Received:     \\"abcd\\"</>"
`;

exports[`.toEqual() {pass: true} expect([1, 2, 3]).not.toEqual(ArrayContaining [2, 3]) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

Expected: not <green>ArrayContaining [2, 3]</>
Received:     [1, 2, 3]</>"
`;

exports[`.toEqual() {pass: true} expect([1, 2]).not.toEqual([1, 2]) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

Expected: not <green>[1, 2]</>
"
`;

exports[`.toEqual() {pass: true} expect([1]).not.toEqual([1]) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

Expected: not <green>[1]</>
"
`;

exports[`.toEqual() {pass: true} expect([Function anonymous]).not.toEqual(Any<Function>) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

Expected: not <green>Any<Function></>
Received:     [Function anonymous]</>"
`;

exports[`.toEqual() {pass: true} expect({"0": "a", "1": "b", "2": "c"}).not.toEqual("abc") 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

Expected: not <green>\\"abc\\"</>
Received:     {\\"0\\": \\"a\\", \\"1\\": \\"b\\", \\"2\\": \\"c\\"}</>"
`;

exports[`.toEqual() {pass: true} expect({"a": 1, "b": [Function b], "c": true}).not.toEqual({"a": 1, "b": Any<Function>, "c": Anything}) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

Expected: not <green>{\\"a\\": 1, \\"b\\": Any<Function>, \\"c\\": Anything}</>
Received:     {\\"a\\": 1, \\"b\\": [Function b], \\"c\\": true}</>"
`;

exports[`.toEqual() {pass: true} expect({"a": 1, "b": 2}).not.toEqual(ObjectContaining {"a": 1}) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

Expected: not <green>ObjectContaining {\\"a\\": 1}</>
Received:     {\\"a\\": 1, \\"b\\": 2}</>"
`;

exports[`.toEqual() {pass: true} expect({"a": 99}).not.toEqual({"a": 99}) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

Expected: not <green>{\\"a\\": 99}</>
"
`;

exports[`.toEqual() {pass: true} expect({"nodeName": "div", "nodeType": 1}).not.toEqual({"nodeName": "div", "nodeType": 1}) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

Expected: not <green>{\\"nodeName\\": \\"div\\", \\"nodeType\\": 1}</>
"
`;

exports[`.toEqual() {pass: true} expect({}).not.toEqual({}) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

Expected: not <green>{}</>
"
`;

exports[`.toEqual() {pass: true} expect({}).not.toEqual(0) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

Expected: not <green>0</>
Received:     {}</>"
`;

exports[`.toEqual() {pass: true} expect(0).not.toEqual({}) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

Expected: not <green>{}</>
Received:     0</>"
`;

exports[`.toEqual() {pass: true} expect(1).not.toEqual(1) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

Expected: not <green>1</>
"
`;

exports[`.toEqual() {pass: true} expect(Immutable.List [1, 2]).not.toEqual(Immutable.List [1, 2]) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

Expected: not <green>Immutable.List [1, 2]</>
"
`;

exports[`.toEqual() {pass: true} expect(Immutable.List [1]).not.toEqual(Immutable.List [1]) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

Expected: not <green>Immutable.List [1]</>
"
`;

exports[`.toEqual() {pass: true} expect(Immutable.Map {"1": Immutable.Map {"2": {"a": 99}}}).not.toEqual(Immutable.Map {"1": Immutable.Map {"2": {"a": 99}}}) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

Expected: not <green>Immutable.Map {\\"1\\": Immutable.Map {\\"2\\": {\\"a\\": 99}}}</>
"
`;

exports[`.toEqual() {pass: true} expect(Immutable.Map {}).not.toEqual(Immutable.Map {}) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

Expected: not <green>Immutable.Map {}</>
"
`;

exports[`.toEqual() {pass: true} expect(Immutable.Map {1: "one", 2: "two"}).not.toEqual(Immutable.Map {1: "one", 2: "two"}) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

Expected: not <green>Immutable.Map {1: \\"one\\", 2: \\"two\\"}</>
"
`;

exports[`.toEqual() {pass: true} expect(Immutable.Map {1: "one", 2: "two"}).not.toEqual(Immutable.Map {2: "two", 1: "one"}) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

Expected: not <green>Immutable.Map {2: \\"two\\", 1: \\"one\\"}</>
Received:     Immutable.Map {1: \\"one\\", 2: \\"two\\"}</>"
`;

exports[`.toEqual() {pass: true} expect(Immutable.OrderedMap {1: "one", 2: "two"}).not.toEqual(Immutable.OrderedMap {1: "one", 2: "two"}) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

Expected: not <green>Immutable.OrderedMap {1: \\"one\\", 2: \\"two\\"}</>
"
`;

exports[`.toEqual() {pass: true} expect(Immutable.OrderedSet []).not.toEqual(Immutable.OrderedSet []) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

Expected: not <green>Immutable.OrderedSet []</>
"
`;

exports[`.toEqual() {pass: true} expect(Immutable.OrderedSet [1, 2]).not.toEqual(Immutable.OrderedSet [1, 2]) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

Expected: not <green>Immutable.OrderedSet [1, 2]</>
"
`;

exports[`.toEqual() {pass: true} expect(Immutable.Set []).not.toEqual(Immutable.Set []) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

Expected: not <green>Immutable.Set []</>
"
`;

exports[`.toEqual() {pass: true} expect(Immutable.Set [1, 2]).not.toEqual(Immutable.Set [1, 2]) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

Expected: not <green>Immutable.Set [1, 2]</>
"
`;

exports[`.toEqual() {pass: true} expect(Immutable.Set [1, 2]).not.toEqual(Immutable.Set [2, 1]) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

Expected: not <green>Immutable.Set [2, 1]</>
Received:     Immutable.Set [1, 2]</>"
`;

exports[`.toEqual() {pass: true} expect(Map {[1] => "one", [2] => "two", [3] => "three", [3] => "four"}).not.toEqual(Map {[3] => "three", [3] => "four", [2] => "two", [1] => "one"}) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

Expected: not <green>Map {[3] => \\"three\\", [3] => \\"four\\", [2] => \\"two\\", [1] => \\"one\\"}</>
Received:     Map {[1] => \\"one\\", [2] => \\"two\\", [3] => \\"three\\", [3] => \\"four\\"}</>"
`;

exports[`.toEqual() {pass: true} expect(Map {[1] => "one", [2] => "two"}).not.toEqual(Map {[2] => "two", [1] => "one"}) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

Expected: not <green>Map {[2] => \\"two\\", [1] => \\"one\\"}</>
Received:     Map {[1] => \\"one\\", [2] => \\"two\\"}</>"
`;

exports[`.toEqual() {pass: true} expect(Map {[1] => Map {[1] => "one"}, [2] => Map {[2] => "two"}}).not.toEqual(Map {[2] => Map {[2] => "two"}, [1] => Map {[1] => "one"}}) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

Expected: not <green>Map {[2] => Map {[2] => \\"two\\"}, [1] => Map {[1] => \\"one\\"}}</>
Received:     Map {[1] => Map {[1] => \\"one\\"}, [2] => Map {[2] => \\"two\\"}}</>"
`;

exports[`.toEqual() {pass: true} expect(Map {{"a": 1} => "one", {"b": 2} => "two"}).not.toEqual(Map {{"b": 2} => "two", {"a": 1} => "one"}) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

Expected: not <green>Map {{\\"b\\": 2} => \\"two\\", {\\"a\\": 1} => \\"one\\"}</>
Received:     Map {{\\"a\\": 1} => \\"one\\", {\\"b\\": 2} => \\"two\\"}</>"
`;

exports[`.toEqual() {pass: true} expect(Map {}).not.toEqual(Map {}) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

Expected: not <green>Map {}</>
"
`;

exports[`.toEqual() {pass: true} expect(Map {1 => "one", 2 => "two"}).not.toEqual(Map {1 => "one", 2 => "two"}) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

Expected: not <green>Map {1 => \\"one\\", 2 => \\"two\\"}</>
"
`;

exports[`.toEqual() {pass: true} expect(Map {1 => "one", 2 => "two"}).not.toEqual(Map {2 => "two", 1 => "one"}) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

Expected: not <green>Map {2 => \\"two\\", 1 => \\"one\\"}</>
Received:     Map {1 => \\"one\\", 2 => \\"two\\"}</>"
`;

exports[`.toEqual() {pass: true} expect(Map {1 => ["one"], 2 => ["two"]}).not.toEqual(Map {2 => ["two"], 1 => ["one"]}) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

Expected: not <green>Map {2 => [\\"two\\"], 1 => [\\"one\\"]}</>
Received:     Map {1 => [\\"one\\"], 2 => [\\"two\\"]}</>"
`;

exports[`.toEqual() {pass: true} expect(NaN).not.toEqual(NaN) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

Expected: not <green>NaN</>
"
`;

exports[`.toEqual() {pass: true} expect(Set {[1], [2], [3], [3]}).not.toEqual(Set {[3], [3], [2], [1]}) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

Expected: not <green>Set {[3], [3], [2], [1]}</>
Received:     Set {[1], [2], [3], [3]}</>"
`;

exports[`.toEqual() {pass: true} expect(Set {[1], [2]}).not.toEqual(Set {[2], [1]}) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

Expected: not <green>Set {[2], [1]}</>
Received:     Set {[1], [2]}</>"
`;

exports[`.toEqual() {pass: true} expect(Set {{"a": 1}, {"b": 2}}).not.toEqual(Set {{"b": 2}, {"a": 1}}) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

Expected: not <green>Set {{\\"b\\": 2}, {\\"a\\": 1}}</>
Received:     Set {{\\"a\\": 1}, {\\"b\\": 2}}</>"
`;

exports[`.toEqual() {pass: true} expect(Set {}).not.toEqual(Set {}) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

Expected: not <green>Set {}</>
"
`;

exports[`.toEqual() {pass: true} expect(Set {1, 2}).not.toEqual(Set {1, 2}) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

Expected: not <green>Set {1, 2}</>
"
`;

exports[`.toEqual() {pass: true} expect(Set {1, 2}).not.toEqual(Set {2, 1}) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

Expected: not <green>Set {2, 1}</>
Received:     Set {1, 2}</>"
`;

exports[`.toEqual() {pass: true} expect(Set {Set {[1]}, Set {[2]}}).not.toEqual(Set {Set {[2]}, Set {[1]}}) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

Expected: not <green>Set {Set {[2]}, Set {[1]}}</>
Received:     Set {Set {[1]}, Set {[2]}}</>"
`;

exports[`.toEqual() {pass: true} expect(true).not.toEqual(Anything) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

Expected: not <green>Anything</>
Received:     true</>"
`;

exports[`.toEqual() {pass: true} expect(true).not.toEqual(true) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

Expected: not <green>true</>
"
`;

exports[`.toHaveLength {pass: false} expect("").toHaveLength(1) 1`] = `
"<dim>expect(</>received</><dim>).</>toHaveLength<dim>(</><green>expected</><dim>)</>

Expected length: <green>1</>
Received length: 0</>
Received string: \\"\\"</>"
`;

exports[`.toHaveLength {pass: false} expect("abc").toHaveLength(66) 1`] = `
"<dim>expect(</>received</><dim>).</>toHaveLength<dim>(</><green>expected</><dim>)</>

Expected length: <green>66</>
Received length: 3</>
Received string: \\"abc\\"</>"
`;

exports[`.toHaveLength {pass: false} expect(["a", "b"]).toHaveLength(99) 1`] = `
"<dim>expect(</>received</><dim>).</>toHaveLength<dim>(</><green>expected</><dim>)</>

Expected length: <green>99</>
Received length: 2</>
Received array:  [\\"a\\", \\"b\\"]</>"
`;

exports[`.toHaveLength {pass: false} expect([]).toHaveLength(1) 1`] = `
"<dim>expect(</>received</><dim>).</>toHaveLength<dim>(</><green>expected</><dim>)</>

Expected length: <green>1</>
Received length: 0</>
Received array:  []</>"
`;

exports[`.toHaveLength {pass: false} expect([1, 2]).toHaveLength(3) 1`] = `
"<dim>expect(</>received</><dim>).</>toHaveLength<dim>(</><green>expected</><dim>)</>

Expected length: <green>3</>
Received length: 2</>
Received array:  [1, 2]</>"
`;

exports[`.toHaveLength {pass: true} expect("").toHaveLength(0) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toHaveLength<dim>(</><green>expected</><dim>)</>

Expected length: not <green>0</>
Received string:     \\"\\"</>"
`;

exports[`.toHaveLength {pass: true} expect("abc").toHaveLength(3) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toHaveLength<dim>(</><green>expected</><dim>)</>

Expected length: not <green>3</>
Received string:     \\"abc\\"</>"
`;

exports[`.toHaveLength {pass: true} expect(["a", "b"]).toHaveLength(2) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toHaveLength<dim>(</><green>expected</><dim>)</>

Expected length: not <green>2</>
Received array:      [\\"a\\", \\"b\\"]</>"
`;

exports[`.toHaveLength {pass: true} expect([]).toHaveLength(0) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toHaveLength<dim>(</><green>expected</><dim>)</>

Expected length: not <green>0</>
Received array:      []</>"
`;

exports[`.toHaveLength {pass: true} expect([1, 2]).toHaveLength(2) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toHaveLength<dim>(</><green>expected</><dim>)</>

Expected length: not <green>2</>
Received array:      [1, 2]</>"
`;

exports[`.toHaveLength error cases 1`] = `
"<dim>expect(</>received</><dim>).</>toHaveLength<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: received</> value must have a length property whose value must be a number

Received has type:  object
Received has value: {\\"a\\": 9}</>"
`;

exports[`.toHaveLength error cases 2`] = `
"<dim>expect(</>received</><dim>).</>toHaveLength<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: received</> value must have a length property whose value must be a number

Received has type:  number
Received has value: 0</>"
`;

exports[`.toHaveLength error cases 3`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toHaveLength<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: received</> value must have a length property whose value must be a number

Received has value: undefined</>"
`;

exports[`.toHaveLength matcher error expected length not number 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toHaveLength<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer

Expected has type:  string
Expected has value: <green>\\"3\\"</>"
`;

exports[`.toHaveLength matcher error expected length number Infinity 1`] = `
"<dim>expect(</>received</><dim>).</>rejects<dim>.</>toHaveLength<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer

Expected has type:  number
Expected has value: <green>Infinity</>"
`;

exports[`.toHaveLength matcher error expected length number NaN 1`] = `
"<dim>expect(</>received</><dim>).</>rejects<dim>.</>not<dim>.</>toHaveLength<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer

Expected has type:  number
Expected has value: <green>NaN</>"
`;

exports[`.toHaveLength matcher error expected length number float 1`] = `
"<dim>expect(</>received</><dim>).</>resolves<dim>.</>toHaveLength<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer

Expected has type:  number
Expected has value: <green>0.5</>"
`;

exports[`.toHaveLength matcher error expected length number negative integer 1`] = `
"<dim>expect(</>received</><dim>).</>resolves<dim>.</>not<dim>.</>toHaveLength<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer

Expected has type:  number
Expected has value: <green>-3</>"
`;

exports[`.toHaveProperty() {error} expect({"a": {"b": {}}}).toHaveProperty('1') 1`] = `
"<dim>expect(</>received</><dim>).</>toHaveProperty<dim>(</><green>path</><dim>)</>

<bold>Matcher error</>: <green>expected</> path must be a string or array

Expected has type:  number
Expected has value: <green>1</>"
`;

exports[`.toHaveProperty() {error} expect({"a": {"b": {}}}).toHaveProperty('null') 1`] = `
"<dim>expect(</>received</><dim>).</>toHaveProperty<dim>(</><green>path</><dim>)</>

<bold>Matcher error</>: <green>expected</> path must be a string or array

Expected has value: <green>null</>"
`;

exports[`.toHaveProperty() {error} expect({"a": {"b": {}}}).toHaveProperty('undefined') 1`] = `
"<dim>expect(</>received</><dim>).</>toHaveProperty<dim>(</><green>path</><dim>)</>

<bold>Matcher error</>: <green>expected</> path must be a string or array

Expected has value: <green>undefined</>"
`;

exports[`.toHaveProperty() {error} expect({}).toHaveProperty('') 1`] = `
"<dim>expect(</>received</><dim>).</>toHaveProperty<dim>(</><green>path</><dim>)</>

<bold>Matcher error</>: <green>expected</> path must not be an empty array

Expected has type:  array
Expected has value: <green>[]</>"
`;

exports[`.toHaveProperty() {error} expect(null).toHaveProperty('a.b') 1`] = `
"<dim>expect(</>received</><dim>).</>toHaveProperty<dim>(</><green>path</><dim>)</>

<bold>Matcher error</>: received</> value must not be null nor undefined

Received has value: null</>"
`;

exports[`.toHaveProperty() {error} expect(undefined).toHaveProperty('a') 1`] = `
"<dim>expect(</>received</><dim>).</>toHaveProperty<dim>(</><green>path</><dim>)</>

<bold>Matcher error</>: received</> value must not be null nor undefined

Received has value: undefined</>"
`;

exports[`.toHaveProperty() {pass: false} expect("").toHaveProperty('key') 1`] = `
"<dim>expect(</>received</><dim>).</>toHaveProperty<dim>(</><green>path</><dim>)</>

Expected path: <green>\\"key\\"</>
Received path: []</>

Received value: \\"\\"</>"
`;

exports[`.toHaveProperty() {pass: false} expect("abc").toHaveProperty('a.b.c') 1`] = `
"<dim>expect(</>received</><dim>).</>toHaveProperty<dim>(</><green>path</><dim>)</>

Expected path: <green>\\"a.b.c\\"</>
Received path: []</>

Received value: \\"abc\\"</>"
`;

exports[`.toHaveProperty() {pass: false} expect("abc").toHaveProperty('a.b.c', {"a": 5}) 1`] = `
"<dim>expect(</>received</><dim>).</>toHaveProperty<dim>(</><green>path</><dim>, </><green>value</><dim>)</>

Expected path: <green>\\"a.b.c\\"</>
Received path: []</>

Expected value: <green>{\\"a\\": 5}</>
Received value: \\"abc\\"</>"
`;

exports[`.toHaveProperty() {pass: false} expect({"a": {"b": {"c": {"d": 1}}}}).toHaveProperty('a,b,c,d', 2) 1`] = `
"<dim>expect(</>received</><dim>).</>toHaveProperty<dim>(</><green>path</><dim>, </><green>value</><dim>)</>

Expected path: <green>[\\"a\\", \\"b\\", \\"c\\", \\"d\\"]</>

Expected value: <green>2</>
Received value: 1</>"
`;

exports[`.toHaveProperty() {pass: false} expect({"a": {"b": {"c": {"d": 1}}}}).toHaveProperty('a.b.c.d', 2) 1`] = `
"<dim>expect(</>received</><dim>).</>toHaveProperty<dim>(</><green>path</><dim>, </><green>value</><dim>)</>

Expected path: <green>\\"a.b.c.d\\"</>

Expected value: <green>2</>
Received value: 1</>"
`;

exports[`.toHaveProperty() {pass: false} expect({"a": {"b": {"c": {"d": 1}}}}).toHaveProperty('a.b.ttt.d', 1) 1`] = `
"<dim>expect(</>received</><dim>).</>toHaveProperty<dim>(</><green>path</><dim>, </><green>value</><dim>)</>

Expected path: <green>\\"a.b.ttt.d\\"</>
Received path: \\"a.b\\"</>

Expected value: <green>1</>
Received value: {\\"c\\": {\\"d\\": 1}}</>"
`;

exports[`.toHaveProperty() {pass: false} expect({"a": {"b": {"c": {}}}}).toHaveProperty('a.b.c.d') 1`] = `
"<dim>expect(</>received</><dim>).</>toHaveProperty<dim>(</><green>path</><dim>)</>

Expected path: <green>\\"a.b.c.d\\"</>
Received path: \\"a.b.c\\"</>

Received value: {}</>"
`;

exports[`.toHaveProperty() {pass: false} expect({"a": {"b": {"c": {}}}}).toHaveProperty('a.b.c.d', 1) 1`] = `
"<dim>expect(</>received</><dim>).</>toHaveProperty<dim>(</><green>path</><dim>, </><green>value</><dim>)</>

Expected path: <green>\\"a.b.c.d\\"</>
Received path: \\"a.b.c\\"</>

Expected value: <green>1</>
Received value: {}</>"
`;

exports[`.toHaveProperty() {pass: false} expect({"a": {"b": {"c": 5}}}).toHaveProperty('a.b', {"c": 4}) 1`] = `
"<dim>expect(</>received</><dim>).</>toHaveProperty<dim>(</><green>path</><dim>, </><green>value</><dim>)</>

Expected path: <green>\\"a.b\\"</>

<red>- Expected value</>
+ Received value</>

<dim>  Object {</>
<red>-   \\"c\\": 4,</>
+   \\"c\\": 5,</>
<dim>  }</>"
`;

exports[`.toHaveProperty() {pass: false} expect({"a": {"b": 3}}).toHaveProperty('a.b', undefined) 1`] = `
"<dim>expect(</>received</><dim>).</>toHaveProperty<dim>(</><green>path</><dim>, </><green>value</><dim>)</>

Expected path: <green>\\"a.b\\"</>

Expected value: <green>undefined</>
Received value: 3</>"
`;

exports[`.toHaveProperty() {pass: false} expect({"a": 1}).toHaveProperty('a.b.c.d') 1`] = `
"<dim>expect(</>received</><dim>).</>toHaveProperty<dim>(</><green>path</><dim>)</>

Expected path: <green>\\"a.b.c.d\\"</>
Received path: \\"a\\"</>

Received value: 1</>"
`;

exports[`.toHaveProperty() {pass: false} expect({"a": 1}).toHaveProperty('a.b.c.d', 5) 1`] = `
"<dim>expect(</>received</><dim>).</>toHaveProperty<dim>(</><green>path</><dim>, </><green>value</><dim>)</>

Expected path: <green>\\"a.b.c.d\\"</>
Received path: \\"a\\"</>

Expected value: <green>5</>
Received value: 1</>"
`;

exports[`.toHaveProperty() {pass: false} expect({"a.b.c.d": 1}).toHaveProperty('a.b.c.d', 2) 1`] = `
"<dim>expect(</>received</><dim>).</>toHaveProperty<dim>(</><green>path</><dim>, </><green>value</><dim>)</>

Expected path: <green>\\"a.b.c.d\\"</>
Received path: []</>

Expected value: <green>2</>
Received value: {\\"a.b.c.d\\": 1}</>"
`;

exports[`.toHaveProperty() {pass: false} expect({"a.b.c.d": 1}).toHaveProperty('a.b.c.d', 2) 2`] = `
"<dim>expect(</>received</><dim>).</>toHaveProperty<dim>(</><green>path</><dim>, </><green>value</><dim>)</>

Expected path: <green>[\\"a.b.c.d\\"]</>

Expected value: <green>2</>
Received value: 1</>"
`;

exports[`.toHaveProperty() {pass: false} expect({"children": ["\\"That cartoon\\""], "props": null, "type": "p"}).toHaveProperty('children,0', "\\"That cat cartoon\\"") 1`] = `
"<dim>expect(</>received</><dim>).</>toHaveProperty<dim>(</><green>path</><dim>, </><green>value</><dim>)</>

Expected path: <green>[\\"children\\", 0]</>

Expected value: <green>\\"\\\\\\"That <inverse>cat </>cartoon\\\\\\"\\"</>
Received value: \\"\\\\\\"That cartoon\\\\\\"\\"</>"
`;

exports[`.toHaveProperty() {pass: false} expect({"children": ["Roses are red.
Violets are blue.
Testing with Jest is good for you."], "props": null, "type": "pre"}).toHaveProperty('children,0', "Roses are red, violets are blue.
Testing with Jest
Is good for you.") 1`] = `
"<dim>expect(</>received</><dim>).</>toHaveProperty<dim>(</><green>path</><dim>, </><green>value</><dim>)</>

Expected path: <green>[\\"children\\", 0]</>

<red>- Expected value</>
+ Received value</>

<red>- Roses are red<inverse>, v</>iolets are blue.</>
+ Roses are red<inverse>.</></>
+ <inverse>V</>iolets are blue.</>
<red>- Testing with Jest</>
<red>- <inverse>I</>s good for you.</>
+ Testing with Jest<inverse> i</>s good for you.</>"
`;

exports[`.toHaveProperty() {pass: false} expect({"key": 1}).toHaveProperty('not') 1`] = `
"<dim>expect(</>received</><dim>).</>toHaveProperty<dim>(</><green>path</><dim>)</>

Expected path: <green>\\"not\\"</>
Received path: []</>

Received value: {\\"key\\": 1}</>"
`;

exports[`.toHaveProperty() {pass: false} expect({}).toHaveProperty('a') 1`] = `
"<dim>expect(</>received</><dim>).</>toHaveProperty<dim>(</><green>path</><dim>)</>

Expected path: <green>\\"a\\"</>
Received path: []</>

Received value: {}</>"
`;

exports[`.toHaveProperty() {pass: false} expect({}).toHaveProperty('a', "a") 1`] = `
"<dim>expect(</>received</><dim>).</>toHaveProperty<dim>(</><green>path</><dim>, </><green>value</><dim>)</>

Expected path: <green>\\"a\\"</>

Expected value: <green>\\"a\\"</>
Received value: undefined</>"
`;

exports[`.toHaveProperty() {pass: false} expect({}).toHaveProperty('a', "test") 1`] = `
"<dim>expect(</>received</><dim>).</>toHaveProperty<dim>(</><green>path</><dim>, </><green>value</><dim>)</>

Expected path: <green>\\"a\\"</>
Received path: []</>

Expected value: <green>\\"test\\"</>
Received value: {}</>"
`;

exports[`.toHaveProperty() {pass: false} expect({}).toHaveProperty('b', undefined) 1`] = `
"<dim>expect(</>received</><dim>).</>toHaveProperty<dim>(</><green>path</><dim>, </><green>value</><dim>)</>

Expected path: <green>\\"b\\"</>

Expected value: <green>undefined</>
Received value: \\"b\\"</>"
`;

exports[`.toHaveProperty() {pass: false} expect(0).toHaveProperty('key') 1`] = `
"<dim>expect(</>received</><dim>).</>toHaveProperty<dim>(</><green>path</><dim>)</>

Expected path: <green>\\"key\\"</>
Received path: []</>

Received value: 0</>"
`;

exports[`.toHaveProperty() {pass: false} expect(1).toHaveProperty('a.b.c') 1`] = `
"<dim>expect(</>received</><dim>).</>toHaveProperty<dim>(</><green>path</><dim>)</>

Expected path: <green>\\"a.b.c\\"</>
Received path: []</>

Received value: 1</>"
`;

exports[`.toHaveProperty() {pass: false} expect(1).toHaveProperty('a.b.c', "test") 1`] = `
"<dim>expect(</>received</><dim>).</>toHaveProperty<dim>(</><green>path</><dim>, </><green>value</><dim>)</>

Expected path: <green>\\"a.b.c\\"</>
Received path: []</>

Expected value: <green>\\"test\\"</>
Received value: 1</>"
`;

exports[`.toHaveProperty() {pass: false} expect(Symbol()).toHaveProperty('key') 1`] = `
"<dim>expect(</>received</><dim>).</>toHaveProperty<dim>(</><green>path</><dim>)</>

Expected path: <green>\\"key\\"</>
Received path: []</>

Received value: Symbol()</>"
`;

exports[`.toHaveProperty() {pass: false} expect(false).toHaveProperty('key') 1`] = `
"<dim>expect(</>received</><dim>).</>toHaveProperty<dim>(</><green>path</><dim>)</>

Expected path: <green>\\"key\\"</>
Received path: []</>

Received value: false</>"
`;

exports[`.toHaveProperty() {pass: true} expect("").toHaveProperty('length', 0) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toHaveProperty<dim>(</><green>path</><dim>, </><green>value</><dim>)</>

Expected path: <green>\\"length\\"</>

Expected value: not <green>0</>"
`;

exports[`.toHaveProperty() {pass: true} expect([Function memoized]).toHaveProperty('memo', []) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toHaveProperty<dim>(</><green>path</><dim>, </><green>value</><dim>)</>

Expected path: <green>\\"memo\\"</>

Expected value: not <green>[]</>"
`;

exports[`.toHaveProperty() {pass: true} expect({"a": {"b": [1, 2, 3]}}).toHaveProperty('a,b,1') 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toHaveProperty<dim>(</><green>path</><dim>)</>

Expected path: not <green>[\\"a\\", \\"b\\", 1]</>

Received value: 2</>"
`;

exports[`.toHaveProperty() {pass: true} expect({"a": {"b": [1, 2, 3]}}).toHaveProperty('a,b,1', 2) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toHaveProperty<dim>(</><green>path</><dim>, </><green>value</><dim>)</>

Expected path: <green>[\\"a\\", \\"b\\", 1]</>

Expected value: not <green>2</>"
`;

exports[`.toHaveProperty() {pass: true} expect({"a": {"b": [1, 2, 3]}}).toHaveProperty('a,b,1', Any<Number>) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toHaveProperty<dim>(</><green>path</><dim>, </><green>value</><dim>)</>

Expected path: <green>[\\"a\\", \\"b\\", 1]</>

Expected value: not <green>Any<Number></>
Received value:     2</>"
`;

exports[`.toHaveProperty() {pass: true} expect({"a": {"b": {"c": {"d": 1}}}}).toHaveProperty('a,b,c,d') 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toHaveProperty<dim>(</><green>path</><dim>)</>

Expected path: not <green>[\\"a\\", \\"b\\", \\"c\\", \\"d\\"]</>

Received value: 1</>"
`;

exports[`.toHaveProperty() {pass: true} expect({"a": {"b": {"c": {"d": 1}}}}).toHaveProperty('a,b,c,d', 1) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toHaveProperty<dim>(</><green>path</><dim>, </><green>value</><dim>)</>

Expected path: <green>[\\"a\\", \\"b\\", \\"c\\", \\"d\\"]</>

Expected value: not <green>1</>"
`;

exports[`.toHaveProperty() {pass: true} expect({"a": {"b": {"c": {"d": 1}}}}).toHaveProperty('a.b.c.d') 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toHaveProperty<dim>(</><green>path</><dim>)</>

Expected path: not <green>\\"a.b.c.d\\"</>

Received value: 1</>"
`;

exports[`.toHaveProperty() {pass: true} expect({"a": {"b": {"c": {"d": 1}}}}).toHaveProperty('a.b.c.d', 1) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toHaveProperty<dim>(</><green>path</><dim>, </><green>value</><dim>)</>

Expected path: <green>\\"a.b.c.d\\"</>

Expected value: not <green>1</>"
`;

exports[`.toHaveProperty() {pass: true} expect({"a": {"b": {"c": 5}}}).toHaveProperty('a.b', {"c": 5}) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toHaveProperty<dim>(</><green>path</><dim>, </><green>value</><dim>)</>

Expected path: <green>\\"a.b\\"</>

Expected value: not <green>{\\"c\\": 5}</>"
`;

exports[`.toHaveProperty() {pass: true} expect({"a": {"b": undefined}}).toHaveProperty('a.b') 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toHaveProperty<dim>(</><green>path</><dim>)</>

Expected path: not <green>\\"a.b\\"</>

Received value: undefined</>"
`;

exports[`.toHaveProperty() {pass: true} expect({"a": {"b": undefined}}).toHaveProperty('a.b', undefined) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toHaveProperty<dim>(</><green>path</><dim>, </><green>value</><dim>)</>

Expected path: <green>\\"a.b\\"</>

Expected value: not <green>undefined</>"
`;

exports[`.toHaveProperty() {pass: true} expect({"a": {}}).toHaveProperty('a.b', undefined) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toHaveProperty<dim>(</><green>path</><dim>, </><green>value</><dim>)</>

Expected path: <green>\\"a.b\\"</>
Received path: \\"a\\"</>

Expected value: not <green>undefined</>
Received value:     {}</>

<dim>Because a positive assertion passes for expected value undefined if the property does not exist, this negative assertion fails unless the property does exist and has a defined value</>"
`;

exports[`.toHaveProperty() {pass: true} expect({"a": 0}).toHaveProperty('a') 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toHaveProperty<dim>(</><green>path</><dim>)</>

Expected path: not <green>\\"a\\"</>

Received value: 0</>"
`;

exports[`.toHaveProperty() {pass: true} expect({"a": 0}).toHaveProperty('a', 0) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toHaveProperty<dim>(</><green>path</><dim>, </><green>value</><dim>)</>

Expected path: <green>\\"a\\"</>

Expected value: not <green>0</>"
`;

exports[`.toHaveProperty() {pass: true} expect({"a.b.c.d": 1}).toHaveProperty('a.b.c.d') 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toHaveProperty<dim>(</><green>path</><dim>)</>

Expected path: not <green>[\\"a.b.c.d\\"]</>

Received value: 1</>"
`;

exports[`.toHaveProperty() {pass: true} expect({"a.b.c.d": 1}).toHaveProperty('a.b.c.d', 1) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toHaveProperty<dim>(</><green>path</><dim>, </><green>value</><dim>)</>

Expected path: <green>[\\"a.b.c.d\\"]</>

Expected value: not <green>1</>"
`;

exports[`.toHaveProperty() {pass: true} expect({"nodeName": "DIV"}).toHaveProperty('nodeType', 1) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toHaveProperty<dim>(</><green>path</><dim>, </><green>value</><dim>)</>

Expected path: <green>\\"nodeType\\"</>

Expected value: not <green>1</>"
`;

exports[`.toHaveProperty() {pass: true} expect({"property": 1}).toHaveProperty('property', 1) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toHaveProperty<dim>(</><green>path</><dim>, </><green>value</><dim>)</>

Expected path: <green>\\"property\\"</>

Expected value: not <green>1</>"
`;

exports[`.toHaveProperty() {pass: true} expect({"val": true}).toHaveProperty('a', undefined) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toHaveProperty<dim>(</><green>path</><dim>, </><green>value</><dim>)</>

Expected path: <green>\\"a\\"</>

Expected value: not <green>undefined</>"
`;

exports[`.toHaveProperty() {pass: true} expect({"val": true}).toHaveProperty('c', "c") 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toHaveProperty<dim>(</><green>path</><dim>, </><green>value</><dim>)</>

Expected path: <green>\\"c\\"</>

Expected value: not <green>\\"c\\"</>"
`;

exports[`.toHaveProperty() {pass: true} expect({"val": true}).toHaveProperty('val', true) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toHaveProperty<dim>(</><green>path</><dim>, </><green>value</><dim>)</>

Expected path: <green>\\"val\\"</>

Expected value: not <green>true</>"
`;

exports[`.toHaveProperty() {pass: true} expect({}).toHaveProperty('a', undefined) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toHaveProperty<dim>(</><green>path</><dim>, </><green>value</><dim>)</>

Expected path: <green>\\"a\\"</>

Expected value: not <green>undefined</>"
`;

exports[`.toHaveProperty() {pass: true} expect({}).toHaveProperty('b', "b") 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toHaveProperty<dim>(</><green>path</><dim>, </><green>value</><dim>)</>

Expected path: <green>\\"b\\"</>

Expected value: not <green>\\"b\\"</>"
`;

exports[`.toHaveProperty() {pass: true} expect({}).toHaveProperty('setter', undefined) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toHaveProperty<dim>(</><green>path</><dim>, </><green>value</><dim>)</>

Expected path: <green>\\"setter\\"</>

Expected value: not <green>undefined</>"
`;

exports[`.toMatch() {pass: true} expect(Foo bar).toMatch(/^foo/i) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toMatch<dim>(</><green>expected</><dim>)</>

Expected pattern: not <green>/^foo/i</>
Received string:      \\"<inverse>Foo</> bar\\"</>"
`;

exports[`.toMatch() {pass: true} expect(foo).toMatch(foo) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toMatch<dim>(</><green>expected</><dim>)</>

Expected substring: not <green>\\"foo\\"</>
Received string:        \\"<inverse>foo</>\\"</>"
`;

exports[`.toMatch() throws if non String actual value passed: [/foo/i, "foo"] 1`] = `
"<dim>expect(</>received</><dim>).</>toMatch<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: received</> value must be a string

Received has type:  regexp
Received has value: /foo/i</>"
`;

exports[`.toMatch() throws if non String actual value passed: [[], "foo"] 1`] = `
"<dim>expect(</>received</><dim>).</>toMatch<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: received</> value must be a string

Received has type:  array
Received has value: []</>"
`;

exports[`.toMatch() throws if non String actual value passed: [[Function anonymous], "foo"] 1`] = `
"<dim>expect(</>received</><dim>).</>toMatch<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: received</> value must be a string

Received has type:  function
Received has value: [Function anonymous]</>"
`;

exports[`.toMatch() throws if non String actual value passed: [{}, "foo"] 1`] = `
"<dim>expect(</>received</><dim>).</>toMatch<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: received</> value must be a string

Received has type:  object
Received has value: {}</>"
`;

exports[`.toMatch() throws if non String actual value passed: [1, "foo"] 1`] = `
"<dim>expect(</>received</><dim>).</>toMatch<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: received</> value must be a string

Received has type:  number
Received has value: 1</>"
`;

exports[`.toMatch() throws if non String actual value passed: [true, "foo"] 1`] = `
"<dim>expect(</>received</><dim>).</>toMatch<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: received</> value must be a string

Received has type:  boolean
Received has value: true</>"
`;

exports[`.toMatch() throws if non String actual value passed: [undefined, "foo"] 1`] = `
"<dim>expect(</>received</><dim>).</>toMatch<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: received</> value must be a string

Received has value: undefined</>"
`;

exports[`.toMatch() throws if non String/RegExp expected value passed: ["foo", []] 1`] = `
"<dim>expect(</>received</><dim>).</>toMatch<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a string or regular expression

Expected has type:  array
Expected has value: <green>[]</>"
`;

exports[`.toMatch() throws if non String/RegExp expected value passed: ["foo", [Function anonymous]] 1`] = `
"<dim>expect(</>received</><dim>).</>toMatch<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a string or regular expression

Expected has type:  function
Expected has value: <green>[Function anonymous]</>"
`;

exports[`.toMatch() throws if non String/RegExp expected value passed: ["foo", {}] 1`] = `
"<dim>expect(</>received</><dim>).</>toMatch<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a string or regular expression

Expected has type:  object
Expected has value: <green>{}</>"
`;

exports[`.toMatch() throws if non String/RegExp expected value passed: ["foo", 1] 1`] = `
"<dim>expect(</>received</><dim>).</>toMatch<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a string or regular expression

Expected has type:  number
Expected has value: <green>1</>"
`;

exports[`.toMatch() throws if non String/RegExp expected value passed: ["foo", true] 1`] = `
"<dim>expect(</>received</><dim>).</>toMatch<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a string or regular expression

Expected has type:  boolean
Expected has value: <green>true</>"
`;

exports[`.toMatch() throws if non String/RegExp expected value passed: ["foo", undefined] 1`] = `
"<dim>expect(</>received</><dim>).</>toMatch<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a string or regular expression

Expected has value: <green>undefined</>"
`;

exports[`.toMatch() throws: [bar, /foo/] 1`] = `
"<dim>expect(</>received</><dim>).</>toMatch<dim>(</><green>expected</><dim>)</>

Expected pattern: <green>/foo/</>
Received string:  \\"bar\\"</>"
`;

exports[`.toMatch() throws: [bar, foo] 1`] = `
"<dim>expect(</>received</><dim>).</>toMatch<dim>(</><green>expected</><dim>)</>

Expected substring: <green>\\"foo\\"</>
Received string:    \\"bar\\"</>"
`;

exports[`.toStrictEqual() displays substring diff 1`] = `
"<dim>expect(</>received</><dim>).</>toStrictEqual<dim>(</><green>expected</><dim>) // deep equality</>

Expected: <green>\\"<inverse>Another caveat is that</> Jest will not typecheck your tests.\\"</>
Received: \\"<inverse>Because TypeScript support in Babel is just transpilation,</> Jest will not type<inverse>-</>check your tests<inverse> as they run</>.\\"</>"
`;

exports[`.toStrictEqual() displays substring diff for multiple lines 1`] = `
"<dim>expect(</>received</><dim>).</>toStrictEqual<dim>(</><green>expected</><dim>) // deep equality</>

<red>- Expected</>
+ Received</>

<red>-     6<inverse>9</> |Â·</>
+     6<inverse>8</> |Â·</>
<red>-     <inverse>70</> | test('assert.doesNotThrow', () => {</>
+     <inverse>69</> | test('assert.doesNotThrow', () => {</>
<red>-   > 7<inverse>1</> |   assert.doesNotThrow(() => {</>
+   > 7<inverse>0</> |   assert.doesNotThrow(() => {</>
<dim>         |          ^</>
<red>-     7<inverse>2</> |     throw Error('err!');</>
+     7<inverse>1</> |     throw Error('err!');</>
<red>-     7<inverse>3</> |   });</>
+     7<inverse>2</> |   });</>
<red>-     7<inverse>4</> | });</>
+     7<inverse>3</> | });</>
<red>-     at Object.doesNotThrow (__tests__/assertionError.test.js:7<inverse>1</>:10)</>
+     at Object.doesNotThrow (__tests__/assertionError.test.js:7<inverse>0</>:10)</>"
`;

exports[`.toStrictEqual() matches the expected snapshot when it fails 1`] = `
"<dim>expect(</>received</><dim>).</>toStrictEqual<dim>(</><green>expected</><dim>) // deep equality</>

<red>- Expected</>
+ Received</>

<dim>  Object {</>
<red>-   \\"test\\": TestClassA {</>
<red>-     \\"a\\": 1,</>
<red>-     \\"b\\": 2,</>
<red>-   },</>
+   \\"test\\": 2,</>
<dim>  }</>"
`;

exports[`.toStrictEqual() matches the expected snapshot when it fails 2`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toStrictEqual<dim>(</><green>expected</><dim>) // deep equality</>

Expected: not <green>{\\"test\\": {\\"a\\": 1, \\"b\\": 2}}</>
"
`;

exports[`toMatchObject() {pass: false} expect([0]).toMatchObject([-0]) 1`] = `
"<dim>expect(</>received</><dim>).</>toMatchObject<dim>(</><green>expected</><dim>)</>

<red>- Expected</>
+ Received</>

<dim>  Array [</>
<red>-   -0,</>
+   0,</>
<dim>  ]</>"
`;

exports[`toMatchObject() {pass: false} expect([1, 2, 3]).toMatchObject([1, 2, 2]) 1`] = `
"<dim>expect(</>received</><dim>).</>toMatchObject<dim>(</><green>expected</><dim>)</>

<red>- Expected</>
+ Received</>

<dim>  Array [</>
<dim>    1,</>
<dim>    2,</>
<red>-   2,</>
+   3,</>
<dim>  ]</>"
`;

exports[`toMatchObject() {pass: false} expect([1, 2, 3]).toMatchObject([2, 3, 1]) 1`] = `
"<dim>expect(</>received</><dim>).</>toMatchObject<dim>(</><green>expected</><dim>)</>

<red>- Expected</>
+ Received</>

<dim>  Array [</>
+   1,</>
<dim>    2,</>
<dim>    3,</>
<red>-   1,</>
<dim>  ]</>"
`;

exports[`toMatchObject() {pass: false} expect([1, 2]).toMatchObject([1, 3]) 1`] = `
"<dim>expect(</>received</><dim>).</>toMatchObject<dim>(</><green>expected</><dim>)</>

<red>- Expected</>
+ Received</>

<dim>  Array [</>
<dim>    1,</>
<red>-   3,</>
+   2,</>
<dim>  ]</>"
`;

exports[`toMatchObject() {pass: false} expect([Error: foo]).toMatchObject([Error: bar]) 1`] = `
"<dim>expect(</>received</><dim>).</>toMatchObject<dim>(</><green>expected</><dim>)</>

Expected: <green>[Error: bar]</>
Received: [Error: foo]</>"
`;

exports[`toMatchObject() {pass: false} expect({"a": "a", "c": "d"}).toMatchObject({"a": Any<Number>}) 1`] = `
"<dim>expect(</>received</><dim>).</>toMatchObject<dim>(</><green>expected</><dim>)</>

<red>- Expected</>
+ Received</>

<dim>  Object {</>
<red>-   \\"a\\": Any<Number>,</>
+   \\"a\\": \\"a\\",</>
<dim>  }</>"
`;

exports[`toMatchObject() {pass: false} expect({"a": "b", "c": "d"}).toMatchObject({"a": "b!", "c": "d"}) 1`] = `
"<dim>expect(</>received</><dim>).</>toMatchObject<dim>(</><green>expected</><dim>)</>

<red>- Expected</>
+ Received</>

<dim>  Object {</>
<red>-   \\"a\\": \\"b!\\",</>
+   \\"a\\": \\"b\\",</>
<dim>    \\"c\\": \\"d\\",</>
<dim>  }</>"
`;

exports[`toMatchObject() {pass: false} expect({"a": "b", "c": "d"}).toMatchObject({"e": "b"}) 1`] = `
"<dim>expect(</>received</><dim>).</>toMatchObject<dim>(</><green>expected</><dim>)</>

<red>- Expected</>
+ Received</>

<dim>  Object {</>
<red>-   \\"e\\": \\"b\\",</>
+   \\"a\\": \\"b\\",</>
+   \\"c\\": \\"d\\",</>
<dim>  }</>"
`;

exports[`toMatchObject() {pass: false} expect({"a": "b", "t": {"x": {"r": "r"}, "z": "z"}}).toMatchObject({"a": "b", "t": {"z": [3]}}) 1`] = `
"<dim>expect(</>received</><dim>).</>toMatchObject<dim>(</><green>expected</><dim>)</>

<red>- Expected</>
+ Received</>

<dim>  Object {</>
<dim>    \\"a\\": \\"b\\",</>
<dim>    \\"t\\": Object {</>
<red>-     \\"z\\": Array [</>
<red>-       3,</>
<red>-     ],</>
+     \\"z\\": \\"z\\",</>
<dim>    },</>
<dim>  }</>"
`;

exports[`toMatchObject() {pass: false} expect({"a": "b", "t": {"x": {"r": "r"}, "z": "z"}}).toMatchObject({"t": {"l": {"r": "r"}}}) 1`] = `
"<dim>expect(</>received</><dim>).</>toMatchObject<dim>(</><green>expected</><dim>)</>

<red>- Expected</>
+ Received</>

<dim>  Object {</>
<dim>    \\"t\\": Object {</>
<red>-     \\"l\\": Object {</>
+     \\"x\\": Object {</>
<dim>        \\"r\\": \\"r\\",</>
<dim>      },</>
+     \\"z\\": \\"z\\",</>
<dim>    },</>
<dim>  }</>"
`;

exports[`toMatchObject() {pass: false} expect({"a": "b"}).toMatchObject({"c": "d"}) 1`] = `
"<dim>expect(</>received</><dim>).</>toMatchObject<dim>(</><green>expected</><dim>)</>

<red>- Expected</>
+ Received</>

<dim>  Object {</>
<red>-   \\"c\\": \\"d\\",</>
+   \\"a\\": \\"b\\",</>
<dim>  }</>"
`;

exports[`toMatchObject() {pass: false} expect({"a": [{"a": "a", "b": "b"}]}).toMatchObject({"a": [{"a": "c"}]}) 1`] = `
"<dim>expect(</>received</><dim>).</>toMatchObject<dim>(</><green>expected</><dim>)</>

<red>- Expected</>
+ Received</>

<dim>  Object {</>
<dim>    \\"a\\": Array [</>
<dim>      Object {</>
<red>-       \\"a\\": \\"c\\",</>
+       \\"a\\": \\"a\\",</>
<dim>      },</>
<dim>    ],</>
<dim>  }</>"
`;

exports[`toMatchObject() {pass: false} expect({"a": [3, 4, "v"], "b": "b"}).toMatchObject({"a": ["v"]}) 1`] = `
"<dim>expect(</>received</><dim>).</>toMatchObject<dim>(</><green>expected</><dim>)</>

<red>- Expected</>
+ Received</>

<dim>  Object {</>
<dim>    \\"a\\": Array [</>
+     3,</>
+     4,</>
<dim>      \\"v\\",</>
<dim>    ],</>
<dim>  }</>"
`;

exports[`toMatchObject() {pass: false} expect({"a": [3, 4, 5], "b": "b"}).toMatchObject({"a": [3, 4, 5, 6]}) 1`] = `
"<dim>expect(</>received</><dim>).</>toMatchObject<dim>(</><green>expected</><dim>)</>

<red>- Expected</>
+ Received</>

<dim>  Object {</>
<dim>    \\"a\\": Array [</>
<dim>      3,</>
<dim>      4,</>
<dim>      5,</>
<red>-     6,</>
<dim>    ],</>
<dim>  }</>"
`;

exports[`toMatchObject() {pass: false} expect({"a": [3, 4, 5], "b": "b"}).toMatchObject({"a": [3, 4]}) 1`] = `
"<dim>expect(</>received</><dim>).</>toMatchObject<dim>(</><green>expected</><dim>)</>

<red>- Expected</>
+ Received</>

<dim>  Object {</>
<dim>    \\"a\\": Array [</>
<dim>      3,</>
<dim>      4,</>
+     5,</>
<dim>    ],</>
<dim>  }</>"
`;

exports[`toMatchObject() {pass: false} expect({"a": [3, 4, 5], "b": "b"}).toMatchObject({"a": {"b": 4}}) 1`] = `
"<dim>expect(</>received</><dim>).</>toMatchObject<dim>(</><green>expected</><dim>)</>

<red>- Expected</>
+ Received</>

<dim>  Object {</>
<red>-   \\"a\\": Object {</>
<red>-     \\"b\\": 4,</>
<red>-   },</>
+   \\"a\\": Array [</>
+     3,</>
+     4,</>
+     5,</>
+   ],</>
<dim>  }</>"
`;

exports[`toMatchObject() {pass: false} expect({"a": [3, 4, 5], "b": "b"}).toMatchObject({"a": {"b": Any<String>}}) 1`] = `
"<dim>expect(</>received</><dim>).</>toMatchObject<dim>(</><green>expected</><dim>)</>

<red>- Expected</>
+ Received</>

<dim>  Object {</>
<red>-   \\"a\\": Object {</>
<red>-     \\"b\\": Any<String>,</>
<red>-   },</>
+   \\"a\\": Array [</>
+     3,</>
+     4,</>
+     5,</>
+   ],</>
<dim>  }</>"
`;

exports[`toMatchObject() {pass: false} expect({"a": 1, "b": 1, "c": 1, "d": {"e": {"f": 555}}}).toMatchObject({"d": {"e": {"f": 222}}}) 1`] = `
"<dim>expect(</>received</><dim>).</>toMatchObject<dim>(</><green>expected</><dim>)</>

<red>- Expected</>
+ Received</>

<dim>  Object {</>
<dim>    \\"d\\": Object {</>
<dim>      \\"e\\": Object {</>
<red>-       \\"f\\": 222,</>
+       \\"f\\": 555,</>
<dim>      },</>
<dim>    },</>
<dim>  }</>"
`;

exports[`toMatchObject() {pass: false} expect({"a": 2015-11-30T00:00:00.000Z, "b": "b"}).toMatchObject({"a": 2015-10-10T00:00:00.000Z}) 1`] = `
"<dim>expect(</>received</><dim>).</>toMatchObject<dim>(</><green>expected</><dim>)</>

<red>- Expected</>
+ Received</>

<dim>  Object {</>
<red>-   \\"a\\": 2015-10-10T00:00:00.000Z,</>
+   \\"a\\": 2015-11-30T00:00:00.000Z,</>
<dim>  }</>"
`;

exports[`toMatchObject() {pass: false} expect({"a": null, "b": "b"}).toMatchObject({"a": "4"}) 1`] = `
"<dim>expect(</>received</><dim>).</>toMatchObject<dim>(</><green>expected</><dim>)</>

<red>- Expected</>
+ Received</>

<dim>  Object {</>
<red>-   \\"a\\": \\"4\\",</>
+   \\"a\\": null,</>
<dim>  }</>"
`;

exports[`toMatchObject() {pass: false} expect({"a": null, "b": "b"}).toMatchObject({"a": undefined}) 1`] = `
"<dim>expect(</>received</><dim>).</>toMatchObject<dim>(</><green>expected</><dim>)</>

<red>- Expected</>
+ Received</>

<dim>  Object {</>
<red>-   \\"a\\": undefined,</>
+   \\"a\\": null,</>
<dim>  }</>"
`;

exports[`toMatchObject() {pass: false} expect({"a": undefined}).toMatchObject({"a": null}) 1`] = `
"<dim>expect(</>received</><dim>).</>toMatchObject<dim>(</><green>expected</><dim>)</>

<red>- Expected</>
+ Received</>

<dim>  Object {</>
<red>-   \\"a\\": null,</>
+   \\"a\\": undefined,</>
<dim>  }</>"
`;

exports[`toMatchObject() {pass: false} expect({}).toMatchObject({"a": undefined}) 1`] = `
"<dim>expect(</>received</><dim>).</>toMatchObject<dim>(</><green>expected</><dim>)</>

<red>- Expected</>
+ Received</>

<red>- Object {</>
<red>-   \\"a\\": undefined,</>
<red>- }</>
+ Object {}</>"
`;

exports[`toMatchObject() {pass: false} expect(2015-11-30T00:00:00.000Z).toMatchObject(2015-10-10T00:00:00.000Z) 1`] = `
"<dim>expect(</>received</><dim>).</>toMatchObject<dim>(</><green>expected</><dim>)</>

Expected: <green>2015-10-10T00:00:00.000Z</>
Received: 2015-11-30T00:00:00.000Z</>"
`;

exports[`toMatchObject() {pass: false} expect(Set {1, 2}).toMatchObject(Set {2}) 1`] = `
"<dim>expect(</>received</><dim>).</>toMatchObject<dim>(</><green>expected</><dim>)</>

<red>- Expected</>
+ Received</>

<dim>  Set {</>
+   1,</>
<dim>    2,</>
<dim>  }</>"
`;

exports[`toMatchObject() {pass: true} expect([]).toMatchObject([]) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toMatchObject<dim>(</><green>expected</><dim>)</>

Expected: not <green>[]</>"
`;

exports[`toMatchObject() {pass: true} expect([1, 2]).toMatchObject([1, 2]) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toMatchObject<dim>(</><green>expected</><dim>)</>

Expected: not <green>[1, 2]</>"
`;

exports[`toMatchObject() {pass: true} expect([Error: bar]).toMatchObject({"message": "bar"}) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toMatchObject<dim>(</><green>expected</><dim>)</>

Expected: not <green>{\\"message\\": \\"bar\\"}</>
Received:     [Error: bar]</>"
`;

exports[`toMatchObject() {pass: true} expect([Error: foo]).toMatchObject([Error: foo]) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toMatchObject<dim>(</><green>expected</><dim>)</>

Expected: not <green>[Error: foo]</>"
`;

exports[`toMatchObject() {pass: true} expect({"a": "b", "c": "d"}).toMatchObject({"a": "b", "c": "d"}) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toMatchObject<dim>(</><green>expected</><dim>)</>

Expected: not <green>{\\"a\\": \\"b\\", \\"c\\": \\"d\\"}</>"
`;

exports[`toMatchObject() {pass: true} expect({"a": "b", "c": "d"}).toMatchObject({"a": "b"}) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toMatchObject<dim>(</><green>expected</><dim>)</>

Expected: not <green>{\\"a\\": \\"b\\"}</>
Received:     {\\"a\\": \\"b\\", \\"c\\": \\"d\\"}</>"
`;

exports[`toMatchObject() {pass: true} expect({"a": "b", "t": {"x": {"r": "r"}, "z": "z"}}).toMatchObject({"a": "b", "t": {"z": "z"}}) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toMatchObject<dim>(</><green>expected</><dim>)</>

Expected: not <green>{\\"a\\": \\"b\\", \\"t\\": {\\"z\\": \\"z\\"}}</>
Received:     {\\"a\\": \\"b\\", \\"t\\": {\\"x\\": {\\"r\\": \\"r\\"}, \\"z\\": \\"z\\"}}</>"
`;

exports[`toMatchObject() {pass: true} expect({"a": "b", "t": {"x": {"r": "r"}, "z": "z"}}).toMatchObject({"t": {"x": {"r": "r"}}}) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toMatchObject<dim>(</><green>expected</><dim>)</>

Expected: not <green>{\\"t\\": {\\"x\\": {\\"r\\": \\"r\\"}}}</>
Received:     {\\"a\\": \\"b\\", \\"t\\": {\\"x\\": {\\"r\\": \\"r\\"}, \\"z\\": \\"z\\"}}</>"
`;

exports[`toMatchObject() {pass: true} expect({"a": "b"}).toMatchObject({"a": "b"}) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toMatchObject<dim>(</><green>expected</><dim>)</>

Expected: not <green>{\\"a\\": \\"b\\"}</>"
`;

exports[`toMatchObject() {pass: true} expect({"a": [{"a": "a", "b": "b"}]}).toMatchObject({"a": [{"a": "a"}]}) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toMatchObject<dim>(</><green>expected</><dim>)</>

Expected: not <green>{\\"a\\": [{\\"a\\": \\"a\\"}]}</>
Received:     {\\"a\\": [{\\"a\\": \\"a\\", \\"b\\": \\"b\\"}]}</>"
`;

exports[`toMatchObject() {pass: true} expect({"a": [3, 4, 5, "v"], "b": "b"}).toMatchObject({"a": [3, 4, 5, "v"]}) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toMatchObject<dim>(</><green>expected</><dim>)</>

Expected: not <green>{\\"a\\": [3, 4, 5, \\"v\\"]}</>
Received:     {\\"a\\": [3, 4, 5, \\"v\\"], \\"b\\": \\"b\\"}</>"
`;

exports[`toMatchObject() {pass: true} expect({"a": [3, 4, 5], "b": "b"}).toMatchObject({"a": [3, 4, 5]}) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toMatchObject<dim>(</><green>expected</><dim>)</>

Expected: not <green>{\\"a\\": [3, 4, 5]}</>
Received:     {\\"a\\": [3, 4, 5], \\"b\\": \\"b\\"}</>"
`;

exports[`toMatchObject() {pass: true} expect({"a": {"x": "x", "y": "y"}}).toMatchObject({"a": {"x": Any<String>}}) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toMatchObject<dim>(</><green>expected</><dim>)</>

Expected: not <green>{\\"a\\": {\\"x\\": Any<String>}}</>
Received:     {\\"a\\": {\\"x\\": \\"x\\", \\"y\\": \\"y\\"}}</>"
`;

exports[`toMatchObject() {pass: true} expect({"a": 1, "c": 2}).toMatchObject({"a": Any<Number>}) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toMatchObject<dim>(</><green>expected</><dim>)</>

Expected: not <green>{\\"a\\": Any<Number>}</>
Received:     {\\"a\\": 1, \\"c\\": 2}</>"
`;

exports[`toMatchObject() {pass: true} expect({"a": 2015-11-30T00:00:00.000Z, "b": "b"}).toMatchObject({"a": 2015-11-30T00:00:00.000Z}) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toMatchObject<dim>(</><green>expected</><dim>)</>

Expected: not <green>{\\"a\\": 2015-11-30T00:00:00.000Z}</>
Received:     {\\"a\\": 2015-11-30T00:00:00.000Z, \\"b\\": \\"b\\"}</>"
`;

exports[`toMatchObject() {pass: true} expect({"a": null, "b": "b"}).toMatchObject({"a": null}) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toMatchObject<dim>(</><green>expected</><dim>)</>

Expected: not <green>{\\"a\\": null}</>
Received:     {\\"a\\": null, \\"b\\": \\"b\\"}</>"
`;

exports[`toMatchObject() {pass: true} expect({"a": undefined, "b": "b"}).toMatchObject({"a": undefined}) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toMatchObject<dim>(</><green>expected</><dim>)</>

Expected: not <green>{\\"a\\": undefined}</>
Received:     {\\"a\\": undefined, \\"b\\": \\"b\\"}</>"
`;

exports[`toMatchObject() {pass: true} expect({"a": undefined}).toMatchObject({"a": undefined}) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toMatchObject<dim>(</><green>expected</><dim>)</>

Expected: not <green>{\\"a\\": undefined}</>"
`;

exports[`toMatchObject() {pass: true} expect({}).toMatchObject({"a": undefined, "b": "b"}) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toMatchObject<dim>(</><green>expected</><dim>)</>

Expected: not <green>{\\"a\\": undefined, \\"b\\": \\"b\\"}</>
Received:     {}</>"
`;

exports[`toMatchObject() {pass: true} expect(2015-11-30T00:00:00.000Z).toMatchObject(2015-11-30T00:00:00.000Z) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toMatchObject<dim>(</><green>expected</><dim>)</>

Expected: not <green>2015-11-30T00:00:00.000Z</>"
`;

exports[`toMatchObject() {pass: true} expect(Set {1, 2}).toMatchObject(Set {1, 2}) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toMatchObject<dim>(</><green>expected</><dim>)</>

Expected: not <green>Set {1, 2}</>"
`;

exports[`toMatchObject() {pass: true} expect(Set {1, 2}).toMatchObject(Set {2, 1}) 1`] = `
"<dim>expect(</>received</><dim>).</>not<dim>.</>toMatchObject<dim>(</><green>expected</><dim>)</>

Expected: not <green>Set {2, 1}</>
Received:     Set {1, 2}</>"
`;

exports[`toMatchObject() throws expect("44").toMatchObject({}) 1`] = `
"<dim>expect(</>received</><dim>).</>toMatchObject<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: received</> value must be a non-null object

Received has type:  string
Received has value: \\"44\\"</>"
`;

exports[`toMatchObject() throws expect({}).toMatchObject("some string") 1`] = `
"<dim>expect(</>received</><dim>).</>toMatchObject<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-null object

Expected has type:  string
Expected has value: <green>\\"some string\\"</>"
`;

exports[`toMatchObject() throws expect({}).toMatchObject(4) 1`] = `
"<dim>expect(</>received</><dim>).</>toMatchObject<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-null object

Expected has type:  number
Expected has value: <green>4</>"
`;

exports[`toMatchObject() throws expect({}).toMatchObject(null) 1`] = `
"<dim>expect(</>received</><dim>).</>toMatchObject<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-null object

Expected has value: <green>null</>"
`;

exports[`toMatchObject() throws expect({}).toMatchObject(true) 1`] = `
"<dim>expect(</>received</><dim>).</>toMatchObject<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-null object

Expected has type:  boolean
Expected has value: <green>true</>"
`;

exports[`toMatchObject() throws expect({}).toMatchObject(undefined) 1`] = `
"<dim>expect(</>received</><dim>).</>toMatchObject<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-null object

Expected has value: <green>undefined</>"
`;

exports[`toMatchObject() throws expect(4).toMatchObject({}) 1`] = `
"<dim>expect(</>received</><dim>).</>toMatchObject<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: received</> value must be a non-null object

Received has type:  number
Received has value: 4</>"
`;

exports[`toMatchObject() throws expect(null).toMatchObject({}) 1`] = `
"<dim>expect(</>received</><dim>).</>toMatchObject<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: received</> value must be a non-null object

Received has value: null</>"
`;

exports[`toMatchObject() throws expect(true).toMatchObject({}) 1`] = `
"<dim>expect(</>received</><dim>).</>toMatchObject<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: received</> value must be a non-null object

Received has type:  boolean
Received has value: true</>"
`;

exports[`toMatchObject() throws expect(undefined).toMatchObject({}) 1`] = `
"<dim>expect(</>received</><dim>).</>toMatchObject<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: received</> value must be a non-null object

Received has value: undefined</>"
`;
