// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should ignore with --ignoreAsymmetricMatches cli option 1`] = `
"FAIL __tests__/asymmetrictMatcher.test.js
  ✕ minimal test
  ✕ jest asymmetricMatcher
  ✕ custom asymmetricMatcher
  ✕ nested object
  ✕ circular
  ✕ transitive circular

  ● minimal test

    expect(received).toEqual(expected) // deep equality

    - Expected  - 1
    + Received  + 1

      Object {
        \\"a\\": Any<Number>,
    -   \\"b\\": 1,
    +   \\"b\\": 2,
      }

       9 |   const expected = {a: expect.any(Number), b: 2};
      10 |   const received = {a: 1, b: 1};
    > 11 |   expect(expected).toEqual(received);
         |                    ^
      12 | });
      13 | 
      14 | test('jest asymmetricMatcher', () => {

      at Object.toEqual (__tests__/asymmetrictMatcher.test.js:11:20)

  ● jest asymmetricMatcher

    expect(received).toEqual(expected) // deep equality

    - Expected  - 1
    + Received  + 1

    @@ -8,7 +8,7 @@
        \\"d\\": StringContaining \\"jest\\",
        \\"e\\": StringMatching /^jest/,
        \\"f\\": ObjectContaining {
          \\"a\\": Any<Date>,
        },
    -   \\"g\\": false,
    +   \\"g\\": true,
      }

      37 |   };
      38 | 
    > 39 |   expect(expected).toEqual(received);
         |                    ^
      40 | });
      41 | 
      42 | test('custom asymmetricMatcher', () => {

      at Object.toEqual (__tests__/asymmetrictMatcher.test.js:39:20)

  ● custom asymmetricMatcher

    expect(received).toEqual(expected) // deep equality

    - Expected  - 1
    + Received  + 1

      Object {
        \\"a\\": equal5<>,
    -   \\"b\\": true,
    +   \\"b\\": false,
      }

      63 |   };
      64 | 
    > 65 |   expect(expected).toEqual(received);
         |                    ^
      66 | });
      67 | 
      68 | test('nested object', () => {

      at Object.toEqual (__tests__/asymmetrictMatcher.test.js:65:20)

  ● nested object

    expect(received).toEqual(expected) // deep equality

    - Expected  - 1
    + Received  + 1

    @@ -2,7 +2,7 @@
        \\"a\\": Any<Number>,
        \\"b\\": Object {
          \\"a\\": 1,
          \\"b\\": Any<Number>,
        },
    -   \\"c\\": 1,
    +   \\"c\\": 2,
      }

      83 |     c: 1,
      84 |   };
    > 85 |   expect(expected).toEqual(received);
         |                    ^
      86 | });
      87 | 
      88 | test('circular', () => {

      at Object.toEqual (__tests__/asymmetrictMatcher.test.js:85:20)

  ● circular

    expect(received).toEqual(expected) // deep equality

    - Expected  - 1
    + Received  + 1

      Object {
        \\"a\\": [Circular],
        \\"b\\": Any<Number>,
    -   \\"c\\": 2,
    +   \\"c\\": 3,
      }

       97 |   };
       98 |   received.a = received;
    >  99 |   expect(expected).toEqual(received);
          |                    ^
      100 | });
      101 | 
      102 | test('transitive circular', () => {

      at Object.toEqual (__tests__/asymmetrictMatcher.test.js:99:20)

  ● transitive circular

    expect(received).toEqual(expected) // deep equality

    - Expected  - 1
    + Received  + 1

      Object {
    -   \\"a\\": 2,
    +   \\"a\\": 3,
        \\"nested\\": Object {
          \\"b\\": Any<Number>,
          \\"parent\\": [Circular],
        },
      }

      109 |   };
      110 |   received.nested = {b: 2, parent: received};
    > 111 |   expect(expected).toEqual(received);
          |                    ^
      112 | });
      113 | 

      at Object.toEqual (__tests__/asymmetrictMatcher.test.js:111:20)"
`;

exports[`should ignore with ignoreAsymmetricMatches=true in config 1`] = `
"FAIL __tests__/asymmetrictMatcher.test.js
  ✕ minimal test
  ✕ jest asymmetricMatcher
  ✕ custom asymmetricMatcher
  ✕ nested object
  ✕ circular
  ✕ transitive circular

  ● minimal test

    expect(received).toEqual(expected) // deep equality

    - Expected  - 1
    + Received  + 1

      Object {
        \\"a\\": Any<Number>,
    -   \\"b\\": 1,
    +   \\"b\\": 2,
      }

       9 |   const expected = {a: expect.any(Number), b: 2};
      10 |   const received = {a: 1, b: 1};
    > 11 |   expect(expected).toEqual(received);
         |                    ^
      12 | });
      13 | 
      14 | test('jest asymmetricMatcher', () => {

      at Object.toEqual (__tests__/asymmetrictMatcher.test.js:11:20)

  ● jest asymmetricMatcher

    expect(received).toEqual(expected) // deep equality

    - Expected  - 1
    + Received  + 1

    @@ -8,7 +8,7 @@
        \\"d\\": StringContaining \\"jest\\",
        \\"e\\": StringMatching /^jest/,
        \\"f\\": ObjectContaining {
          \\"a\\": Any<Date>,
        },
    -   \\"g\\": false,
    +   \\"g\\": true,
      }

      37 |   };
      38 | 
    > 39 |   expect(expected).toEqual(received);
         |                    ^
      40 | });
      41 | 
      42 | test('custom asymmetricMatcher', () => {

      at Object.toEqual (__tests__/asymmetrictMatcher.test.js:39:20)

  ● custom asymmetricMatcher

    expect(received).toEqual(expected) // deep equality

    - Expected  - 1
    + Received  + 1

      Object {
        \\"a\\": equal5<>,
    -   \\"b\\": true,
    +   \\"b\\": false,
      }

      63 |   };
      64 | 
    > 65 |   expect(expected).toEqual(received);
         |                    ^
      66 | });
      67 | 
      68 | test('nested object', () => {

      at Object.toEqual (__tests__/asymmetrictMatcher.test.js:65:20)

  ● nested object

    expect(received).toEqual(expected) // deep equality

    - Expected  - 1
    + Received  + 1

    @@ -2,7 +2,7 @@
        \\"a\\": Any<Number>,
        \\"b\\": Object {
          \\"a\\": 1,
          \\"b\\": Any<Number>,
        },
    -   \\"c\\": 1,
    +   \\"c\\": 2,
      }

      83 |     c: 1,
      84 |   };
    > 85 |   expect(expected).toEqual(received);
         |                    ^
      86 | });
      87 | 
      88 | test('circular', () => {

      at Object.toEqual (__tests__/asymmetrictMatcher.test.js:85:20)

  ● circular

    expect(received).toEqual(expected) // deep equality

    - Expected  - 1
    + Received  + 1

      Object {
        \\"a\\": [Circular],
        \\"b\\": Any<Number>,
    -   \\"c\\": 2,
    +   \\"c\\": 3,
      }

       97 |   };
       98 |   received.a = received;
    >  99 |   expect(expected).toEqual(received);
          |                    ^
      100 | });
      101 | 
      102 | test('transitive circular', () => {

      at Object.toEqual (__tests__/asymmetrictMatcher.test.js:99:20)

  ● transitive circular

    expect(received).toEqual(expected) // deep equality

    - Expected  - 1
    + Received  + 1

      Object {
    -   \\"a\\": 2,
    +   \\"a\\": 3,
        \\"nested\\": Object {
          \\"b\\": Any<Number>,
          \\"parent\\": [Circular],
        },
      }

      109 |   };
      110 |   received.nested = {b: 2, parent: received};
    > 111 |   expect(expected).toEqual(received);
          |                    ^
      112 | });
      113 | 

      at Object.toEqual (__tests__/asymmetrictMatcher.test.js:111:20)"
`;

exports[`should not ignore in default 1`] = `
"FAIL __tests__/asymmetrictMatcher.test.js
  ✕ minimal test
  ✕ jest asymmetricMatcher
  ✕ custom asymmetricMatcher
  ✕ nested object
  ✕ circular
  ✕ transitive circular

  ● minimal test

    expect(received).toEqual(expected) // deep equality

    - Expected  - 2
    + Received  + 2

      Object {
    -   \\"a\\": 1,
    -   \\"b\\": 1,
    +   \\"a\\": Any<Number>,
    +   \\"b\\": 2,
      }

       9 |   const expected = {a: expect.any(Number), b: 2};
      10 |   const received = {a: 1, b: 1};
    > 11 |   expect(expected).toEqual(received);
         |                    ^
      12 | });
      13 | 
      14 | test('jest asymmetricMatcher', () => {

      at Object.toEqual (__tests__/asymmetrictMatcher.test.js:11:20)

  ● jest asymmetricMatcher

    expect(received).toEqual(expected) // deep equality

    - Expected  - 9
    + Received  + 9

      Object {
    -   \\"a\\": 1,
    -   \\"b\\": \\"anything\\",
    -   \\"c\\": Array [
    +   \\"a\\": Any<Number>,
    +   \\"b\\": Anything,
    +   \\"c\\": ArrayContaining [
          1,
    -     2,
          3,
        ],
    -   \\"d\\": StringContaining \\"jest\\",
    -   \\"e\\": StringMatching /^jest/,
    -   \\"f\\": ObjectContaining {
    -     \\"a\\": Any<Date>,
    +   \\"d\\": \\"jest is awesome\\",
    +   \\"e\\": \\"jest is awesome\\",
    +   \\"f\\": Object {
    +     \\"a\\": 1970-01-01T00:00:00.000Z,
    +     \\"b\\": \\"jest is awesome\\",
        },
    -   \\"g\\": false,
    +   \\"g\\": true,
      }

      37 |   };
      38 | 
    > 39 |   expect(expected).toEqual(received);
         |                    ^
      40 | });
      41 | 
      42 | test('custom asymmetricMatcher', () => {

      at Object.toEqual (__tests__/asymmetrictMatcher.test.js:39:20)

  ● custom asymmetricMatcher

    expect(received).toEqual(expected) // deep equality

    - Expected  - 2
    + Received  + 2

      Object {
    -   \\"a\\": 5,
    -   \\"b\\": true,
    +   \\"a\\": equal5<>,
    +   \\"b\\": false,
      }

      63 |   };
      64 | 
    > 65 |   expect(expected).toEqual(received);
         |                    ^
      66 | });
      67 | 
      68 | test('nested object', () => {

      at Object.toEqual (__tests__/asymmetrictMatcher.test.js:65:20)

  ● nested object

    expect(received).toEqual(expected) // deep equality

    - Expected  - 3
    + Received  + 3

      Object {
    -   \\"a\\": Any<Number>,
    +   \\"a\\": 1,
        \\"b\\": Object {
          \\"a\\": 1,
    -     \\"b\\": 2,
    +     \\"b\\": Any<Number>,
        },
    -   \\"c\\": 1,
    +   \\"c\\": 2,
      }

      83 |     c: 1,
      84 |   };
    > 85 |   expect(expected).toEqual(received);
         |                    ^
      86 | });
      87 | 
      88 | test('circular', () => {

      at Object.toEqual (__tests__/asymmetrictMatcher.test.js:85:20)

  ● circular

    expect(received).toEqual(expected) // deep equality

    - Expected  - 2
    + Received  + 2

      Object {
        \\"a\\": [Circular],
    -   \\"b\\": 2,
    -   \\"c\\": 2,
    +   \\"b\\": Any<Number>,
    +   \\"c\\": 3,
      }

       97 |   };
       98 |   received.a = received;
    >  99 |   expect(expected).toEqual(received);
          |                    ^
      100 | });
      101 | 
      102 | test('transitive circular', () => {

      at Object.toEqual (__tests__/asymmetrictMatcher.test.js:99:20)

  ● transitive circular

    expect(received).toEqual(expected) // deep equality

    - Expected  - 2
    + Received  + 2

      Object {
    -   \\"a\\": 2,
    +   \\"a\\": 3,
        \\"nested\\": Object {
    -     \\"b\\": 2,
    +     \\"b\\": Any<Number>,
          \\"parent\\": [Circular],
        },
      }

      109 |   };
      110 |   received.nested = {b: 2, parent: received};
    > 111 |   expect(expected).toEqual(received);
          |                    ^
      112 | });
      113 | 

      at Object.toEqual (__tests__/asymmetrictMatcher.test.js:111:20)"
`;

exports[`should not ignore with ignoreAsymmetricMatches=false in config 1`] = `
"FAIL __tests__/asymmetrictMatcher.test.js
  ✕ minimal test
  ✕ jest asymmetricMatcher
  ✕ custom asymmetricMatcher
  ✕ nested object
  ✕ circular
  ✕ transitive circular

  ● minimal test

    expect(received).toEqual(expected) // deep equality

    - Expected  - 2
    + Received  + 2

      Object {
    -   \\"a\\": 1,
    -   \\"b\\": 1,
    +   \\"a\\": Any<Number>,
    +   \\"b\\": 2,
      }

       9 |   const expected = {a: expect.any(Number), b: 2};
      10 |   const received = {a: 1, b: 1};
    > 11 |   expect(expected).toEqual(received);
         |                    ^
      12 | });
      13 | 
      14 | test('jest asymmetricMatcher', () => {

      at Object.toEqual (__tests__/asymmetrictMatcher.test.js:11:20)

  ● jest asymmetricMatcher

    expect(received).toEqual(expected) // deep equality

    - Expected  - 9
    + Received  + 9

      Object {
    -   \\"a\\": 1,
    -   \\"b\\": \\"anything\\",
    -   \\"c\\": Array [
    +   \\"a\\": Any<Number>,
    +   \\"b\\": Anything,
    +   \\"c\\": ArrayContaining [
          1,
    -     2,
          3,
        ],
    -   \\"d\\": StringContaining \\"jest\\",
    -   \\"e\\": StringMatching /^jest/,
    -   \\"f\\": ObjectContaining {
    -     \\"a\\": Any<Date>,
    +   \\"d\\": \\"jest is awesome\\",
    +   \\"e\\": \\"jest is awesome\\",
    +   \\"f\\": Object {
    +     \\"a\\": 1970-01-01T00:00:00.000Z,
    +     \\"b\\": \\"jest is awesome\\",
        },
    -   \\"g\\": false,
    +   \\"g\\": true,
      }

      37 |   };
      38 | 
    > 39 |   expect(expected).toEqual(received);
         |                    ^
      40 | });
      41 | 
      42 | test('custom asymmetricMatcher', () => {

      at Object.toEqual (__tests__/asymmetrictMatcher.test.js:39:20)

  ● custom asymmetricMatcher

    expect(received).toEqual(expected) // deep equality

    - Expected  - 2
    + Received  + 2

      Object {
    -   \\"a\\": 5,
    -   \\"b\\": true,
    +   \\"a\\": equal5<>,
    +   \\"b\\": false,
      }

      63 |   };
      64 | 
    > 65 |   expect(expected).toEqual(received);
         |                    ^
      66 | });
      67 | 
      68 | test('nested object', () => {

      at Object.toEqual (__tests__/asymmetrictMatcher.test.js:65:20)

  ● nested object

    expect(received).toEqual(expected) // deep equality

    - Expected  - 3
    + Received  + 3

      Object {
    -   \\"a\\": Any<Number>,
    +   \\"a\\": 1,
        \\"b\\": Object {
          \\"a\\": 1,
    -     \\"b\\": 2,
    +     \\"b\\": Any<Number>,
        },
    -   \\"c\\": 1,
    +   \\"c\\": 2,
      }

      83 |     c: 1,
      84 |   };
    > 85 |   expect(expected).toEqual(received);
         |                    ^
      86 | });
      87 | 
      88 | test('circular', () => {

      at Object.toEqual (__tests__/asymmetrictMatcher.test.js:85:20)

  ● circular

    expect(received).toEqual(expected) // deep equality

    - Expected  - 2
    + Received  + 2

      Object {
        \\"a\\": [Circular],
    -   \\"b\\": 2,
    -   \\"c\\": 2,
    +   \\"b\\": Any<Number>,
    +   \\"c\\": 3,
      }

       97 |   };
       98 |   received.a = received;
    >  99 |   expect(expected).toEqual(received);
          |                    ^
      100 | });
      101 | 
      102 | test('transitive circular', () => {

      at Object.toEqual (__tests__/asymmetrictMatcher.test.js:99:20)

  ● transitive circular

    expect(received).toEqual(expected) // deep equality

    - Expected  - 2
    + Received  + 2

      Object {
    -   \\"a\\": 2,
    +   \\"a\\": 3,
        \\"nested\\": Object {
    -     \\"b\\": 2,
    +     \\"b\\": Any<Number>,
          \\"parent\\": [Circular],
        },
      }

      109 |   };
      110 |   received.nested = {b: 2, parent: received};
    > 111 |   expect(expected).toEqual(received);
          |                    ^
      112 | });
      113 | 

      at Object.toEqual (__tests__/asymmetrictMatcher.test.js:111:20)"
`;
