// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`custom async matchers 1`] = `
Object {
  "rest": "FAIL __tests__/async.test.js
  ✕ showing the stack trace for an async matcher

  ● showing the stack trace for an async matcher

    We expect the stack trace and code fence for this matcher to be shown in the console.

      2 | 
      3 | test('showing the stack trace for an async matcher', async () => {
    > 4 |   await expect(true).toThrowCustomAsyncMatcherError();
        |                      ^
      5 | });
      6 | 
      7 | async function toThrowCustomAsyncMatcherError() {

      at Object.toThrowCustomAsyncMatcherError (__tests__/async.test.js:4:22)

",
  "summary": "Test Suites: 1 failed, 1 total
Tests:       1 failed, 1 total
Snapshots:   0 total
Time:        <<REPLACED>>
Ran all test suites matching /async.test.js/i.
",
}
`;

exports[`works with custom matchers 1`] = `
"FAIL __tests__/async.test.js
  ● showing the stack trace for an async matcher

    We expect the stack trace and code fence for this matcher to be shown in the console.

      2 | 
      3 | test('showing the stack trace for an async matcher', async () => {
    > 4 |   await expect(true).toThrowCustomAsyncMatcherError();
        |                      ^
      5 | });
      6 | 
      7 | async function toThrowCustomAsyncMatcherError() {

      at Object.toThrowCustomAsyncMatcherError (__tests__/async.test.js:4:22)

FAIL __tests__/sync.test.js
  ● Custom matcher › preserves error stack

    qux

      43 |     const bar = () => baz();
      44 |     const baz = () => {
    > 45 |       throw Error('qux');
         |             ^
      46 |     };
      47 | 
      48 |     // This expecation fails due to an error we throw (intentionally)

      at Error (__tests__/sync.test.js:45:13)
      at baz (__tests__/sync.test.js:43:23)
      at bar (__tests__/sync.test.js:42:23)
      at foo (__tests__/sync.test.js:52:7)
      at Object.callback (__tests__/sync.test.js:11:18)
      at Object.toCustomMatch (__tests__/sync.test.js:53:8)

"
`;
